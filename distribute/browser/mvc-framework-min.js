var MVC=MVC||{};MVC.Constants={},MVC.CONST=MVC.Constants,MVC.Constants.Events={},MVC.CONST.EV=MVC.Constants.Events,MVC.Templates={ObjectQueryStringFormatInvalidRoot:function(t){return['Object Query "string" property must be formatted to first include "[@]".'].join("\n")},DataSchemaMismatch:function(t){return["Data and Schema properties do not match."].join("\n")},DataFunctionInvalid:function(t){['Model Data property type "Function" is not valid.'].join("\n")},DataUndefined:function(t){["Model Data property undefined."].join("\n")},SchemaUndefined:function(t){['Model "Schema" undefined.'].join("\n")}},MVC.TMPL=MVC.Templates,MVC.Utils={},MVC.Utils.isArray=function(t){return Array.isArray(t)},MVC.Utils.isObject=function(t){return!Array.isArray(t)&&"object"==typeof t},MVC.Utils.isEqualType=function(t,e){return t===e},MVC.Utils.isHTMLElement=function(t){return t instanceof HTMLElement},MVC.Utils.typeOf=function(t){switch(typeof t){case"object":return MVC.Utils.isArray(t)?"array":MVC.Utils.isObject(t)?"object":null===t?"null":void 0;case"string":case"number":case"boolean":case"undefined":case"function":return typeof t}},MVC.Utils.addPropertiesToObject=function(){var t;switch(arguments.length){case 2:var e=arguments[0];for(var[s,i]of(t=arguments[1],Object.entries(e)))t[s]=i;break;case 3:var r=arguments[0],a=arguments[1];(t=arguments[2])[r]=a}return t},MVC.Utils.objectQuery=function(t,e){var s=MVC.Utils.objectQuery.parseNotation(t);return"@"===s[0]&&s.splice(0,1),s.length?(e=MVC.Utils.isObject(e)?Object.entries(e):e,s.reduce((t,e,s,i)=>{var r=[];for(var[a,n]of(e=MVC.Utils.objectQuery.parseFragment(e),t))a.match(e)&&(r=s===i.length-1?r.concat([[a,n]]):r.concat(Object.entries(n)));return t=r},e)):e},MVC.Utils.objectQuery.parseNotation=function(t){return t="["===t.charAt(0)&&"]"==t.charAt(t.length-1)?t.slice(1,-1).split("]["):t.split(".")},MVC.Utils.objectQuery.parseFragment=function(t){return"/"===t.charAt(0)&&"/"==t.charAt(t.length-1)&&(t=t.slice(1,-1),t=new RegExp("^".concat(t,"$"))),t},MVC.Utils.toggleEventsForTargetObjects=function(t,e,s,i){for(var[r,a]of Object.entries(e)){var n=r.split(" "),l=n[0],h=n[1],o=MVC.Utils.objectQuery(l,s);for(var[c,d]of o=MVC.Utils.isArray(o)?o:[["@",o]]){var b="on"===t?d instanceof NodeList||d instanceof HTMLElement||d instanceof Document?"addEventListener":"on":d instanceof NodeList||d instanceof HTMLElement||d instanceof Document?"removeEventListener":"off",v=MVC.Utils.objectQuery(a,i)[0][1];if(d instanceof NodeList)for(var u of d)u[b](h,v);else HTMLElement,d[b](h,v)}}},MVC.Utils.bindEventsToTargetObjects=function(){this.toggleEventsForTargetObjects("on",...arguments)},MVC.Utils.unbindEventsFromTargetObjects=function(){this.toggleEventsForTargetObjects("off",...arguments)},MVC.Utils.validateDataSchema=function(t,e){if(!e)throw MVC.TMPL;switch(MVC.Utils.typeOf(t)){case"array":var s=[];if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(s)))for(var[i,r]of(console.log(e.name),Object.entries(t)))s.push(this.validateDataSchema(r));return s;case"object":var a={};if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(a)))for(var[n,l]of(console.log(e.name),Object.entries(t)))a[n]=this.validateDataSchema(l,e[n]);return a;case"string":case"number":case"boolean":if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(t)))return console.log(e.name),t;throw MVC.TMPL;case"null":if(MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(t)))return t;break;case"undefined":case"function":throw MVC.TMPL}},MVC.Events=class{constructor(){}get _events(){return this.events=this.events?this.events:{},this.events}eventCallbacks(t){return this._events[t]||{}}eventCallbackName(t){return t.name.length?t.name:"anonymousFunction"}eventCallbackGroup(t,e){return t[e]||[]}on(t,e){var s=this.eventCallbacks(t),i=this.eventCallbackName(e),r=this.eventCallbackGroup(s,i);r.push(e),s[i]=r,this._events[t]=s}off(){switch(arguments.length){case 1:var t=arguments[0];delete this._events[t];break;case 2:t=arguments[0];var e=arguments[1],s=this.eventCallbackName(e);delete this._events[t][s]}}emit(t,e){var s=this.eventCallbacks(t);for(var[i,r]of Object.entries(s))for(var a of r){a(e,...Object.values(arguments).splice(2)||[])}}},MVC.Channels=class{constructor(){}get _channels(){return this.channels=this.channels?this.channels:{},this.channels}channel(t){return this._channels[t]=this._channels[t]?this._channels[t]:new MVC.Channels.Channel,this._channels[t]}off(t){delete this._channels[t]}},MVC.Channels.Channel=class{constructor(){}get _responses(){return this.responses=this.responses?this.responses:{},this.responses}response(t,e){if(!e)return this._responses[response];this._responses[t]=e}request(t,e){if(this._responses[t])return this._responses[t](e)}off(t){if(t)delete this._responses[t];else for(var[e]of Object.keys(this._responses))delete this._responses[e]}},MVC.Base=class extends MVC.Events{constructor(t,e){super(),e&&(this._configuration=e),t&&(this._settings=t)}get _configuration(){return this.configuration=this.configuration?this.configuration:{},this.configuration}set _configuration(t){this.configuration=t}get _settings(){return this.settings=this.settings?this.settings:{},this.settings}set _settings(t){this.settings=MVC.Utils.addPropertiesToObject(t,this._settings)}get _emitters(){return this.emitters=this.emitters?this.emitters:{},this.emitters}set _emitters(t){this.emitters=MVC.Utils.addPropertiesToObject(t,this._emitters)}},MVC.Service=class extends MVC.Base{constructor(){super(...arguments)}get _defaults(){return this.defaults||{contentType:{"Content-Type":"application/json"},responseType:"json"}}get _responseTypes(){return["","arraybuffer","blob","document","json","text"]}get _responseType(){return this.responseType}set _responseType(t){this._xhr.responseType=this._responseTypes.find(e=>e===t)||this._defaults.responseType}get _type(){return this.type}set _type(t){this.type=t}get _url(){return this.url}set _url(t){this.url=t}get _headers(){return this.headers||[]}set _headers(t){this._headers.length=0,t.forEach(t=>{this._headers.push(t),t=Object.entries(t)[0],this._xhr.setRequestHeader(t[0],t[1])})}get _data(){return this.data}set _data(t){this.data=t}get _xhr(){return this.xhr=this.xhr?this.xhr:new XMLHttpRequest,this.xhr}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}request(t){return t=t||this.data||null,new Promise((e,s)=>{200===this._xhr.status&&this._xhr.abort(),this._xhr.open(this.type,this.url),this._headers=this.settings.headers||[this._defaults.contentType],this._xhr.onload=e,this._xhr.onerror=s,this._xhr.send(t)}).then(t=>(this.emit("xhr:resolve",{name:"xhr:resolve",data:t.currentTarget}),t))}enable(){var t=this.settings;return!this.enabled&&Object.keys(t).length&&(t.type&&(this._type=t.type),t.url&&(this._url=t.url),t.data&&(this._data=t.data||null),this.settings.responseType&&(this._responseType=this._settings.responseType),this._enabled=!0),this}disable(){var t=this.settings;return this.enabled&&Object.keys(t).length&&(delete this._type,delete this._url,delete this._data,delete this._headers,delete this._responseType,this._enabled=!1),this}},MVC.Model=class extends MVC.Base{constructor(){super(...arguments)}get _localStorage(){return this.localStorage}set _localStorage(t){this.localStorage=t}get _defaults(){return this.defaults}set _defaults(t){this.defaults=t}get _schema(){return this._schema}set _schema(t){this.schema=t}get _histiogram(){return this.histiogram||{length:1}}set _histiogram(t){this.histiogram=Object.assign(this._histiogram,t)}get _history(){return this.history=this.history?this.history:[],this.history}set _history(t){Object.keys(t).length&&this._histiogram.length&&(this._history.unshift(this.parse(t)),this._history.splice(this._histiogram.length))}get _db(){var t=localStorage.getItem(this.localStorage.endpoint);return this.db=t||"{}",JSON.parse(this.db)}set _db(t){t=JSON.stringify(t),localStorage.setItem(this.localStorage.endpoint,t)}get _data(){return this.data=this.data?this.data:{},this.data}get _dataEvents(){return this.dataEvents=this.dataEvents?this.dataEvents:{},this.dataEvents}set _dataEvents(t){this.dataEvents=MVC.Utils.addPropertiesToObject(t,this._dataEvents)}get _dataCallbacks(){return this.dataCallbacks=this.dataCallbacks?this.dataCallbacks:{},this.dataCallbacks}set _dataCallbacks(t){this.dataCallbacks=MVC.Utils.addPropertiesToObject(t,this._dataCallbacks)}get _services(){return this.services=this.services?this.services:{},this.services}set _services(t){this.services=MVC.Utils.addPropertiesToObject(t,this._services)}get _serviceEvents(){return this.serviceEvents=this.serviceEvents?this.serviceEvents:{},this.serviceEvents}set _serviceEvents(t){this.serviceEvents=MVC.Utils.addPropertiesToObject(t,this._serviceEvents)}get _serviceCallbacks(){return this.serviceCallbacks=this.serviceCallbacks?this.serviceCallbacks:{},this.serviceCallbacks}set _serviceCallbacks(t){this.serviceCallbacks=MVC.Utils.addPropertiesToObject(t,this._serviceCallbacks)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}enableServiceEvents(){MVC.Utils.bindEventsToTargetObjects(this.serviceEvents,this.services,this.serviceCallbacks)}disableServiceEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.serviceEvents,this.services,this.serviceCallbacks)}enableDataEvents(){MVC.Utils.bindEventsToTargetObjects(this.dataEvents,this,this.dataCallbacks)}disableDataEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.dataEvents,this,this.dataCallbacks)}setDefaults(){var t={};this.defaults&&Object.assign(t,this.defaults),this.localStorage&&Object.assign(t,this._db),Object.keys(t)&&this.set(t)}get(){var t=arguments[0];return this._data["_".concat(t)]}set(){switch(this._history=this.parse(),arguments.length){case 1:Object.entries(arguments[0]).forEach((t,e)=>{var[s,i]=t;this.setDataProperty(s,i),this.localStorage&&this.setDB(s,i)});break;case 2:var t=arguments[0],e=arguments[1];this.setDataProperty(t,e),this.localStorage&&this.setDB(t,e)}}unset(){switch(this._history=this.parse(),arguments.length){case 0:for(var t of Object.keys(this._data))this.unsetDataProperty(t);break;case 1:var e=arguments[0];this.unsetDataProperty(e)}}setDB(){var t=this._db;switch(arguments.length){case 1:Object.entries(arguments[0]).forEach(e=>{var[s,i]=e;t[s]=i});break;case 2:var e=arguments[0],s=arguments[1];t[e]=s}this._db=t}unsetDB(){switch(arguments.length){case 0:delete this._db;break;case 1:var t=this._db;delete t[arguments[0]],this._db=t}}setDataProperty(t,e){if(!this._data["_".concat(t)]){var s=this;Object.defineProperties(this._data,{["_".concat(t)]:{configurable:!0,get(){return this[t]},set(e){this[t]=e;var i=["set",":",t].join("");s.emit(i,{name:i,data:{key:t,value:e}},s),s.emit("set",{name:"set",data:{key:t,value:e}},s)}}})}this._data["_".concat(t)]=e}unsetDataProperty(t){var e=["unset",":",t].join(""),s=this._data[t];delete this._data["_".concat(t)],delete this._data[t],this.emit(e,{name:e,data:{key:t,value:s}}),this.emit("unset",{name:"unset",data:{key:t,value:s}})}parse(t){return t=t||this._data,JSON.parse(JSON.stringify(Object.assign({},t)))}enable(){this.settings&&!this.enabled&&(this.settings.localStorage&&(this._localStorage=this.settings.localStorage),this.settings.histiogram&&(this._histiogram=this.settings.histiogram),this.settings.emitters&&(this._emitters=this.settings.emitters),this.settings.services&&(this._services=this.settings.services),this.settings.serviceCallbacks&&(this._serviceCallbacks=this.settings.serviceCallbacks),this.settings.serviceEvents&&(this._serviceEvents=this.settings.serviceEvents),this.settings.data&&this.set(this.settings.data),this.settings.dataCallbacks&&(this._dataCallbacks=this.settings.dataCallbacks),this.settings.dataEvents&&(this._dataEvents=this.settings.dataEvents),this.settings.schema&&(this._schema=this.settings.schema),this.settings.defaults&&(this._defaults=this.settings.defaults),this.services&&this.serviceEvents&&this.serviceCallbacks&&this.enableServiceEvents(),this.dataEvents&&this.dataCallbacks&&this.enableDataEvents(),this._enabled=!0)}disable(){this.settings&&!this.enabled&&(this.services&&this.serviceEvents&&this.serviceCallbacks&&this.disableServiceEvents(),this.dataEvents&&this.dataCallbacks&&this.disableDataEvents(),delete this._localStorage,delete this._histiogram,delete this._services,delete this._serviceCallbacks,delete this._serviceEvents,delete this._data,delete this._dataCallbacks,delete this._dataEvents,delete this._schema,delete this._emitters,this._enabled=!1)}},MVC.Emitter=class extends MVC.Model{constructor(){super(...arguments),this.settings&&this.settings.name&&(this._name=this.settings.name)}get _name(){return this.name}set _name(t){this.name=t}emission(){var t={name:this.name,data:this.data};return this.emit(this.name,t),t}},MVC.Emitters={},MVC.Emitters.NavigateEmitter=class extends MVC.Emitter{constructor(){super(...arguments),this.addSettings(),this.enable()}addSettings(){this._name="navigate",this._schema={oldURL:String,newURL:String,currentRoute:String,currentController:String}}},MVC.View=class extends MVC.Base{constructor(){super(...arguments)}get _elementName(){return this._element.tagName}set _elementName(t){this._element||(this._element=document.createElement(t))}get _element(){return this.element}set _element(t){t instanceof HTMLElement||t instanceof Document?this.element=t:"string"==typeof t&&(this.element=document.querySelector(t)),this.elementObserver.observe(this.element,{subtree:!0,childList:!0})}get _attributes(){return this._element.attributes}set _attributes(t){for(var[e,s]of Object.entries(t))void 0===s?this._element.removeAttribute(e):this._element.setAttribute(e,s)}get _ui(){return this.ui=this.ui?this.ui:{},this.ui}set _ui(t){for(var[e,s]of(this._ui.$element||(this._ui.$element=this.element),Object.entries(t)))"string"==typeof s?this._ui[e]=this._element.querySelectorAll(s):(s instanceof HTMLElement||s instanceof Document)&&(this._ui[e]=s)}get _uiEvents(){return this.uiEvents}set _uiEvents(t){this.uiEvents=t}get _uiCallbacks(){return this.uiCallbacks=this.uiCallbacks?this.uiCallbacks:{},this.uiCallbacks}set _uiCallbacks(t){this.uiCallbacks=MVC.Utils.addPropertiesToObject(t,this._uiCallbacks)}get _observerCallbacks(){return this.observerCallbacks=this.observerCallbacks?this.observerCallbacks:{},this.observerCallbacks}set _observerCallbacks(t){this.observerCallbacks=MVC.Utils.addPropertiesToObject(t,this._observerCallbacks)}get elementObserver(){return this._elementObserver=this._elementObserver?this._elementObserver:new MutationObserver(this.elementObserve.bind(this)),this._elementObserver}get _insert(){return this.insert}set _insert(t){this.insert=t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _templates(){return this.templates=this.templates?this.templates:{},this.templates}set _templates(t){this.templates=MVC.Utils.addPropertiesToObject(t,this._templates)}elementObserve(t,e){for(var[s,i]of Object.entries(t))switch(i.type){case"childList":for(var r of["addedNodes","removedNodes"])i[r].length&&this.resetUI()}}autoInsert(){this.insert&&document.querySelectorAll(this.insert.element).forEach(t=>{t.insertAdjacentElement(this.insert.method,this.element)})}autoRemove(){this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element)}enableElement(t){(t=t||this.settings).elementName&&(this._elementName=t.elementName),t.element&&(this._element=t.element),t.attributes&&(this._attributes=t.attributes),t.templates&&(this._templates=t.templates),t.insert&&(this._insert=t.insert)}disableElement(t){t=t||this.settings,this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element),this.element&&delete this.element,this.attributes&&delete this.attributes,this.templates&&delete this.templates,this.insert&&delete this.insert}resetUI(){this.disableUI(),this.enableUI()}enableUI(t){(t=t||this.settings).ui&&(this._ui=t.ui),t.uiCallbacks&&(this._uiCallbacks=t.uiCallbacks),t.uiEvents&&(this._uiEvents=t.uiEvents,this.enableUIEvents())}disableUI(t){(t=t||this.settings).uiEvents&&(this.disableUIEvents(),delete this._uiEvents),delete this.uiEvents,delete this.ui,delete this.uiCallbacks}enableUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.bindEventsToTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}disableUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.unbindEventsFromTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}enableEmitters(){this.settings.emitters&&(this._emitters=this.settings.emitters)}disableEmitters(){this._emitters&&delete this._emitters}enable(){var t=this.settings;if(t&&!this._enabled)return this.enableEmitters(),this.enableElement(t),this.enableUI(t),this._enabled=!0,this}disable(){var t=this.settings;if(t&&this._enabled)return this.disableUI(t),this.disableElement(t),this.disableEmitters(),this._enabled=!1,thiss}},MVC.Controller=class extends MVC.Base{constructor(){super(...arguments)}get _emitterCallbacks(){return this.emitterCallbacks=this.emitterCallbacks?this.emitterCallbacks:{},this.emitterCallbacks}set _emitterCallbacks(t){this.emitterCallbacks=MVC.Utils.addPropertiesToObject(t,this._emitterCallbacks)}get _modelCallbacks(){return this.modelCallbacks=this.modelCallbacks?this.modelCallbacks:{},this.modelCallbacks}set _modelCallbacks(t){this.modelCallbacks=MVC.Utils.addPropertiesToObject(t,this._modelCallbacks)}get _viewCallbacks(){return this.viewCallbacks=this.viewCallbacks?this.viewCallbacks:{},this.viewCallbacks}set _viewCallbacks(t){this.viewCallbacks=MVC.Utils.addPropertiesToObject(t,this._viewCallbacks)}get _controllerCallbacks(){return this.controllerCallbacks=this.controllerCallbacks?this.controllerCallbacks:{},this.controllerCallbacks}set _controllerCallbacks(t){this.controllerCallbacks=MVC.Utils.addPropertiesToObject(t,this._controllerCallbacks)}get _models(){return this.models=this.models?this.models:{},this.models}set _models(t){this.models=MVC.Utils.addPropertiesToObject(t,this._models)}get _views(){return this.views=this.views?this.views:{},this.views}set _views(t){this.views=MVC.Utils.addPropertiesToObject(t,this._views)}get _controllers(){return this.controllers=this.controllers?this.controllers:{},this.controllers}set _controllers(t){this.controllers=MVC.Utils.addPropertiesToObject(t,this._controllers)}get _routers(){return this.routers=this.routers?this.routers:{},this.routers}set _routers(t){this.routers=MVC.Utils.addPropertiesToObject(t,this._routers)}get _routerEvents(){return this.routerEvents=this.routerEvents?this.routerEvents:{},this.routerEvents}set _routerEvents(t){this.routerEvents=MVC.Utils.addPropertiesToObject(t,this._routerEvents)}get _routerCallbacks(){return this.routerCallbacks=this.routerCallbacks?this.routerCallbacks:{},this.routerCallbacks}set _routerCallbacks(t){this.routerCallbacks=MVC.Utils.addPropertiesToObject(t,this._routerCallbacks)}get _emitterEvents(){return this.emitterEvents=this.emitterEvents?this.emitterEvents:{},this.emitterEvents}set _emitterEvents(t){this.emitterEvents=MVC.Utils.addPropertiesToObject(t,this._emitterEvents)}get _modelEvents(){return this.modelEvents=this.modelEvents?this.modelEvents:{},this.modelEvents}set _modelEvents(t){this.modelEvents=MVC.Utils.addPropertiesToObject(t,this._modelEvents)}get _viewEvents(){return this.viewEvents=this.viewEvents?this.viewEvents:{},this.viewEvents}set _viewEvents(t){this.viewEvents=MVC.Utils.addPropertiesToObject(t,this._viewEvents)}get _controllerEvents(){return this.controllerEvents=this.controllerEvents?this.controllerEvents:{},this.controllerEvents}set _controllerEvents(t){this.controllerEvents=MVC.Utils.addPropertiesToObject(t,this._controllerEvents)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}enableModelEvents(){MVC.Utils.bindEventsToTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}disableModelEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}enableViewEvents(){MVC.Utils.bindEventsToTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}disableViewEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}enableControllerEvents(){MVC.Utils.bindEventsToTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}disableControllerEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}enableEmitterEvents(){MVC.Utils.bindEventsToTargetObjects(this.emitterEvents,this.emitters,this.emitterCallbacks)}disableEmitterEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.emitterEvents,this.emitters,this.emitterCallbacks)}enableRouterEvents(){MVC.Utils.bindEventsToTargetObjects(this.routerEvents,this.routers,this.routerCallbacks)}disableRouterEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.routerEvents,this.routers,this.routerCallbacks)}enable(){var t=this.settings;t&&!this.enabled&&(t.modelCallbacks&&(this._modelCallbacks=t.modelCallbacks),t.viewCallbacks&&(this._viewCallbacks=t.viewCallbacks),t.controllerCallbacks&&(this._controllerCallbacks=t.controllerCallbacks),t.emitterCallbacks&&(this._emitterCallbacks=t.emitterCallbacks),t.routerCallbacks&&(this._routerCallbacks=t.routerCallbacks),t.models&&(this._models=t.models),t.views&&(this._views=t.views),t.controllers&&(this._controllers=t.controllers),t.emitters&&(this._emitters=t.emitters),t.routers&&(this._routers=t.routers),t.routerEvents&&(this._routerEvents=t.routerEvents),t.modelEvents&&(this._modelEvents=t.modelEvents),t.viewEvents&&(this._viewEvents=t.viewEvents),t.controllerEvents&&(this._controllerEvents=t.controllerEvents),t.emitterEvents&&(this._emitterEvents=t.emitterEvents),this.modelEvents&&this.models&&this.modelCallbacks&&this.enableModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.enableViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.enableControllerEvents(),this.routerEvents&&this.routers&&this.routerCallbacks&&this.enableRouterEvents(),this.emitterEvents&&this.emitters&&this.emitterCallbacks&&this.enableEmitterEvents(),this._enabled=!0)}reset(){this.disable(),this.enable()}disable(){this.settings&&this.enabled&&(this.modelEvents&&this.models&&this.modelCallbacks&&this.disableModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.disableViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.disableControllerEvents()),this.routerEvents&&this.routers&&this.routerCallbacks&&this.disableRouterEvents(),this.emitterEvents&&this.emitters&&this.emitterCallbacks&&(this.disableEmitterEvents(),delete this._modelCallbacks,delete this._viewCallbacks,delete this._controllerCallbacks,delete this._emitterCallbacks,delete this._routerCallbacks,delete this._models,delete this._views,delete this._controllers,delete this._emitters,delete this._routers,delete this._routerEvents,delete this._modelEvents,delete this._viewEvents,delete this._controllerEvents,delete this._emitterEvents,this._enabled=!1)}},MVC.Router=class extends MVC.Base{constructor(){super(...arguments)}get route(){return this._hash?String(window.location.hash).split("#").pop():String(window.location.pathname)}get _hash(){return this.hash}set _hash(t){this.hash=t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _routes(){return this.routes=this.routes?this.routes:{},this.routes}set _routes(t){this.routes=MVC.Utils.addPropertiesToObject(t,this._routes)}get _controller(){return this.controller}set _controller(t){this.controller=t}get _previousURL(){return this.previousURL}set _previousURL(t){this.previousURL=t}get _currentURL(){return this.currentURL}set _currentURL(t){this.currentURL=t}get fragmentIDRegExp(){return new RegExp(/^([0-9A-Z\?\=\,\.\*\-\_\'\"\^\%\$\#\@\!\~\(\)\{\}\&\<\>\\\/])*$/,"gi")}fragmentNameRegExp(t){return new RegExp("^".concat(t,"$"))}enable(){this.settings&&!this.enabled&&(this._hash="boolean"!=typeof this.settings.hash||this.settings.hash,this.enableEmitters(),this.enableEvents(),this.enableRoutes(),this.routeChange(),this._enabled=!0)}disable(){this.settings&&this.enabled&&(delete this._hash,this.disableEvents(),this.disableRoutes(),this.disableEmitters(),this._enabled=!1)}enableRoutes(){this.settings.controller&&(this._controller=this.settings.controller),this._routes=Object.entries(this.settings.routes).reduce((t,e,s,i)=>{var[r,a]=e;return t[r]=this.controller[a].bind(this.controller),t},{})}enableEmitters(){this._emitters={navigateEmitter:new MVC.Emitters.NavigateEmitter}}disableEmitters(){delete this._emitters.navigateEmitter}disableRoutes(){delete this._routes,delete this._controller}enableEvents(){window.addEventListener("hashchange",this.routeChange.bind(this))}disableEvents(){window.removeEventListener("hashchange",this.routeChange.bind(this))}routeChange(){var t=this.route.split("/").filter(t=>t.length);t=t.length?t:["/"];var e=Object.entries(this.routes).filter(e=>{var s,[i,r]=e;if(i=(i=i.split("/").filter(t=>t.length)).length?i:["/"],t.length&&t.length===i.length)return i.filter((e,i)=>{if((void 0===s||!0===s)&&(":"===e[0]?e=this.fragmentIDRegExp:(e=e.replace(new RegExp("/","gi"),"\\/"),e=this.fragmentNameRegExp(e)),!0===(s=e.test(t[i]))&&i===t.length-1))return r})[0]})[0];try{this.currentURL&&(this._previousURL=this.currentURL),this._currentURL=window.location.href;e[0];var s=e[1],i=this.emitters.navigateEmitter,r={currentURL:this.currentURL,previousURL:this.previousURL,currentRoute:this.route,currentController:s.name};i.set(r),this.emit(i.name,i.emission()),s(i.emission())}catch(t){throw t}}navigate(t){window.location.hash=t}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1WQy5qcyIsIkNvbnN0YW50cy5qcyIsIkV2ZW50cy5qcyIsIlRlbXBsYXRlcy5qcyIsIlV0aWxzLmpzIiwiaXMuanMiLCJ0eXBlT2YuanMiLCJhZGRQcm9wZXJ0aWVzVG9PYmplY3QuanMiLCJvYmplY3RRdWVyeS5qcyIsInRvZ2dsZUV2ZW50c0ZvclRhcmdldE9iamVjdHMuanMiLCJ2YWxpZGF0ZURhdGFTY2hlbWEuanMiLCJDaGFubmVscy5qcyIsIkNoYW5uZWwuanMiLCJCYXNlLmpzIiwiU2VydmljZS5qcyIsIk1vZGVsLmpzIiwiRW1pdHRlci5qcyIsImluZGV4LmpzIiwiTmF2aWdhdGUuanMiLCJWaWV3LmpzIiwiQ29udHJvbGxlci5qcyIsIlJvdXRlci5qcyJdLCJuYW1lcyI6WyJNVkMiLCJDb25zdGFudHMiLCJDT05TVCIsIkV2ZW50cyIsIkVWIiwiVGVtcGxhdGVzIiwiT2JqZWN0UXVlcnlTdHJpbmdGb3JtYXRJbnZhbGlkUm9vdCIsImRhdGEiLCJqb2luIiwiRGF0YVNjaGVtYU1pc21hdGNoIiwiRGF0YUZ1bmN0aW9uSW52YWxpZCIsIkRhdGFVbmRlZmluZWQiLCJTY2hlbWFVbmRlZmluZWQiLCJUTVBMIiwiVXRpbHMiLCJpc0FycmF5Iiwib2JqZWN0IiwiQXJyYXkiLCJpc09iamVjdCIsImlzRXF1YWxUeXBlIiwidmFsdWVBIiwidmFsdWVCIiwiaXNIVE1MRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidHlwZU9mIiwiYWRkUHJvcGVydGllc1RvT2JqZWN0IiwidGFyZ2V0T2JqZWN0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicHJvcGVydGllcyIsIl9wcm9wZXJ0eU5hbWUiLCJfcHJvcGVydHlWYWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJwcm9wZXJ0eU5hbWUiLCJwcm9wZXJ0eVZhbHVlIiwib2JqZWN0UXVlcnkiLCJzdHJpbmciLCJjb250ZXh0Iiwic3RyaW5nRGF0YSIsInBhcnNlTm90YXRpb24iLCJzcGxpY2UiLCJyZWR1Y2UiLCJmcmFnbWVudCIsImZyYWdtZW50SW5kZXgiLCJmcmFnbWVudHMiLCJwcm9wZXJ0eUtleSIsInBhcnNlRnJhZ21lbnQiLCJtYXRjaCIsImNvbmNhdCIsImNoYXJBdCIsInNsaWNlIiwic3BsaXQiLCJSZWdFeHAiLCJ0b2dnbGVFdmVudHNGb3JUYXJnZXRPYmplY3RzIiwidG9nZ2xlTWV0aG9kIiwiZXZlbnRzIiwidGFyZ2V0T2JqZWN0cyIsImNhbGxiYWNrcyIsImV2ZW50U2V0dGluZ3MiLCJldmVudENhbGxiYWNrTmFtZSIsImV2ZW50RGF0YSIsImV2ZW50VGFyZ2V0U2V0dGluZ3MiLCJldmVudE5hbWUiLCJldmVudFRhcmdldHMiLCJldmVudFRhcmdldE5hbWUiLCJldmVudFRhcmdldCIsImV2ZW50TWV0aG9kTmFtZSIsIk5vZGVMaXN0IiwiRG9jdW1lbnQiLCJldmVudENhbGxiYWNrIiwiX2V2ZW50VGFyZ2V0IiwiYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cyIsInRoaXMiLCJ1bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyIsInZhbGlkYXRlRGF0YVNjaGVtYSIsInNjaGVtYSIsImFycmF5IiwiYXJyYXlLZXkiLCJhcnJheVZhbHVlIiwiY29uc29sZSIsImxvZyIsIm5hbWUiLCJwdXNoIiwib2JqZWN0S2V5Iiwib2JqZWN0VmFsdWUiLCJbb2JqZWN0IE9iamVjdF0iLCJfZXZlbnRzIiwiZXZlbnRDYWxsYmFja3MiLCJldmVudENhbGxiYWNrR3JvdXAiLCJldmVudENhbGxiYWNrR3JvdXBOYW1lIiwidmFsdWVzIiwiQ2hhbm5lbHMiLCJfY2hhbm5lbHMiLCJjaGFubmVscyIsImNoYW5uZWxOYW1lIiwiQ2hhbm5lbCIsIl9yZXNwb25zZXMiLCJyZXNwb25zZXMiLCJyZXNwb25zZU5hbWUiLCJyZXNwb25zZUNhbGxiYWNrIiwicmVzcG9uc2UiLCJyZXF1ZXN0RGF0YSIsIl9yZXNwb25zZU5hbWUiLCJrZXlzIiwiQmFzZSIsInNldHRpbmdzIiwiY29uZmlndXJhdGlvbiIsInN1cGVyIiwiX2NvbmZpZ3VyYXRpb24iLCJfc2V0dGluZ3MiLCJfZW1pdHRlcnMiLCJlbWl0dGVycyIsIlNlcnZpY2UiLCJfZGVmYXVsdHMiLCJkZWZhdWx0cyIsImNvbnRlbnRUeXBlIiwiQ29udGVudC1UeXBlIiwicmVzcG9uc2VUeXBlIiwiX3Jlc3BvbnNlVHlwZXMiLCJfcmVzcG9uc2VUeXBlIiwiX3hociIsImZpbmQiLCJyZXNwb25zZVR5cGVJdGVtIiwiX3R5cGUiLCJ0eXBlIiwiX3VybCIsInVybCIsIl9oZWFkZXJzIiwiaGVhZGVycyIsImZvckVhY2giLCJoZWFkZXIiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiX2RhdGEiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIl9lbmFibGVkIiwiZW5hYmxlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic3RhdHVzIiwiYWJvcnQiLCJvcGVuIiwib25sb2FkIiwib25lcnJvciIsInNlbmQiLCJ0aGVuIiwiZW1pdCIsImN1cnJlbnRUYXJnZXQiLCJNb2RlbCIsIl9sb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJfc2NoZW1hIiwiX2hpc3Rpb2dyYW0iLCJoaXN0aW9ncmFtIiwiYXNzaWduIiwiX2hpc3RvcnkiLCJoaXN0b3J5IiwidW5zaGlmdCIsInBhcnNlIiwiX2RiIiwiZGIiLCJnZXRJdGVtIiwiZW5kcG9pbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic2V0SXRlbSIsIl9kYXRhRXZlbnRzIiwiZGF0YUV2ZW50cyIsIl9kYXRhQ2FsbGJhY2tzIiwiZGF0YUNhbGxiYWNrcyIsIl9zZXJ2aWNlcyIsInNlcnZpY2VzIiwiX3NlcnZpY2VFdmVudHMiLCJzZXJ2aWNlRXZlbnRzIiwiX3NlcnZpY2VDYWxsYmFja3MiLCJzZXJ2aWNlQ2FsbGJhY2tzIiwic2V0IiwicHJvcGVydHkiLCJfcmVmIiwiaW5kZXgiLCJrZXkiLCJ2YWx1ZSIsInNldERhdGFQcm9wZXJ0eSIsInNldERCIiwiX2tleSIsInVuc2V0RGF0YVByb3BlcnR5IiwiX3JlZjIiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwic2V0VmFsdWVFdmVudE5hbWUiLCJ1bnNldFZhbHVlRXZlbnROYW1lIiwidW5zZXRWYWx1ZSIsImVuYWJsZVNlcnZpY2VFdmVudHMiLCJlbmFibGVEYXRhRXZlbnRzIiwiZGlzYWJsZVNlcnZpY2VFdmVudHMiLCJkaXNhYmxlRGF0YUV2ZW50cyIsIkVtaXR0ZXIiLCJfbmFtZSIsIkVtaXR0ZXJzIiwiTmF2aWdhdGVFbWl0dGVyIiwiYWRkU2V0dGluZ3MiLCJlbmFibGUiLCJvbGRVUkwiLCJTdHJpbmciLCJuZXdVUkwiLCJjdXJyZW50Um91dGUiLCJjdXJyZW50Q29udHJvbGxlciIsIlZpZXciLCJfZWxlbWVudE5hbWUiLCJfZWxlbWVudCIsInRhZ05hbWUiLCJlbGVtZW50TmFtZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsInN1YnRyZWUiLCJjaGlsZExpc3QiLCJfYXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVLZXkiLCJhdHRyaWJ1dGVWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIl91aSIsInVpIiwidWlLZXkiLCJ1aVZhbHVlIiwicXVlcnlTZWxlY3RvckFsbCIsIl91aUV2ZW50cyIsInVpRXZlbnRzIiwiX3VpQ2FsbGJhY2tzIiwidWlDYWxsYmFja3MiLCJfb2JzZXJ2ZXJDYWxsYmFja3MiLCJvYnNlcnZlckNhbGxiYWNrcyIsIl9lbGVtZW50T2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiZWxlbWVudE9ic2VydmUiLCJiaW5kIiwiX2luc2VydCIsImluc2VydCIsIl90ZW1wbGF0ZXMiLCJ0ZW1wbGF0ZXMiLCJtdXRhdGlvblJlY29yZExpc3QiLCJvYnNlcnZlciIsIm11dGF0aW9uUmVjb3JkSW5kZXgiLCJtdXRhdGlvblJlY29yZCIsIm11dGF0aW9uUmVjb3JkQ2F0ZWdvcnkiLCJyZXNldFVJIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwibWV0aG9kIiwicGFyZW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwiZGlzYWJsZVVJIiwiZW5hYmxlVUkiLCJlbmFibGVVSUV2ZW50cyIsImRpc2FibGVVSUV2ZW50cyIsImVuYWJsZUVtaXR0ZXJzIiwiZW5hYmxlRWxlbWVudCIsImRpc2FibGVFbGVtZW50IiwiZGlzYWJsZUVtaXR0ZXJzIiwidGhpc3MiLCJDb250cm9sbGVyIiwiX2VtaXR0ZXJDYWxsYmFja3MiLCJlbWl0dGVyQ2FsbGJhY2tzIiwiX21vZGVsQ2FsbGJhY2tzIiwibW9kZWxDYWxsYmFja3MiLCJfdmlld0NhbGxiYWNrcyIsInZpZXdDYWxsYmFja3MiLCJfY29udHJvbGxlckNhbGxiYWNrcyIsImNvbnRyb2xsZXJDYWxsYmFja3MiLCJfbW9kZWxzIiwibW9kZWxzIiwiX3ZpZXdzIiwidmlld3MiLCJfY29udHJvbGxlcnMiLCJjb250cm9sbGVycyIsIl9yb3V0ZXJzIiwicm91dGVycyIsIl9yb3V0ZXJFdmVudHMiLCJyb3V0ZXJFdmVudHMiLCJfcm91dGVyQ2FsbGJhY2tzIiwicm91dGVyQ2FsbGJhY2tzIiwiX2VtaXR0ZXJFdmVudHMiLCJlbWl0dGVyRXZlbnRzIiwiX21vZGVsRXZlbnRzIiwibW9kZWxFdmVudHMiLCJfdmlld0V2ZW50cyIsInZpZXdFdmVudHMiLCJfY29udHJvbGxlckV2ZW50cyIsImNvbnRyb2xsZXJFdmVudHMiLCJlbmFibGVNb2RlbEV2ZW50cyIsImVuYWJsZVZpZXdFdmVudHMiLCJlbmFibGVDb250cm9sbGVyRXZlbnRzIiwiZW5hYmxlUm91dGVyRXZlbnRzIiwiZW5hYmxlRW1pdHRlckV2ZW50cyIsImRpc2FibGUiLCJkaXNhYmxlTW9kZWxFdmVudHMiLCJkaXNhYmxlVmlld0V2ZW50cyIsImRpc2FibGVDb250cm9sbGVyRXZlbnRzIiwiZGlzYWJsZVJvdXRlckV2ZW50cyIsImRpc2FibGVFbWl0dGVyRXZlbnRzIiwiUm91dGVyIiwicm91dGUiLCJfaGFzaCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaGFzaCIsInBvcCIsInBhdGhuYW1lIiwiX3JvdXRlcyIsInJvdXRlcyIsIl9jb250cm9sbGVyIiwiY29udHJvbGxlciIsIl9wcmV2aW91c1VSTCIsInByZXZpb3VzVVJMIiwiX2N1cnJlbnRVUkwiLCJjdXJyZW50VVJMIiwiZnJhZ21lbnRJRFJlZ0V4cCIsImVuYWJsZUV2ZW50cyIsImVuYWJsZVJvdXRlcyIsInJvdXRlQ2hhbmdlIiwiZGlzYWJsZUV2ZW50cyIsImRpc2FibGVSb3V0ZXMiLCJyb3V0ZUluZGV4Iiwib3JpZ2luYWxSb3V0ZXMiLCJyb3V0ZVBhdGgiLCJyb3V0ZUNhbGxiYWNrIiwibmF2aWdhdGVFbWl0dGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmaWx0ZXIiLCJyb3V0ZUNvbnRyb2xsZXJEYXRhIiwicm91dGVyUGF0aCIsInJvdXRlckNvbnRyb2xsZXIiLCJ1bmRlZmluZWQiLCJyZXBsYWNlIiwiZnJhZ21lbnROYW1lUmVnRXhwIiwidGVzdCIsImhyZWYiLCJyb3V0ZUNvbnRyb2xsZXIiLCJuYXZpZ2F0ZUVtaXR0ZXJEYXRhIiwiZW1pc3Npb24iLCJlcnJvciIsInBhdGgiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQU1BLEtBQU8sR0FDakJBLElBQUlDLFVBQVksR0FDaEJELElBQUlFLE1BQVFGLElBQUlDLFVBQ2hCRCxJQUFJQyxVQUFVRSxPQUFTLEdBQ3ZCSCxJQUFJRSxNQUFNRSxHQUFLSixJQUFJQyxVQUFVRSxPQUM3QkgsSUFBSUssVUFBWSxDQUNkQyxtQ0FBb0MsU0FBd0NDLEdBQzFFLE1BQU8sQ0FBQyw0RUFBNEVDLEtBQUssT0FFM0ZDLG1CQUFvQixTQUE0QkYsR0FDOUMsTUFBTyxDQUFDLDRDQUE0Q0MsS0FBSyxPQUUzREUsb0JBQXFCLFNBQTZCSCxHQUNoRCxDQUFDLHFEQUF1REMsS0FBSyxPQUUvREcsY0FBZSxTQUF1QkosR0FDcEMsQ0FBQyxrQ0FBa0NDLEtBQUssT0FFMUNJLGdCQUFpQixTQUF5QkwsR0FD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dVEsRUFBTXZSLE9BQVMsR0FDckQsT0FBT3NULElBR1YsS0FFSixHQUVILElBQ016USxLQUFLd1AsYUFBWXhQLEtBQUtxUCxhQUFlclAsS0FBS3dQLFlBQzlDeFAsS0FBS3VQLFlBQWNYLE9BQU9DLFNBQVNpQyxLQUNUUCxFQUFvQixHQUE5QyxJQUNJUSxFQUFrQlIsRUFBb0IsR0FDdENKLEVBQWtCblEsS0FBS3VDLFNBQVM0TixnQkFDaENhLEVBQXNCLENBQ3hCeEIsV0FBWXhQLEtBQUt3UCxXQUNqQkYsWUFBYXRQLEtBQUtzUCxZQUNsQmhILGFBQWN0SSxLQUFLME8sTUFDbkJuRyxrQkFBbUJ3SSxFQUFnQnRRLE1BRXJDMFAsRUFBZ0IxSixJQUFJdUssR0FDcEJoUixLQUFLMkUsS0FBS3dMLEVBQWdCMVAsS0FBTTBQLEVBQWdCYyxZQUNoREYsRUFBZ0JaLEVBQWdCYyxZQUNoQyxNQUFPQyxHQUNQLE1BQU1BLEdBSVZyUSxTQUFTc1EsR0FDUHZDLE9BQU9DLFNBQVNDLEtBQU9xQyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNVkMgPSBNVkMgfHwge31cclxuIiwiTVZDLkNvbnN0YW50cyA9IHt9XG5NVkMuQ09OU1QgPSBNVkMuQ29uc3RhbnRzXG4iLCJNVkMuRXZlbnRzID0gY2xhc3Mge1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuICBnZXQgX2V2ZW50cygpIHtcclxuICAgIHRoaXMuZXZlbnRzID0gKHRoaXMuZXZlbnRzKVxyXG4gICAgICA/IHRoaXMuZXZlbnRzXHJcbiAgICAgIDoge31cclxuICAgIHJldHVybiB0aGlzLmV2ZW50c1xyXG4gIH1cclxuICBldmVudENhbGxiYWNrcyhldmVudE5hbWUpIHsgcmV0dXJuIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdIHx8IHt9IH1cclxuICBldmVudENhbGxiYWNrTmFtZShldmVudENhbGxiYWNrKSB7XHJcbiAgICByZXR1cm4gKGV2ZW50Q2FsbGJhY2submFtZS5sZW5ndGgpXHJcbiAgICAgID8gZXZlbnRDYWxsYmFjay5uYW1lXHJcbiAgICAgIDogJ2Fub255bW91c0Z1bmN0aW9uJ1xyXG4gIH1cclxuICBldmVudENhbGxiYWNrR3JvdXAoZXZlbnRDYWxsYmFja3MsIGV2ZW50Q2FsbGJhY2tOYW1lKSB7XHJcbiAgICByZXR1cm4gZXZlbnRDYWxsYmFja3NbZXZlbnRDYWxsYmFja05hbWVdIHx8IFtdXHJcbiAgfVxyXG4gIG9uKGV2ZW50TmFtZSwgZXZlbnRDYWxsYmFjaykge1xyXG4gICAgbGV0IGV2ZW50Q2FsbGJhY2tzID0gdGhpcy5ldmVudENhbGxiYWNrcyhldmVudE5hbWUpXHJcbiAgICBsZXQgZXZlbnRDYWxsYmFja05hbWUgPSB0aGlzLmV2ZW50Q2FsbGJhY2tOYW1lKGV2ZW50Q2FsbGJhY2spXHJcbiAgICBsZXQgZXZlbnRDYWxsYmFja0dyb3VwID0gdGhpcy5ldmVudENhbGxiYWNrR3JvdXAoZXZlbnRDYWxsYmFja3MsIGV2ZW50Q2FsbGJhY2tOYW1lKVxyXG4gICAgZXZlbnRDYWxsYmFja0dyb3VwLnB1c2goZXZlbnRDYWxsYmFjaylcclxuICAgIGV2ZW50Q2FsbGJhY2tzW2V2ZW50Q2FsbGJhY2tOYW1lXSA9IGV2ZW50Q2FsbGJhY2tHcm91cFxyXG4gICAgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gPSBldmVudENhbGxiYWNrc1xyXG4gIH1cclxuICBvZmYoKSB7XHJcbiAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICBjYXNlIDE6XHJcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGFyZ3VtZW50c1swXVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZlbnROYW1lXVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgMjpcclxuICAgICAgICB2YXIgZXZlbnROYW1lID0gYXJndW1lbnRzWzBdXHJcbiAgICAgICAgdmFyIGV2ZW50Q2FsbGJhY2sgPSBhcmd1bWVudHNbMV1cclxuICAgICAgICB2YXIgZXZlbnRDYWxsYmFja05hbWUgPSB0aGlzLmV2ZW50Q2FsbGJhY2tOYW1lKGV2ZW50Q2FsbGJhY2spXHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdW2V2ZW50Q2FsbGJhY2tOYW1lXVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG4gIGVtaXQoZXZlbnROYW1lLCBldmVudERhdGEpIHtcclxuICAgIGxldCBldmVudENhbGxiYWNrcyA9IHRoaXMuZXZlbnRDYWxsYmFja3MoZXZlbnROYW1lKVxyXG4gICAgZm9yKGxldCBbZXZlbnRDYWxsYmFja0dyb3VwTmFtZSwgZXZlbnRDYWxsYmFja0dyb3VwXSBvZiBPYmplY3QuZW50cmllcyhldmVudENhbGxiYWNrcykpIHtcclxuICAgICAgZm9yKGxldCBldmVudENhbGxiYWNrIG9mIGV2ZW50Q2FsbGJhY2tHcm91cCkge1xyXG4gICAgICAgIGxldCBhZGRpdGlvbmFsQXJndW1lbnRzID0gT2JqZWN0LnZhbHVlcyhhcmd1bWVudHMpLnNwbGljZSgyKSB8fCBbXVxyXG4gICAgICAgIGV2ZW50Q2FsbGJhY2soZXZlbnREYXRhLCAuLi5hZGRpdGlvbmFsQXJndW1lbnRzKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIk1WQy5UZW1wbGF0ZXMgPSB7XHJcbiAgT2JqZWN0UXVlcnlTdHJpbmdGb3JtYXRJbnZhbGlkUm9vdDogZnVuY3Rpb24gT2JqZWN0UXVlcnlTdHJpbmdGb3JtYXRJbnZhbGlkKGRhdGEpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdPYmplY3QgUXVlcnkgXCJzdHJpbmdcIiBwcm9wZXJ0eSBtdXN0IGJlIGZvcm1hdHRlZCB0byBmaXJzdCBpbmNsdWRlIFwiW0BdXCIuJ1xyXG4gICAgXS5qb2luKCdcXG4nKVxyXG4gIH0sXHJcbiAgRGF0YVNjaGVtYU1pc21hdGNoOiBmdW5jdGlvbiBEYXRhU2NoZW1hTWlzbWF0Y2goZGF0YSkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYERhdGEgYW5kIFNjaGVtYSBwcm9wZXJ0aWVzIGRvIG5vdCBtYXRjaC5gXHJcbiAgICBdLmpvaW4oJ1xcbicpXHJcbiAgfSxcclxuICBEYXRhRnVuY3Rpb25JbnZhbGlkOiBmdW5jdGlvbiBEYXRhRnVuY3Rpb25JbnZhbGlkKGRhdGEpIHtcclxuICAgIFtcclxuICAgICAgYE1vZGVsIERhdGEgcHJvcGVydHkgdHlwZSBcIkZ1bmN0aW9uXCIgaXMgbm90IHZhbGlkLmBcclxuICAgIF0uam9pbignXFxuJylcclxuICB9LFxyXG4gIERhdGFVbmRlZmluZWQ6IGZ1bmN0aW9uIERhdGFVbmRlZmluZWQoZGF0YSkge1xyXG4gICAgW1xyXG4gICAgICBgTW9kZWwgRGF0YSBwcm9wZXJ0eSB1bmRlZmluZWQuYFxyXG4gICAgXS5qb2luKCdcXG4nKVxyXG4gIH0sXHJcbiAgU2NoZW1hVW5kZWZpbmVkOiBmdW5jdGlvbiBTY2hlbWFVbmRlZmluZWQoZGF0YSkge1xyXG4gICAgW1xyXG4gICAgICBgTW9kZWwgXCJTY2hlbWFcIiB1bmRlZmluZWQuYFxyXG4gICAgXS5qb2luKCdcXG4nKVxyXG4gIH0sXHJcbn1cclxuTVZDLlRNUEwgPSBNVkMuVGVtcGxhdGVzXHJcbiIsIk1WQy5VdGlscyA9IHt9XHJcbiIsIk1WQy5VdGlscy5pc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShvYmplY3QpIHsgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqZWN0KSB9XHJcbk1WQy5VdGlscy5pc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KG9iamVjdCkge1xyXG4gIHJldHVybiAoIUFycmF5LmlzQXJyYXkob2JqZWN0KSlcclxuICAgID8gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCdcclxuICAgIDogZmFsc2VcclxufVxyXG5NVkMuVXRpbHMuaXNFcXVhbFR5cGUgPSBmdW5jdGlvbiBpc0VxdWFsVHlwZSh2YWx1ZUEsIHZhbHVlQikgeyByZXR1cm4gdmFsdWVBID09PSB2YWx1ZUIgfVxyXG5NVkMuVXRpbHMuaXNIVE1MRWxlbWVudCA9IGZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQob2JqZWN0KSB7XHJcbiAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XHJcbn1cclxuIiwiTVZDLlV0aWxzLnR5cGVPZiA9ICBmdW5jdGlvbiB0eXBlT2YoZGF0YSkge1xyXG4gIHN3aXRjaCh0eXBlb2YgZGF0YSkge1xyXG4gICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgbGV0IF9vYmplY3RcclxuICAgICAgaWYoTVZDLlV0aWxzLmlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgICAvLyBBcnJheVxyXG4gICAgICAgIHJldHVybiAnYXJyYXknXHJcbiAgICAgIH0gZWxzZSBpZihcclxuICAgICAgICBNVkMuVXRpbHMuaXNPYmplY3QoZGF0YSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgLy8gT2JqZWN0XHJcbiAgICAgICAgcmV0dXJuICdvYmplY3QnXHJcbiAgICAgIH0gZWxzZSBpZihcclxuICAgICAgICBkYXRhID09PSBudWxsXHJcbiAgICAgICkge1xyXG4gICAgICAgIC8vIE51bGxcclxuICAgICAgICByZXR1cm4gJ251bGwnXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIF9vYmplY3RcclxuICAgICAgYnJlYWtcclxuICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICBjYXNlICdudW1iZXInOlxyXG4gICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICBjYXNlICd1bmRlZmluZWQnOlxyXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxyXG4gICAgICByZXR1cm4gdHlwZW9mIGRhdGFcclxuICAgICAgYnJlYWtcclxuICB9XHJcbn1cclxuIiwiTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdCA9IGZ1bmN0aW9uIGFkZFByb3BlcnRpZXNUb09iamVjdCgpIHtcclxuICBsZXQgdGFyZ2V0T2JqZWN0XHJcbiAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGNhc2UgMjpcclxuICAgICAgbGV0IHByb3BlcnRpZXMgPSBhcmd1bWVudHNbMF1cclxuICAgICAgdGFyZ2V0T2JqZWN0ID0gYXJndW1lbnRzWzFdXHJcbiAgICAgIGZvcihsZXQgW3Byb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcGVydGllcykpIHtcclxuICAgICAgICB0YXJnZXRPYmplY3RbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5VmFsdWVcclxuICAgICAgfVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICBsZXQgcHJvcGVydHlOYW1lID0gYXJndW1lbnRzWzBdXHJcbiAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gYXJndW1lbnRzWzFdXHJcbiAgICAgIHRhcmdldE9iamVjdCA9IGFyZ3VtZW50c1syXVxyXG4gICAgICB0YXJnZXRPYmplY3RbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5VmFsdWVcclxuICAgICAgYnJlYWtcclxuICB9XHJcbiAgcmV0dXJuIHRhcmdldE9iamVjdFxyXG59XHJcbiIsIk1WQy5VdGlscy5vYmplY3RRdWVyeSA9IGZ1bmN0aW9uIG9iamVjdFF1ZXJ5KFxyXG4gIHN0cmluZyxcclxuICBjb250ZXh0XHJcbikge1xyXG4gIGxldCBzdHJpbmdEYXRhID0gTVZDLlV0aWxzLm9iamVjdFF1ZXJ5LnBhcnNlTm90YXRpb24oc3RyaW5nKVxyXG4gIGlmKHN0cmluZ0RhdGFbMF0gPT09ICdAJykgc3RyaW5nRGF0YS5zcGxpY2UoMCwgMSlcclxuICBpZighc3RyaW5nRGF0YS5sZW5ndGgpIHJldHVybiBjb250ZXh0XHJcbiAgY29udGV4dCA9IChNVkMuVXRpbHMuaXNPYmplY3QoY29udGV4dCkpXHJcbiAgICA/IE9iamVjdC5lbnRyaWVzKGNvbnRleHQpXHJcbiAgICA6IGNvbnRleHRcclxuICByZXR1cm4gc3RyaW5nRGF0YS5yZWR1Y2UoKG9iamVjdCwgZnJhZ21lbnQsIGZyYWdtZW50SW5kZXgsIGZyYWdtZW50cykgPT4ge1xyXG4gICAgbGV0IHByb3BlcnRpZXMgPSBbXVxyXG4gICAgZnJhZ21lbnQgPSBNVkMuVXRpbHMub2JqZWN0UXVlcnkucGFyc2VGcmFnbWVudChmcmFnbWVudClcclxuICAgIGZvcihsZXQgW3Byb3BlcnR5S2V5LCBwcm9wZXJ0eVZhbHVlXSBvZiBvYmplY3QpIHtcclxuICAgICAgaWYocHJvcGVydHlLZXkubWF0Y2goZnJhZ21lbnQpKSB7XHJcbiAgICAgICAgaWYoZnJhZ21lbnRJbmRleCA9PT0gZnJhZ21lbnRzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmNvbmNhdChbW3Byb3BlcnR5S2V5LCBwcm9wZXJ0eVZhbHVlXV0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmNvbmNhdChPYmplY3QuZW50cmllcyhwcm9wZXJ0eVZhbHVlKSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIG9iamVjdCA9IHByb3BlcnRpZXNcclxuICAgIHJldHVybiBvYmplY3RcclxuICB9LCBjb250ZXh0KVxyXG59XHJcbk1WQy5VdGlscy5vYmplY3RRdWVyeS5wYXJzZU5vdGF0aW9uID0gZnVuY3Rpb24gcGFyc2VOb3RhdGlvbihzdHJpbmcpIHtcclxuICBpZihcclxuICAgIHN0cmluZy5jaGFyQXQoMCkgPT09ICdbJyAmJlxyXG4gICAgc3RyaW5nLmNoYXJBdChzdHJpbmcubGVuZ3RoIC0gMSkgPT0gJ10nXHJcbiAgKSB7XHJcbiAgICBzdHJpbmcgPSBzdHJpbmdcclxuICAgICAgLnNsaWNlKDEsIC0xKVxyXG4gICAgICAuc3BsaXQoJ11bJylcclxuICB9IGVsc2Uge1xyXG4gICAgc3RyaW5nID0gc3RyaW5nXHJcbiAgICAgIC5zcGxpdCgnLicpXHJcbiAgfVxyXG4gIHJldHVybiBzdHJpbmdcclxufVxyXG5NVkMuVXRpbHMub2JqZWN0UXVlcnkucGFyc2VGcmFnbWVudCA9IGZ1bmN0aW9uIHBhcnNlRnJhZ21lbnQoZnJhZ21lbnQpIHtcclxuICBpZihcclxuICAgIGZyYWdtZW50LmNoYXJBdCgwKSA9PT0gJy8nICYmXHJcbiAgICBmcmFnbWVudC5jaGFyQXQoZnJhZ21lbnQubGVuZ3RoIC0gMSkgPT0gJy8nXHJcbiAgKSB7XHJcbiAgICBmcmFnbWVudCA9IGZyYWdtZW50LnNsaWNlKDEsIC0xKVxyXG4gICAgZnJhZ21lbnQgPSBuZXcgUmVnRXhwKCdeJy5jb25jYXQoZnJhZ21lbnQsICckJykpXHJcbiAgfVxyXG4gIHJldHVybiBmcmFnbWVudFxyXG59XHJcbiIsIk1WQy5VdGlscy50b2dnbGVFdmVudHNGb3JUYXJnZXRPYmplY3RzID0gZnVuY3Rpb24gdG9nZ2xlRXZlbnRzRm9yVGFyZ2V0T2JqZWN0cyhcclxuICB0b2dnbGVNZXRob2QsXHJcbiAgZXZlbnRzLFxyXG4gIHRhcmdldE9iamVjdHMsXHJcbiAgY2FsbGJhY2tzXHJcbikge1xyXG4gIGZvcihsZXQgW2V2ZW50U2V0dGluZ3MsIGV2ZW50Q2FsbGJhY2tOYW1lXSBvZiBPYmplY3QuZW50cmllcyhldmVudHMpKSB7XHJcbiAgICBsZXQgZXZlbnREYXRhID0gZXZlbnRTZXR0aW5ncy5zcGxpdCgnICcpXHJcbiAgICBsZXQgZXZlbnRUYXJnZXRTZXR0aW5ncyA9IGV2ZW50RGF0YVswXVxyXG4gICAgbGV0IGV2ZW50TmFtZSA9IGV2ZW50RGF0YVsxXVxyXG4gICAgbGV0IGV2ZW50VGFyZ2V0cyA9IE1WQy5VdGlscy5vYmplY3RRdWVyeShcclxuICAgICAgZXZlbnRUYXJnZXRTZXR0aW5ncyxcclxuICAgICAgdGFyZ2V0T2JqZWN0c1xyXG4gICAgKVxyXG4gICAgZXZlbnRUYXJnZXRzID0gKCFNVkMuVXRpbHMuaXNBcnJheShldmVudFRhcmdldHMpKVxyXG4gICAgICA/IFtbJ0AnLCBldmVudFRhcmdldHNdXVxyXG4gICAgICA6IGV2ZW50VGFyZ2V0c1xyXG4gICAgZm9yKGxldCBbZXZlbnRUYXJnZXROYW1lLCBldmVudFRhcmdldF0gb2YgZXZlbnRUYXJnZXRzKSB7XHJcbiAgICAgIGxldCBldmVudE1ldGhvZE5hbWUgPSAodG9nZ2xlTWV0aG9kID09PSAnb24nKVxyXG4gICAgICA/IChcclxuICAgICAgICBldmVudFRhcmdldCBpbnN0YW5jZW9mIE5vZGVMaXN0IHx8XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fFxyXG4gICAgICAgICAgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBEb2N1bWVudFxyXG4gICAgICAgIClcclxuICAgICAgKSA/ICdhZGRFdmVudExpc3RlbmVyJ1xyXG4gICAgICAgIDogJ29uJ1xyXG4gICAgICA6IChcclxuICAgICAgICBldmVudFRhcmdldCBpbnN0YW5jZW9mIE5vZGVMaXN0IHx8XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fFxyXG4gICAgICAgICAgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBEb2N1bWVudFxyXG4gICAgICAgIClcclxuICAgICAgKSA/ICdyZW1vdmVFdmVudExpc3RlbmVyJ1xyXG4gICAgICAgIDogJ29mZidcclxuICAgICAgbGV0IGV2ZW50Q2FsbGJhY2sgPSBNVkMuVXRpbHMub2JqZWN0UXVlcnkoXHJcbiAgICAgICAgZXZlbnRDYWxsYmFja05hbWUsXHJcbiAgICAgICAgY2FsbGJhY2tzXHJcbiAgICAgIClbMF1bMV1cclxuICAgICAgaWYoZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBOb2RlTGlzdCkge1xyXG4gICAgICAgIGZvcihsZXQgX2V2ZW50VGFyZ2V0IG9mIGV2ZW50VGFyZ2V0KSB7XHJcbiAgICAgICAgICBfZXZlbnRUYXJnZXRbZXZlbnRNZXRob2ROYW1lXShldmVudE5hbWUsIGV2ZW50Q2FsbGJhY2spXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYoZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIGV2ZW50VGFyZ2V0W2V2ZW50TWV0aG9kTmFtZV0oZXZlbnROYW1lLCBldmVudENhbGxiYWNrKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGV2ZW50VGFyZ2V0W2V2ZW50TWV0aG9kTmFtZV0oZXZlbnROYW1lLCBldmVudENhbGxiYWNrKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbk1WQy5VdGlscy5iaW5kRXZlbnRzVG9UYXJnZXRPYmplY3RzID0gZnVuY3Rpb24gYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cygpIHtcclxuICB0aGlzLnRvZ2dsZUV2ZW50c0ZvclRhcmdldE9iamVjdHMoJ29uJywgLi4uYXJndW1lbnRzKVxyXG59XHJcbk1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyA9IGZ1bmN0aW9uIHVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKCkge1xyXG4gIHRoaXMudG9nZ2xlRXZlbnRzRm9yVGFyZ2V0T2JqZWN0cygnb2ZmJywgLi4uYXJndW1lbnRzKVxyXG59XHJcbiIsIk1WQy5VdGlscy52YWxpZGF0ZURhdGFTY2hlbWEgPSBmdW5jdGlvbiB2YWxpZGF0ZURhdGFTY2hlbWEoZGF0YSwgc2NoZW1hKSB7XHJcbiAgaWYoc2NoZW1hKSB7XHJcbiAgICBzd2l0Y2goTVZDLlV0aWxzLnR5cGVPZihkYXRhKSkge1xyXG4gICAgICBjYXNlICdhcnJheSc6XHJcbiAgICAgICAgbGV0IGFycmF5ID0gW11cclxuICAgICAgICBzY2hlbWEgPSAoTVZDLlV0aWxzLnR5cGVPZihzY2hlbWEpID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgICAgPyBzY2hlbWEoKVxyXG4gICAgICAgICAgOiBzY2hlbWFcclxuICAgICAgICBpZihcclxuICAgICAgICAgIE1WQy5VdGlscy5pc0VxdWFsVHlwZShcclxuICAgICAgICAgICAgTVZDLlV0aWxzLnR5cGVPZihzY2hlbWEpLFxyXG4gICAgICAgICAgICBNVkMuVXRpbHMudHlwZU9mKGFycmF5KVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coc2NoZW1hLm5hbWUpXHJcbiAgICAgICAgICBmb3IobGV0IFthcnJheUtleSwgYXJyYXlWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YSkpIHtcclxuICAgICAgICAgICAgYXJyYXkucHVzaChcclxuICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlRGF0YVNjaGVtYShhcnJheVZhbHVlKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnJheVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ29iamVjdCc6XHJcbiAgICAgICAgbGV0IG9iamVjdCA9IHt9XHJcbiAgICAgICAgc2NoZW1hID0gKE1WQy5VdGlscy50eXBlT2Yoc2NoZW1hKSA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgID8gc2NoZW1hKClcclxuICAgICAgICAgIDogc2NoZW1hXHJcbiAgICAgICAgaWYoXHJcbiAgICAgICAgICBNVkMuVXRpbHMuaXNFcXVhbFR5cGUoXHJcbiAgICAgICAgICAgIE1WQy5VdGlscy50eXBlT2Yoc2NoZW1hKSxcclxuICAgICAgICAgICAgTVZDLlV0aWxzLnR5cGVPZihvYmplY3QpXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhzY2hlbWEubmFtZSlcclxuICAgICAgICAgIGZvcihsZXQgW29iamVjdEtleSwgb2JqZWN0VmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XHJcbiAgICAgICAgICAgIG9iamVjdFtvYmplY3RLZXldID0gdGhpcy52YWxpZGF0ZURhdGFTY2hlbWEob2JqZWN0VmFsdWUsIHNjaGVtYVtvYmplY3RLZXldKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqZWN0XHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICAgICAgc2NoZW1hID0gKE1WQy5VdGlscy50eXBlT2Yoc2NoZW1hKSA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgID8gc2NoZW1hKClcclxuICAgICAgICAgIDogc2NoZW1hXHJcbiAgICAgICAgaWYoXHJcbiAgICAgICAgICBNVkMuVXRpbHMuaXNFcXVhbFR5cGUoXHJcbiAgICAgICAgICAgIE1WQy5VdGlscy50eXBlT2Yoc2NoZW1hKSxcclxuICAgICAgICAgICAgTVZDLlV0aWxzLnR5cGVPZihkYXRhKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coc2NoZW1hLm5hbWUpXHJcbiAgICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBNVkMuVE1QTFxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdudWxsJzpcclxuICAgICAgICBpZihcclxuICAgICAgICAgIE1WQy5VdGlscy5pc0VxdWFsVHlwZShcclxuICAgICAgICAgICAgTVZDLlV0aWxzLnR5cGVPZihzY2hlbWEpLFxyXG4gICAgICAgICAgICBNVkMuVXRpbHMudHlwZU9mKGRhdGEpXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICd1bmRlZmluZWQnOlxyXG4gICAgICAgIHRocm93IE1WQy5UTVBMXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxyXG4gICAgICAgIHRocm93IE1WQy5UTVBMXHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgTVZDLlRNUExcclxuICB9XHJcbn1cclxuIiwiTVZDLkNoYW5uZWxzID0gY2xhc3Mge1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuICBnZXQgX2NoYW5uZWxzKCkge1xyXG4gICAgdGhpcy5jaGFubmVscyA9ICh0aGlzLmNoYW5uZWxzKVxyXG4gICAgICA/IHRoaXMuY2hhbm5lbHNcclxuICAgICAgOiB7fVxyXG4gICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNcclxuICB9XHJcbiAgY2hhbm5lbChjaGFubmVsTmFtZSkge1xyXG4gICAgdGhpcy5fY2hhbm5lbHNbY2hhbm5lbE5hbWVdID0gKHRoaXMuX2NoYW5uZWxzW2NoYW5uZWxOYW1lXSlcclxuICAgICAgPyB0aGlzLl9jaGFubmVsc1tjaGFubmVsTmFtZV1cclxuICAgICAgOiBuZXcgTVZDLkNoYW5uZWxzLkNoYW5uZWwoKVxyXG4gICAgcmV0dXJuIHRoaXMuX2NoYW5uZWxzW2NoYW5uZWxOYW1lXVxyXG4gIH1cclxuICBvZmYoY2hhbm5lbE5hbWUpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jaGFubmVsc1tjaGFubmVsTmFtZV1cclxuICB9XHJcbn1cclxuIiwiTVZDLkNoYW5uZWxzLkNoYW5uZWwgPSBjbGFzcyB7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG4gIGdldCBfcmVzcG9uc2VzKCkge1xyXG4gICAgdGhpcy5yZXNwb25zZXMgPSAodGhpcy5yZXNwb25zZXMpXHJcbiAgICAgID8gdGhpcy5yZXNwb25zZXNcclxuICAgICAgOiB7fVxyXG4gICAgcmV0dXJuIHRoaXMucmVzcG9uc2VzXHJcbiAgfVxyXG4gIHJlc3BvbnNlKHJlc3BvbnNlTmFtZSwgcmVzcG9uc2VDYWxsYmFjaykge1xyXG4gICAgaWYocmVzcG9uc2VDYWxsYmFjaykge1xyXG4gICAgICB0aGlzLl9yZXNwb25zZXNbcmVzcG9uc2VOYW1lXSA9IHJlc3BvbnNlQ2FsbGJhY2tcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yZXNwb25zZXNbcmVzcG9uc2VdXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJlcXVlc3QocmVzcG9uc2VOYW1lLCByZXF1ZXN0RGF0YSkge1xyXG4gICAgaWYodGhpcy5fcmVzcG9uc2VzW3Jlc3BvbnNlTmFtZV0pIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlc1tyZXNwb25zZU5hbWVdKHJlcXVlc3REYXRhKVxyXG4gICAgfVxyXG4gIH1cclxuICBvZmYocmVzcG9uc2VOYW1lKSB7XHJcbiAgICBpZihyZXNwb25zZU5hbWUpIHtcclxuICAgICAgZGVsZXRlIHRoaXMuX3Jlc3BvbnNlc1tyZXNwb25zZU5hbWVdXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmb3IobGV0IFtyZXNwb25zZU5hbWVdIG9mIE9iamVjdC5rZXlzKHRoaXMuX3Jlc3BvbnNlcykpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5fcmVzcG9uc2VzW3Jlc3BvbnNlTmFtZV1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJNVkMuQmFzZSA9IGNsYXNzIGV4dGVuZHMgTVZDLkV2ZW50cyB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGNvbmZpZ3VyYXRpb24pIHtcclxuICAgIHN1cGVyKClcclxuICAgIGlmKGNvbmZpZ3VyYXRpb24pIHRoaXMuX2NvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uXHJcbiAgICBpZihzZXR0aW5ncykgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5nc1xyXG4gIH1cclxuICBnZXQgX2NvbmZpZ3VyYXRpb24oKSB7XHJcbiAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSAodGhpcy5jb25maWd1cmF0aW9uKVxyXG4gICAgICA/IHRoaXMuY29uZmlndXJhdGlvblxyXG4gICAgICA6IHt9XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uXHJcbiAgfVxyXG4gIHNldCBfY29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKSB7IHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb24gfVxyXG4gIGdldCBfc2V0dGluZ3MoKSB7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gKHRoaXMuc2V0dGluZ3MpXHJcbiAgICAgID8gdGhpcy5zZXR0aW5nc1xyXG4gICAgICA6IHt9XHJcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1xyXG4gIH1cclxuICBzZXQgX3NldHRpbmdzKHNldHRpbmdzKSB7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcclxuICAgICAgc2V0dGluZ3MsIHRoaXMuX3NldHRpbmdzXHJcbiAgICApXHJcbiAgfVxyXG4gIGdldCBfZW1pdHRlcnMoKSB7XHJcbiAgICB0aGlzLmVtaXR0ZXJzID0gKHRoaXMuZW1pdHRlcnMpXHJcbiAgICAgID8gdGhpcy5lbWl0dGVyc1xyXG4gICAgICA6IHt9XHJcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyc1xyXG4gIH1cclxuICBzZXQgX2VtaXR0ZXJzKGVtaXR0ZXJzKSB7XHJcbiAgICB0aGlzLmVtaXR0ZXJzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcclxuICAgICAgZW1pdHRlcnMsIHRoaXMuX2VtaXR0ZXJzXHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsIk1WQy5TZXJ2aWNlID0gY2xhc3MgZXh0ZW5kcyBNVkMuQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgfVxuICBnZXQgX2RlZmF1bHRzKCkgeyByZXR1cm4gdGhpcy5kZWZhdWx0cyB8fCB7XG4gICAgY29udGVudFR5cGU6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSxcbiAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgfSB9XG4gIGdldCBfcmVzcG9uc2VUeXBlcygpIHsgcmV0dXJuIFsnJywgJ2FycmF5YnVmZmVyJywgJ2Jsb2InLCAnZG9jdW1lbnQnLCAnanNvbicsICd0ZXh0J10gfVxuICBnZXQgX3Jlc3BvbnNlVHlwZSgpIHsgcmV0dXJuIHRoaXMucmVzcG9uc2VUeXBlIH1cbiAgc2V0IF9yZXNwb25zZVR5cGUocmVzcG9uc2VUeXBlKSB7XG4gICAgdGhpcy5feGhyLnJlc3BvbnNlVHlwZSA9IHRoaXMuX3Jlc3BvbnNlVHlwZXMuZmluZChcbiAgICAgIChyZXNwb25zZVR5cGVJdGVtKSA9PiByZXNwb25zZVR5cGVJdGVtID09PSByZXNwb25zZVR5cGVcbiAgICApIHx8IHRoaXMuX2RlZmF1bHRzLnJlc3BvbnNlVHlwZVxuICB9XG4gIGdldCBfdHlwZSgpIHsgcmV0dXJuIHRoaXMudHlwZSB9XG4gIHNldCBfdHlwZSh0eXBlKSB7IHRoaXMudHlwZSA9IHR5cGUgfVxuICBnZXQgX3VybCgpIHsgcmV0dXJuIHRoaXMudXJsIH1cbiAgc2V0IF91cmwodXJsKSB7IHRoaXMudXJsID0gdXJsIH1cbiAgZ2V0IF9oZWFkZXJzKCkgeyByZXR1cm4gdGhpcy5oZWFkZXJzIHx8IFtdIH1cbiAgc2V0IF9oZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLl9oZWFkZXJzLmxlbmd0aCA9IDBcbiAgICBoZWFkZXJzLmZvckVhY2goKGhlYWRlcikgPT4ge1xuICAgICAgdGhpcy5faGVhZGVycy5wdXNoKGhlYWRlcilcbiAgICAgIGhlYWRlciA9IE9iamVjdC5lbnRyaWVzKGhlYWRlcilbMF1cbiAgICAgIHRoaXMuX3hoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgIH0pXG4gIH1cbiAgZ2V0IF9kYXRhKCkgeyByZXR1cm4gdGhpcy5kYXRhIH1cbiAgc2V0IF9kYXRhKGRhdGEpIHsgdGhpcy5kYXRhID0gZGF0YSB9XG4gIGdldCBfeGhyKCkge1xuICAgIHRoaXMueGhyID0gKHRoaXMueGhyKVxuICAgICAgPyB0aGlzLnhoclxuICAgICAgOiBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuICAgIHJldHVybiB0aGlzLnhoclxuICB9XG4gIGdldCBfZW5hYmxlZCgpIHsgcmV0dXJuIHRoaXMuZW5hYmxlZCB8fCBmYWxzZSB9XG4gIHNldCBfZW5hYmxlZChlbmFibGVkKSB7IHRoaXMuZW5hYmxlZCA9IGVuYWJsZWQgfVxuICByZXF1ZXN0KGRhdGEpIHtcbiAgICBkYXRhID0gZGF0YSB8fCB0aGlzLmRhdGEgfHwgbnVsbFxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZih0aGlzLl94aHIuc3RhdHVzID09PSAyMDApIHRoaXMuX3hoci5hYm9ydCgpXG4gICAgICB0aGlzLl94aHIub3Blbih0aGlzLnR5cGUsIHRoaXMudXJsKVxuICAgICAgdGhpcy5faGVhZGVycyA9IHRoaXMuc2V0dGluZ3MuaGVhZGVycyB8fCBbdGhpcy5fZGVmYXVsdHMuY29udGVudFR5cGVdXG4gICAgICB0aGlzLl94aHIub25sb2FkID0gcmVzb2x2ZVxuICAgICAgdGhpcy5feGhyLm9uZXJyb3IgPSByZWplY3RcbiAgICAgIHRoaXMuX3hoci5zZW5kKGRhdGEpXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIHRoaXMuZW1pdCgneGhyOnJlc29sdmUnLCB7XG4gICAgICAgIG5hbWU6ICd4aHI6cmVzb2x2ZScsXG4gICAgICAgIGRhdGE6IHJlc3BvbnNlLmN1cnJlbnRUYXJnZXQsXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgfSlcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgIXRoaXMuZW5hYmxlZCAmJlxuICAgICAgT2JqZWN0LmtleXMoc2V0dGluZ3MpLmxlbmd0aFxuICAgICkge1xuICAgICAgaWYoc2V0dGluZ3MudHlwZSkgdGhpcy5fdHlwZSA9IHNldHRpbmdzLnR5cGVcbiAgICAgIGlmKHNldHRpbmdzLnVybCkgdGhpcy5fdXJsID0gc2V0dGluZ3MudXJsXG4gICAgICBpZihzZXR0aW5ncy5kYXRhKSB0aGlzLl9kYXRhID0gc2V0dGluZ3MuZGF0YSB8fCBudWxsXG4gICAgICBpZih0aGlzLnNldHRpbmdzLnJlc3BvbnNlVHlwZSkgdGhpcy5fcmVzcG9uc2VUeXBlID0gdGhpcy5fc2V0dGluZ3MucmVzcG9uc2VUeXBlXG4gICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgdGhpcy5lbmFibGVkICYmXG4gICAgICBPYmplY3Qua2V5cyhzZXR0aW5ncykubGVuZ3RoXG4gICAgKSB7XG4gICAgICBkZWxldGUgdGhpcy5fdHlwZVxuICAgICAgZGVsZXRlIHRoaXMuX3VybFxuICAgICAgZGVsZXRlIHRoaXMuX2RhdGFcbiAgICAgIGRlbGV0ZSB0aGlzLl9oZWFkZXJzXG4gICAgICBkZWxldGUgdGhpcy5fcmVzcG9uc2VUeXBlXG4gICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuIiwiTVZDLk1vZGVsID0gY2xhc3MgZXh0ZW5kcyBNVkMuQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgfVxuICBnZXQgX2xvY2FsU3RvcmFnZSgpIHsgcmV0dXJuIHRoaXMubG9jYWxTdG9yYWdlIH1cbiAgc2V0IF9sb2NhbFN0b3JhZ2UobG9jYWxTdG9yYWdlKSB7IHRoaXMubG9jYWxTdG9yYWdlID0gbG9jYWxTdG9yYWdlIH1cbiAgZ2V0IF9kZWZhdWx0cygpIHsgcmV0dXJuIHRoaXMuZGVmYXVsdHMgfVxuICBzZXQgX2RlZmF1bHRzKGRlZmF1bHRzKSB7IHRoaXMuZGVmYXVsdHMgPSBkZWZhdWx0cyB9XG4gIGdldCBfc2NoZW1hKCkgeyByZXR1cm4gdGhpcy5fc2NoZW1hIH1cbiAgc2V0IF9zY2hlbWEoc2NoZW1hKSB7IHRoaXMuc2NoZW1hID0gc2NoZW1hIH1cbiAgZ2V0IF9oaXN0aW9ncmFtKCkgeyByZXR1cm4gdGhpcy5oaXN0aW9ncmFtIHx8IHtcbiAgICBsZW5ndGg6IDFcbiAgfSB9XG4gIHNldCBfaGlzdGlvZ3JhbShoaXN0aW9ncmFtKSB7XG4gICAgdGhpcy5oaXN0aW9ncmFtID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHRoaXMuX2hpc3Rpb2dyYW0sXG4gICAgICBoaXN0aW9ncmFtXG4gICAgKVxuICB9XG4gIGdldCBfaGlzdG9yeSgpIHtcbiAgICB0aGlzLmhpc3RvcnkgPSAodGhpcy5oaXN0b3J5KVxuICAgICAgPyB0aGlzLmhpc3RvcnlcbiAgICAgIDogW11cbiAgICByZXR1cm4gdGhpcy5oaXN0b3J5XG4gIH1cbiAgc2V0IF9oaXN0b3J5KGRhdGEpIHtcbiAgICBpZihcbiAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aFxuICAgICkge1xuICAgICAgaWYodGhpcy5faGlzdGlvZ3JhbS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5faGlzdG9yeS51bnNoaWZ0KHRoaXMucGFyc2UoZGF0YSkpXG4gICAgICAgIHRoaXMuX2hpc3Rvcnkuc3BsaWNlKHRoaXMuX2hpc3Rpb2dyYW0ubGVuZ3RoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZXQgX2RiKCkge1xuICAgIGxldCBkYiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMubG9jYWxTdG9yYWdlLmVuZHBvaW50KVxuICAgIHRoaXMuZGIgPSAoZGIpXG4gICAgICA/IGRiXG4gICAgICA6ICd7fSdcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLmRiKVxuICB9XG4gIHNldCBfZGIoZGIpIHtcbiAgICBkYiA9IEpTT04uc3RyaW5naWZ5KGRiKVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMubG9jYWxTdG9yYWdlLmVuZHBvaW50LCBkYilcbiAgfVxuICBnZXQgX2RhdGEoKSB7XG4gICAgdGhpcy5kYXRhID0gICh0aGlzLmRhdGEpXG4gICAgICA/IHRoaXMuZGF0YVxuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLmRhdGFcbiAgfVxuICBnZXQgX2RhdGFFdmVudHMoKSB7XG4gICAgdGhpcy5kYXRhRXZlbnRzID0gKHRoaXMuZGF0YUV2ZW50cylcbiAgICAgID8gdGhpcy5kYXRhRXZlbnRzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuZGF0YUV2ZW50c1xuICB9XG4gIHNldCBfZGF0YUV2ZW50cyhkYXRhRXZlbnRzKSB7XG4gICAgdGhpcy5kYXRhRXZlbnRzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIGRhdGFFdmVudHMsIHRoaXMuX2RhdGFFdmVudHNcbiAgICApXG4gIH1cbiAgZ2V0IF9kYXRhQ2FsbGJhY2tzKCkge1xuICAgIHRoaXMuZGF0YUNhbGxiYWNrcyA9ICh0aGlzLmRhdGFDYWxsYmFja3MpXG4gICAgICA/IHRoaXMuZGF0YUNhbGxiYWNrc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLmRhdGFDYWxsYmFja3NcbiAgfVxuICBzZXQgX2RhdGFDYWxsYmFja3MoZGF0YUNhbGxiYWNrcykge1xuICAgIHRoaXMuZGF0YUNhbGxiYWNrcyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBkYXRhQ2FsbGJhY2tzLCB0aGlzLl9kYXRhQ2FsbGJhY2tzXG4gICAgKVxuICB9XG4gIGdldCBfc2VydmljZXMoKSB7XG4gICAgdGhpcy5zZXJ2aWNlcyA9ICAodGhpcy5zZXJ2aWNlcylcbiAgICAgID8gdGhpcy5zZXJ2aWNlc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLnNlcnZpY2VzXG4gIH1cbiAgc2V0IF9zZXJ2aWNlcyhzZXJ2aWNlcykge1xuICAgIHRoaXMuc2VydmljZXMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgc2VydmljZXMsIHRoaXMuX3NlcnZpY2VzXG4gICAgKVxuICB9XG4gIGdldCBfc2VydmljZUV2ZW50cygpIHtcbiAgICB0aGlzLnNlcnZpY2VFdmVudHMgPSAodGhpcy5zZXJ2aWNlRXZlbnRzKVxuICAgICAgPyB0aGlzLnNlcnZpY2VFdmVudHNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlRXZlbnRzXG4gIH1cbiAgc2V0IF9zZXJ2aWNlRXZlbnRzKHNlcnZpY2VFdmVudHMpIHtcbiAgICB0aGlzLnNlcnZpY2VFdmVudHMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgc2VydmljZUV2ZW50cywgdGhpcy5fc2VydmljZUV2ZW50c1xuICAgIClcbiAgfVxuICBnZXQgX3NlcnZpY2VDYWxsYmFja3MoKSB7XG4gICAgdGhpcy5zZXJ2aWNlQ2FsbGJhY2tzID0gKHRoaXMuc2VydmljZUNhbGxiYWNrcylcbiAgICAgID8gdGhpcy5zZXJ2aWNlQ2FsbGJhY2tzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuc2VydmljZUNhbGxiYWNrc1xuICB9XG4gIHNldCBfc2VydmljZUNhbGxiYWNrcyhzZXJ2aWNlQ2FsbGJhY2tzKSB7XG4gICAgdGhpcy5zZXJ2aWNlQ2FsbGJhY2tzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHNlcnZpY2VDYWxsYmFja3MsIHRoaXMuX3NlcnZpY2VDYWxsYmFja3NcbiAgICApXG4gIH1cbiAgZ2V0IF9lbmFibGVkKCkgeyByZXR1cm4gdGhpcy5lbmFibGVkIHx8IGZhbHNlIH1cbiAgc2V0IF9lbmFibGVkKGVuYWJsZWQpIHsgdGhpcy5lbmFibGVkID0gZW5hYmxlZCB9XG4gIGVuYWJsZVNlcnZpY2VFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLmJpbmRFdmVudHNUb1RhcmdldE9iamVjdHModGhpcy5zZXJ2aWNlRXZlbnRzLCB0aGlzLnNlcnZpY2VzLCB0aGlzLnNlcnZpY2VDYWxsYmFja3MpXG4gIH1cbiAgZGlzYWJsZVNlcnZpY2VFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLnVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKHRoaXMuc2VydmljZUV2ZW50cywgdGhpcy5zZXJ2aWNlcywgdGhpcy5zZXJ2aWNlQ2FsbGJhY2tzKVxuICB9XG4gIGVuYWJsZURhdGFFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLmJpbmRFdmVudHNUb1RhcmdldE9iamVjdHModGhpcy5kYXRhRXZlbnRzLCB0aGlzLCB0aGlzLmRhdGFDYWxsYmFja3MpXG4gIH1cbiAgZGlzYWJsZURhdGFFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLnVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKHRoaXMuZGF0YUV2ZW50cywgdGhpcywgdGhpcy5kYXRhQ2FsbGJhY2tzKVxuICB9XG4gIHNldERlZmF1bHRzKCkge1xuICAgIGxldCBfZGVmYXVsdHMgPSB7fVxuICAgIGlmKHRoaXMuZGVmYXVsdHMpIE9iamVjdC5hc3NpZ24oX2RlZmF1bHRzLCB0aGlzLmRlZmF1bHRzKVxuICAgIGlmKHRoaXMubG9jYWxTdG9yYWdlKSBPYmplY3QuYXNzaWduKF9kZWZhdWx0cywgdGhpcy5fZGIpXG4gICAgaWYoT2JqZWN0LmtleXMoX2RlZmF1bHRzKSkgdGhpcy5zZXQoX2RlZmF1bHRzKVxuICB9XG4gIGdldCgpIHtcbiAgICBsZXQgcHJvcGVydHkgPSBhcmd1bWVudHNbMF1cbiAgICByZXR1cm4gdGhpcy5fZGF0YVsnXycuY29uY2F0KHByb3BlcnR5KV1cbiAgfVxuICBzZXQoKSB7XG4gICAgdGhpcy5faGlzdG9yeSA9IHRoaXMucGFyc2UoKVxuICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGFyZ3VtZW50c1swXSlcbiAgICAgICAgICAuZm9yRWFjaCgoW2tleSwgdmFsdWVdLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXREYXRhUHJvcGVydHkoa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgIGlmKHRoaXMubG9jYWxTdG9yYWdlKSB0aGlzLnNldERCKGtleSwgdmFsdWUpXG4gICAgICAgICAgfSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgdmFyIGtleSA9IGFyZ3VtZW50c1swXVxuICAgICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMV1cbiAgICAgICAgdGhpcy5zZXREYXRhUHJvcGVydHkoa2V5LCB2YWx1ZSlcbiAgICAgICAgaWYodGhpcy5sb2NhbFN0b3JhZ2UpIHRoaXMuc2V0REIoa2V5LCB2YWx1ZSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgdW5zZXQoKSB7XG4gICAgdGhpcy5faGlzdG9yeSA9IHRoaXMucGFyc2UoKVxuICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGZvcihsZXQga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuX2RhdGEpKSB7XG4gICAgICAgICAgdGhpcy51bnNldERhdGFQcm9wZXJ0eShrZXkpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbGV0IGtleSA9IGFyZ3VtZW50c1swXVxuICAgICAgICB0aGlzLnVuc2V0RGF0YVByb3BlcnR5KGtleSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgc2V0REIoKSB7XG4gICAgbGV0IGRiID0gdGhpcy5fZGJcbiAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgX2FyZ3VtZW50cyA9IE9iamVjdC5lbnRyaWVzKGFyZ3VtZW50c1swXSlcbiAgICAgICAgX2FyZ3VtZW50cy5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICBkYltrZXldID0gdmFsdWVcbiAgICAgICAgfSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgbGV0IGtleSA9IGFyZ3VtZW50c1swXVxuICAgICAgICBsZXQgdmFsdWUgPSBhcmd1bWVudHNbMV1cbiAgICAgICAgZGJba2V5XSA9IHZhbHVlXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHRoaXMuX2RiID0gZGJcbiAgfVxuICB1bnNldERCKCkge1xuICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9kYlxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAxOlxuICAgICAgICBsZXQgZGIgPSB0aGlzLl9kYlxuICAgICAgICBsZXQga2V5ID0gYXJndW1lbnRzWzBdXG4gICAgICAgIGRlbGV0ZSBkYltrZXldXG4gICAgICAgIHRoaXMuX2RiID0gZGJcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgc2V0RGF0YVByb3BlcnR5KGtleSwgdmFsdWUpIHtcbiAgICBpZighdGhpcy5fZGF0YVsnXycuY29uY2F0KGtleSldKSB7XG4gICAgICBsZXQgY29udGV4dCA9IHRoaXNcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgICAgICB0aGlzLl9kYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgWydfJy5jb25jYXQoa2V5KV06IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldCgpIHsgcmV0dXJuIHRoaXNba2V5XSB9LFxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlXG4gICAgICAgICAgICAgIGxldCBzZXRWYWx1ZUV2ZW50TmFtZSA9IFsnc2V0JywgJzonLCBrZXldLmpvaW4oJycpXG4gICAgICAgICAgICAgIGxldCBzZXRFdmVudE5hbWUgPSAnc2V0J1xuICAgICAgICAgICAgICBjb250ZXh0LmVtaXQoXG4gICAgICAgICAgICAgICAgc2V0VmFsdWVFdmVudE5hbWUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogc2V0VmFsdWVFdmVudE5hbWUsXG4gICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGNvbnRleHQuZW1pdChcbiAgICAgICAgICAgICAgICBzZXRFdmVudE5hbWUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogc2V0RXZlbnROYW1lLFxuICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cbiAgICB0aGlzLl9kYXRhWydfJy5jb25jYXQoa2V5KV0gPSB2YWx1ZVxuICB9XG4gIHVuc2V0RGF0YVByb3BlcnR5KGtleSkge1xuICAgIGxldCB1bnNldFZhbHVlRXZlbnROYW1lID0gWyd1bnNldCcsICc6Jywga2V5XS5qb2luKCcnKVxuICAgIGxldCB1bnNldEV2ZW50TmFtZSA9ICd1bnNldCdcbiAgICBsZXQgdW5zZXRWYWx1ZSA9IHRoaXMuX2RhdGFba2V5XVxuICAgIGRlbGV0ZSB0aGlzLl9kYXRhWydfJy5jb25jYXQoa2V5KV1cbiAgICBkZWxldGUgdGhpcy5fZGF0YVtrZXldXG4gICAgdGhpcy5lbWl0KFxuICAgICAgdW5zZXRWYWx1ZUV2ZW50TmFtZSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogdW5zZXRWYWx1ZUV2ZW50TmFtZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB1bnNldFZhbHVlLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICAgIHRoaXMuZW1pdChcbiAgICAgIHVuc2V0RXZlbnROYW1lLFxuICAgICAge1xuICAgICAgICBuYW1lOiB1bnNldEV2ZW50TmFtZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB1bnNldFZhbHVlLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICB9XG4gIHBhcnNlKGRhdGEpIHtcbiAgICBkYXRhID0gZGF0YSB8fCB0aGlzLl9kYXRhXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmFzc2lnbih7fSwgZGF0YSkpKVxuICB9XG4gIGVuYWJsZSgpIHtcbiAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICBzZXR0aW5ncyAmJlxuICAgICAgIXRoaXMuZW5hYmxlZFxuICAgICkge1xuICAgICAgaWYodGhpcy5zZXR0aW5ncy5sb2NhbFN0b3JhZ2UpIHRoaXMuX2xvY2FsU3RvcmFnZSA9IHRoaXMuc2V0dGluZ3MubG9jYWxTdG9yYWdlXG4gICAgICBpZih0aGlzLnNldHRpbmdzLmhpc3Rpb2dyYW0pIHRoaXMuX2hpc3Rpb2dyYW0gPSB0aGlzLnNldHRpbmdzLmhpc3Rpb2dyYW1cbiAgICAgIGlmKHRoaXMuc2V0dGluZ3MuZW1pdHRlcnMpIHRoaXMuX2VtaXR0ZXJzID0gdGhpcy5zZXR0aW5ncy5lbWl0dGVyc1xuICAgICAgaWYodGhpcy5zZXR0aW5ncy5zZXJ2aWNlcykgdGhpcy5fc2VydmljZXMgPSB0aGlzLnNldHRpbmdzLnNlcnZpY2VzXG4gICAgICBpZih0aGlzLnNldHRpbmdzLnNlcnZpY2VDYWxsYmFja3MpIHRoaXMuX3NlcnZpY2VDYWxsYmFja3MgPSB0aGlzLnNldHRpbmdzLnNlcnZpY2VDYWxsYmFja3NcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3Muc2VydmljZUV2ZW50cykgdGhpcy5fc2VydmljZUV2ZW50cyA9IHRoaXMuc2V0dGluZ3Muc2VydmljZUV2ZW50c1xuICAgICAgaWYodGhpcy5zZXR0aW5ncy5kYXRhKSB0aGlzLnNldCh0aGlzLnNldHRpbmdzLmRhdGEpXG4gICAgICBpZih0aGlzLnNldHRpbmdzLmRhdGFDYWxsYmFja3MpIHRoaXMuX2RhdGFDYWxsYmFja3MgPSB0aGlzLnNldHRpbmdzLmRhdGFDYWxsYmFja3NcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3MuZGF0YUV2ZW50cykgdGhpcy5fZGF0YUV2ZW50cyA9IHRoaXMuc2V0dGluZ3MuZGF0YUV2ZW50c1xuICAgICAgaWYodGhpcy5zZXR0aW5ncy5zY2hlbWEpIHRoaXMuX3NjaGVtYSA9IHRoaXMuc2V0dGluZ3Muc2NoZW1hXG4gICAgICBpZih0aGlzLnNldHRpbmdzLmRlZmF1bHRzKSB0aGlzLl9kZWZhdWx0cyA9IHRoaXMuc2V0dGluZ3MuZGVmYXVsdHNcbiAgICAgIGlmKFxuICAgICAgICB0aGlzLnNlcnZpY2VzICYmXG4gICAgICAgIHRoaXMuc2VydmljZUV2ZW50cyAmJlxuICAgICAgICB0aGlzLnNlcnZpY2VDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVuYWJsZVNlcnZpY2VFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMuZGF0YUV2ZW50cyAmJlxuICAgICAgICB0aGlzLmRhdGFDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVuYWJsZURhdGFFdmVudHMoKVxuICAgICAgfVxuICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWVcbiAgICB9XG4gIH1cbiAgZGlzYWJsZSgpIHtcbiAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICBzZXR0aW5ncyAmJlxuICAgICAgIXRoaXMuZW5hYmxlZFxuICAgICkge1xuICAgICAgaWYoXG4gICAgICAgIHRoaXMuc2VydmljZXMgJiZcbiAgICAgICAgdGhpcy5zZXJ2aWNlRXZlbnRzICYmXG4gICAgICAgIHRoaXMuc2VydmljZUNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZVNlcnZpY2VFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMuZGF0YUV2ZW50cyAmJlxuICAgICAgICB0aGlzLmRhdGFDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmRpc2FibGVEYXRhRXZlbnRzKClcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLl9sb2NhbFN0b3JhZ2VcbiAgICAgIGRlbGV0ZSB0aGlzLl9oaXN0aW9ncmFtXG4gICAgICBkZWxldGUgdGhpcy5fc2VydmljZXNcbiAgICAgIGRlbGV0ZSB0aGlzLl9zZXJ2aWNlQ2FsbGJhY2tzXG4gICAgICBkZWxldGUgdGhpcy5fc2VydmljZUV2ZW50c1xuICAgICAgZGVsZXRlIHRoaXMuX2RhdGFcbiAgICAgIGRlbGV0ZSB0aGlzLl9kYXRhQ2FsbGJhY2tzXG4gICAgICBkZWxldGUgdGhpcy5fZGF0YUV2ZW50c1xuICAgICAgZGVsZXRlIHRoaXMuX3NjaGVtYVxuICAgICAgZGVsZXRlIHRoaXMuX2VtaXR0ZXJzXG4gICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2VcbiAgICB9XG4gIH1cbn1cbiIsIk1WQy5FbWl0dGVyID0gY2xhc3MgZXh0ZW5kcyBNVkMuTW9kZWwge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxyXG4gICAgaWYodGhpcy5zZXR0aW5ncykge1xyXG4gICAgICBpZih0aGlzLnNldHRpbmdzLm5hbWUpIHRoaXMuX25hbWUgPSB0aGlzLnNldHRpbmdzLm5hbWVcclxuICAgIH1cclxuICB9XHJcbiAgZ2V0IF9uYW1lKCkgeyByZXR1cm4gdGhpcy5uYW1lIH1cclxuICBzZXQgX25hbWUobmFtZSkgeyB0aGlzLm5hbWUgPSBuYW1lIH1cclxuICBlbWlzc2lvbigpIHtcclxuICAgIGxldCBldmVudERhdGEgPSB7XHJcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgZGF0YTogdGhpcy5kYXRhXHJcbiAgICB9XHJcbiAgICB0aGlzLmVtaXQoXHJcbiAgICAgIHRoaXMubmFtZSxcclxuICAgICAgZXZlbnREYXRhXHJcbiAgICApXHJcbiAgICByZXR1cm4gZXZlbnREYXRhXHJcbiAgfVxyXG59XHJcbiIsIk1WQy5FbWl0dGVycyA9IHt9XHJcbiIsIk1WQy5FbWl0dGVycy5OYXZpZ2F0ZUVtaXR0ZXIgPSBjbGFzcyBleHRlbmRzIE1WQy5FbWl0dGVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcclxuICAgIHRoaXMuYWRkU2V0dGluZ3MoKVxyXG4gICAgdGhpcy5lbmFibGUoKVxyXG4gIH1cclxuICBhZGRTZXR0aW5ncygpIHtcclxuICAgIHRoaXMuX25hbWUgPSAnbmF2aWdhdGUnXHJcbiAgICB0aGlzLl9zY2hlbWEgPSB7XHJcbiAgICAgIG9sZFVSTDogU3RyaW5nLFxyXG4gICAgICBuZXdVUkw6IFN0cmluZyxcclxuICAgICAgY3VycmVudFJvdXRlOiBTdHJpbmcsXHJcbiAgICAgIGN1cnJlbnRDb250cm9sbGVyOiBTdHJpbmcsXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIk1WQy5WaWV3ID0gY2xhc3MgZXh0ZW5kcyBNVkMuQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgfVxuICBnZXQgX2VsZW1lbnROYW1lKCkgeyByZXR1cm4gdGhpcy5fZWxlbWVudC50YWdOYW1lIH1cbiAgc2V0IF9lbGVtZW50TmFtZShlbGVtZW50TmFtZSkge1xuICAgIGlmKCF0aGlzLl9lbGVtZW50KSB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50TmFtZSlcbiAgfVxuICBnZXQgX2VsZW1lbnQoKSB7IHJldHVybiB0aGlzLmVsZW1lbnQgfVxuICBzZXQgX2VsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmKFxuICAgICAgZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8XG4gICAgICBlbGVtZW50IGluc3RhbmNlb2YgRG9jdW1lbnRcbiAgICApIHtcbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB9IGVsc2UgaWYodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpXG4gICAgfVxuICAgIHRoaXMuZWxlbWVudE9ic2VydmVyLm9ic2VydmUodGhpcy5lbGVtZW50LCB7XG4gICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIH0pXG4gIH1cbiAgZ2V0IF9hdHRyaWJ1dGVzKCkgeyByZXR1cm4gdGhpcy5fZWxlbWVudC5hdHRyaWJ1dGVzIH1cbiAgc2V0IF9hdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IobGV0IFthdHRyaWJ1dGVLZXksIGF0dHJpYnV0ZVZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSkge1xuICAgICAgaWYodHlwZW9mIGF0dHJpYnV0ZVZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVLZXkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVLZXksIGF0dHJpYnV0ZVZhbHVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZXQgX3VpKCkge1xuICAgIHRoaXMudWkgPSAodGhpcy51aSlcbiAgICAgID8gdGhpcy51aVxuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLnVpXG4gIH1cbiAgc2V0IF91aSh1aSkge1xuICAgIGlmKCF0aGlzLl91aVsnJGVsZW1lbnQnXSkgdGhpcy5fdWlbJyRlbGVtZW50J10gPSB0aGlzLmVsZW1lbnRcbiAgICBmb3IobGV0IFt1aUtleSwgdWlWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModWkpKSB7XG4gICAgICBpZih0eXBlb2YgdWlWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fdWlbdWlLZXldID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHVpVmFsdWUpXG4gICAgICB9IGVsc2UgaWYoXG4gICAgICAgIHVpVmFsdWUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fFxuICAgICAgICB1aVZhbHVlIGluc3RhbmNlb2YgRG9jdW1lbnRcbiAgICAgICkge1xuICAgICAgICB0aGlzLl91aVt1aUtleV0gPSB1aVZhbHVlXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldCBfdWlFdmVudHMoKSB7IHJldHVybiB0aGlzLnVpRXZlbnRzIH1cbiAgc2V0IF91aUV2ZW50cyh1aUV2ZW50cykgeyB0aGlzLnVpRXZlbnRzID0gdWlFdmVudHMgfVxuICBnZXQgX3VpQ2FsbGJhY2tzKCkge1xuICAgIHRoaXMudWlDYWxsYmFja3MgPSAodGhpcy51aUNhbGxiYWNrcylcbiAgICAgID8gdGhpcy51aUNhbGxiYWNrc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLnVpQ2FsbGJhY2tzXG4gIH1cbiAgc2V0IF91aUNhbGxiYWNrcyh1aUNhbGxiYWNrcykge1xuICAgIHRoaXMudWlDYWxsYmFja3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgdWlDYWxsYmFja3MsIHRoaXMuX3VpQ2FsbGJhY2tzXG4gICAgKVxuICB9XG4gIGdldCBfb2JzZXJ2ZXJDYWxsYmFja3MoKSB7XG4gICAgdGhpcy5vYnNlcnZlckNhbGxiYWNrcyA9ICh0aGlzLm9ic2VydmVyQ2FsbGJhY2tzKVxuICAgICAgPyB0aGlzLm9ic2VydmVyQ2FsbGJhY2tzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXJDYWxsYmFja3NcbiAgfVxuICBzZXQgX29ic2VydmVyQ2FsbGJhY2tzKG9ic2VydmVyQ2FsbGJhY2tzKSB7XG4gICAgdGhpcy5vYnNlcnZlckNhbGxiYWNrcyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBvYnNlcnZlckNhbGxiYWNrcywgdGhpcy5fb2JzZXJ2ZXJDYWxsYmFja3NcbiAgICApXG4gIH1cbiAgZ2V0IGVsZW1lbnRPYnNlcnZlcigpIHtcbiAgICB0aGlzLl9lbGVtZW50T2JzZXJ2ZXIgPSAodGhpcy5fZWxlbWVudE9ic2VydmVyKVxuICAgICAgPyB0aGlzLl9lbGVtZW50T2JzZXJ2ZXJcbiAgICAgIDogbmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5lbGVtZW50T2JzZXJ2ZS5iaW5kKHRoaXMpKVxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50T2JzZXJ2ZXJcbiAgfVxuICBnZXQgX2luc2VydCgpIHsgcmV0dXJuIHRoaXMuaW5zZXJ0IH1cbiAgc2V0IF9pbnNlcnQoaW5zZXJ0KSB7IHRoaXMuaW5zZXJ0ID0gaW5zZXJ0IH1cbiAgZ2V0IF9lbmFibGVkKCkgeyByZXR1cm4gdGhpcy5lbmFibGVkIHx8IGZhbHNlIH1cbiAgc2V0IF9lbmFibGVkKGVuYWJsZWQpIHsgdGhpcy5lbmFibGVkID0gZW5hYmxlZCB9XG4gIGdldCBfdGVtcGxhdGVzKCkge1xuICAgIHRoaXMudGVtcGxhdGVzID0gKHRoaXMudGVtcGxhdGVzKVxuICAgICAgPyB0aGlzLnRlbXBsYXRlc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLnRlbXBsYXRlc1xuICB9XG4gIHNldCBfdGVtcGxhdGVzKHRlbXBsYXRlcykge1xuICAgIHRoaXMudGVtcGxhdGVzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHRlbXBsYXRlcywgdGhpcy5fdGVtcGxhdGVzXG4gICAgKVxuICB9XG4gIGVsZW1lbnRPYnNlcnZlKG11dGF0aW9uUmVjb3JkTGlzdCwgb2JzZXJ2ZXIpIHtcbiAgICBmb3IobGV0IFttdXRhdGlvblJlY29yZEluZGV4LCBtdXRhdGlvblJlY29yZF0gb2YgT2JqZWN0LmVudHJpZXMobXV0YXRpb25SZWNvcmRMaXN0KSkge1xuICAgICAgc3dpdGNoKG11dGF0aW9uUmVjb3JkLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnY2hpbGRMaXN0JzpcbiAgICAgICAgICBsZXQgbXV0YXRpb25SZWNvcmRDYXRlZ29yaWVzID0gWydhZGRlZE5vZGVzJywgJ3JlbW92ZWROb2RlcyddXG4gICAgICAgICAgZm9yKGxldCBtdXRhdGlvblJlY29yZENhdGVnb3J5IG9mIG11dGF0aW9uUmVjb3JkQ2F0ZWdvcmllcykge1xuICAgICAgICAgICAgaWYobXV0YXRpb25SZWNvcmRbbXV0YXRpb25SZWNvcmRDYXRlZ29yeV0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHRoaXMucmVzZXRVSSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGF1dG9JbnNlcnQoKSB7XG4gICAgaWYodGhpcy5pbnNlcnQpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5pbnNlcnQuZWxlbWVudClcbiAgICAgIC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgIGVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KHRoaXMuaW5zZXJ0Lm1ldGhvZCwgdGhpcy5lbGVtZW50KVxuICAgICAgfSlcbiAgICB9XG4gIH1cbiAgYXV0b1JlbW92ZSgpIHtcbiAgICBpZihcbiAgICAgIHRoaXMuZWxlbWVudCAmJlxuICAgICAgdGhpcy5lbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICApIHRoaXMuZWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudClcbiAgfVxuICBlbmFibGVFbGVtZW50KHNldHRpbmdzKSB7XG4gICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB0aGlzLnNldHRpbmdzXG4gICAgaWYoc2V0dGluZ3MuZWxlbWVudE5hbWUpIHRoaXMuX2VsZW1lbnROYW1lID0gc2V0dGluZ3MuZWxlbWVudE5hbWVcbiAgICBpZihzZXR0aW5ncy5lbGVtZW50KSB0aGlzLl9lbGVtZW50ID0gc2V0dGluZ3MuZWxlbWVudFxuICAgIGlmKHNldHRpbmdzLmF0dHJpYnV0ZXMpIHRoaXMuX2F0dHJpYnV0ZXMgPSBzZXR0aW5ncy5hdHRyaWJ1dGVzXG4gICAgaWYoc2V0dGluZ3MudGVtcGxhdGVzKSB0aGlzLl90ZW1wbGF0ZXMgPSBzZXR0aW5ncy50ZW1wbGF0ZXNcbiAgICBpZihzZXR0aW5ncy5pbnNlcnQpIHRoaXMuX2luc2VydCA9IHNldHRpbmdzLmluc2VydFxuICB9XG4gIGRpc2FibGVFbGVtZW50KHNldHRpbmdzKSB7XG4gICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICB0aGlzLmVsZW1lbnQgJiZcbiAgICAgIHRoaXMuZWxlbWVudC5wYXJlbnRFbGVtZW50XG4gICAgKSB0aGlzLmVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpXG4gICAgaWYodGhpcy5lbGVtZW50KSBkZWxldGUgdGhpcy5lbGVtZW50XG4gICAgaWYodGhpcy5hdHRyaWJ1dGVzKSBkZWxldGUgdGhpcy5hdHRyaWJ1dGVzXG4gICAgaWYodGhpcy50ZW1wbGF0ZXMpIGRlbGV0ZSB0aGlzLnRlbXBsYXRlc1xuICAgIGlmKHRoaXMuaW5zZXJ0KSBkZWxldGUgdGhpcy5pbnNlcnRcbiAgfVxuICByZXNldFVJKCkge1xuICAgIHRoaXMuZGlzYWJsZVVJKClcbiAgICB0aGlzLmVuYWJsZVVJKClcbiAgfVxuICBlbmFibGVVSShzZXR0aW5ncykge1xuICAgIHNldHRpbmdzID0gc2V0dGluZ3MgfHwgdGhpcy5zZXR0aW5nc1xuICAgIGlmKHNldHRpbmdzLnVpKSB0aGlzLl91aSA9IHNldHRpbmdzLnVpXG4gICAgaWYoc2V0dGluZ3MudWlDYWxsYmFja3MpIHRoaXMuX3VpQ2FsbGJhY2tzID0gc2V0dGluZ3MudWlDYWxsYmFja3NcbiAgICBpZihzZXR0aW5ncy51aUV2ZW50cykge1xuICAgICAgdGhpcy5fdWlFdmVudHMgPSBzZXR0aW5ncy51aUV2ZW50c1xuICAgICAgdGhpcy5lbmFibGVVSUV2ZW50cygpXG4gICAgfVxuICB9XG4gIGRpc2FibGVVSShzZXR0aW5ncykge1xuICAgIHNldHRpbmdzID0gc2V0dGluZ3MgfHwgdGhpcy5zZXR0aW5nc1xuICAgIGlmKHNldHRpbmdzLnVpRXZlbnRzKSB7XG4gICAgICB0aGlzLmRpc2FibGVVSUV2ZW50cygpXG4gICAgICBkZWxldGUgdGhpcy5fdWlFdmVudHNcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMudWlFdmVudHNcbiAgICBkZWxldGUgdGhpcy51aVxuICAgIGRlbGV0ZSB0aGlzLnVpQ2FsbGJhY2tzXG4gIH1cbiAgZW5hYmxlVUlFdmVudHMoKSB7XG4gICAgaWYoXG4gICAgICB0aGlzLnVpRXZlbnRzICYmXG4gICAgICB0aGlzLnVpICYmXG4gICAgICB0aGlzLnVpQ2FsbGJhY2tzXG4gICAgKSB7XG4gICAgICBNVkMuVXRpbHMuYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cyhcbiAgICAgICAgdGhpcy51aUV2ZW50cyxcbiAgICAgICAgdGhpcy51aSxcbiAgICAgICAgdGhpcy51aUNhbGxiYWNrc1xuICAgICAgKVxuICAgIH1cbiAgfVxuICBkaXNhYmxlVUlFdmVudHMoKSB7XG4gICAgaWYoXG4gICAgICB0aGlzLnVpRXZlbnRzICYmXG4gICAgICB0aGlzLnVpICYmXG4gICAgICB0aGlzLnVpQ2FsbGJhY2tzXG4gICAgKSB7XG4gICAgICBNVkMuVXRpbHMudW5iaW5kRXZlbnRzRnJvbVRhcmdldE9iamVjdHMoXG4gICAgICAgIHRoaXMudWlFdmVudHMsXG4gICAgICAgIHRoaXMudWksXG4gICAgICAgIHRoaXMudWlDYWxsYmFja3NcbiAgICAgIClcbiAgICB9XG4gIH1cbiAgZW5hYmxlRW1pdHRlcnMoKSB7XG4gICAgaWYodGhpcy5zZXR0aW5ncy5lbWl0dGVycykgdGhpcy5fZW1pdHRlcnMgPSB0aGlzLnNldHRpbmdzLmVtaXR0ZXJzXG4gIH1cbiAgZGlzYWJsZUVtaXR0ZXJzKCkge1xuICAgIGlmKHRoaXMuX2VtaXR0ZXJzKSBkZWxldGUgdGhpcy5fZW1pdHRlcnNcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgc2V0dGluZ3MgJiZcbiAgICAgICF0aGlzLl9lbmFibGVkXG4gICAgKSB7XG4gICAgICB0aGlzLmVuYWJsZUVtaXR0ZXJzKClcbiAgICAgIHRoaXMuZW5hYmxlRWxlbWVudChzZXR0aW5ncylcbiAgICAgIHRoaXMuZW5hYmxlVUkoc2V0dGluZ3MpXG4gICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cbiAgZGlzYWJsZSgpIHtcbiAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICBzZXR0aW5ncyAmJlxuICAgICAgdGhpcy5fZW5hYmxlZFxuICAgICkge1xuICAgICAgdGhpcy5kaXNhYmxlVUkoc2V0dGluZ3MpXG4gICAgICB0aGlzLmRpc2FibGVFbGVtZW50KHNldHRpbmdzKVxuICAgICAgdGhpcy5kaXNhYmxlRW1pdHRlcnMoKVxuICAgICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlXG4gICAgICByZXR1cm4gdGhpc3NcbiAgICB9XG4gIH1cbn1cbiIsIk1WQy5Db250cm9sbGVyID0gY2xhc3MgZXh0ZW5kcyBNVkMuQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgfVxuICBnZXQgX2VtaXR0ZXJDYWxsYmFja3MoKSB7XG4gICAgdGhpcy5lbWl0dGVyQ2FsbGJhY2tzID0gKHRoaXMuZW1pdHRlckNhbGxiYWNrcylcbiAgICAgID8gdGhpcy5lbWl0dGVyQ2FsbGJhY2tzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlckNhbGxiYWNrc1xuICB9XG4gIHNldCBfZW1pdHRlckNhbGxiYWNrcyhlbWl0dGVyQ2FsbGJhY2tzKSB7XG4gICAgdGhpcy5lbWl0dGVyQ2FsbGJhY2tzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIGVtaXR0ZXJDYWxsYmFja3MsIHRoaXMuX2VtaXR0ZXJDYWxsYmFja3NcbiAgICApXG4gIH1cbiAgZ2V0IF9tb2RlbENhbGxiYWNrcygpIHtcbiAgICB0aGlzLm1vZGVsQ2FsbGJhY2tzID0gKHRoaXMubW9kZWxDYWxsYmFja3MpXG4gICAgICA/IHRoaXMubW9kZWxDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5tb2RlbENhbGxiYWNrc1xuICB9XG4gIHNldCBfbW9kZWxDYWxsYmFja3MobW9kZWxDYWxsYmFja3MpIHtcbiAgICB0aGlzLm1vZGVsQ2FsbGJhY2tzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIG1vZGVsQ2FsbGJhY2tzLCB0aGlzLl9tb2RlbENhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgX3ZpZXdDYWxsYmFja3MoKSB7XG4gICAgdGhpcy52aWV3Q2FsbGJhY2tzID0gKHRoaXMudmlld0NhbGxiYWNrcylcbiAgICAgID8gdGhpcy52aWV3Q2FsbGJhY2tzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMudmlld0NhbGxiYWNrc1xuICB9XG4gIHNldCBfdmlld0NhbGxiYWNrcyh2aWV3Q2FsbGJhY2tzKSB7XG4gICAgdGhpcy52aWV3Q2FsbGJhY2tzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHZpZXdDYWxsYmFja3MsIHRoaXMuX3ZpZXdDYWxsYmFja3NcbiAgICApXG4gIH1cbiAgZ2V0IF9jb250cm9sbGVyQ2FsbGJhY2tzKCkge1xuICAgIHRoaXMuY29udHJvbGxlckNhbGxiYWNrcyA9ICh0aGlzLmNvbnRyb2xsZXJDYWxsYmFja3MpXG4gICAgICA/IHRoaXMuY29udHJvbGxlckNhbGxiYWNrc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXJDYWxsYmFja3NcbiAgfVxuICBzZXQgX2NvbnRyb2xsZXJDYWxsYmFja3MoY29udHJvbGxlckNhbGxiYWNrcykge1xuICAgIHRoaXMuY29udHJvbGxlckNhbGxiYWNrcyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBjb250cm9sbGVyQ2FsbGJhY2tzLCB0aGlzLl9jb250cm9sbGVyQ2FsbGJhY2tzXG4gICAgKVxuICB9XG4gIGdldCBfbW9kZWxzKCkge1xuICAgIHRoaXMubW9kZWxzID0gKHRoaXMubW9kZWxzKVxuICAgICAgPyB0aGlzLm1vZGVsc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLm1vZGVsc1xuICB9XG4gIHNldCBfbW9kZWxzKG1vZGVscykge1xuICAgIHRoaXMubW9kZWxzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIG1vZGVscywgdGhpcy5fbW9kZWxzXG4gICAgKVxuICB9XG4gIGdldCBfdmlld3MoKSB7XG4gICAgdGhpcy52aWV3cyA9ICh0aGlzLnZpZXdzKVxuICAgICAgPyB0aGlzLnZpZXdzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMudmlld3NcbiAgfVxuICBzZXQgX3ZpZXdzKHZpZXdzKSB7XG4gICAgdGhpcy52aWV3cyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICB2aWV3cywgdGhpcy5fdmlld3NcbiAgICApXG4gIH1cbiAgZ2V0IF9jb250cm9sbGVycygpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXJzID0gKHRoaXMuY29udHJvbGxlcnMpXG4gICAgICA/IHRoaXMuY29udHJvbGxlcnNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyc1xuICB9XG4gIHNldCBfY29udHJvbGxlcnMoY29udHJvbGxlcnMpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXJzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIGNvbnRyb2xsZXJzLCB0aGlzLl9jb250cm9sbGVyc1xuICAgIClcbiAgfVxuICBnZXQgX3JvdXRlcnMoKSB7XG4gICAgdGhpcy5yb3V0ZXJzID0gKHRoaXMucm91dGVycylcbiAgICAgID8gdGhpcy5yb3V0ZXJzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMucm91dGVyc1xuICB9XG4gIHNldCBfcm91dGVycyhyb3V0ZXJzKSB7XG4gICAgdGhpcy5yb3V0ZXJzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHJvdXRlcnMsIHRoaXMuX3JvdXRlcnNcbiAgICApXG4gIH1cbiAgZ2V0IF9yb3V0ZXJFdmVudHMoKSB7XG4gICAgdGhpcy5yb3V0ZXJFdmVudHMgPSAodGhpcy5yb3V0ZXJFdmVudHMpXG4gICAgICA/IHRoaXMucm91dGVyRXZlbnRzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMucm91dGVyRXZlbnRzXG4gIH1cbiAgc2V0IF9yb3V0ZXJFdmVudHMocm91dGVyRXZlbnRzKSB7XG4gICAgdGhpcy5yb3V0ZXJFdmVudHMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgcm91dGVyRXZlbnRzLCB0aGlzLl9yb3V0ZXJFdmVudHNcbiAgICApXG4gIH1cbiAgZ2V0IF9yb3V0ZXJDYWxsYmFja3MoKSB7XG4gICAgdGhpcy5yb3V0ZXJDYWxsYmFja3MgPSAodGhpcy5yb3V0ZXJDYWxsYmFja3MpXG4gICAgICA/IHRoaXMucm91dGVyQ2FsbGJhY2tzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMucm91dGVyQ2FsbGJhY2tzXG4gIH1cbiAgc2V0IF9yb3V0ZXJDYWxsYmFja3Mocm91dGVyQ2FsbGJhY2tzKSB7XG4gICAgdGhpcy5yb3V0ZXJDYWxsYmFja3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgcm91dGVyQ2FsbGJhY2tzLCB0aGlzLl9yb3V0ZXJDYWxsYmFja3NcbiAgICApXG4gIH1cbiAgZ2V0IF9lbWl0dGVyRXZlbnRzKCkge1xuICAgIHRoaXMuZW1pdHRlckV2ZW50cyA9ICh0aGlzLmVtaXR0ZXJFdmVudHMpXG4gICAgICA/IHRoaXMuZW1pdHRlckV2ZW50c1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLmVtaXR0ZXJFdmVudHNcbiAgfVxuICBzZXQgX2VtaXR0ZXJFdmVudHMoZW1pdHRlckV2ZW50cykge1xuICAgIHRoaXMuZW1pdHRlckV2ZW50cyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBlbWl0dGVyRXZlbnRzLCB0aGlzLl9lbWl0dGVyRXZlbnRzXG4gICAgKVxuICB9XG4gIGdldCBfbW9kZWxFdmVudHMoKSB7XG4gICAgdGhpcy5tb2RlbEV2ZW50cyA9ICh0aGlzLm1vZGVsRXZlbnRzKVxuICAgICAgPyB0aGlzLm1vZGVsRXZlbnRzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMubW9kZWxFdmVudHNcbiAgfVxuICBzZXQgX21vZGVsRXZlbnRzKG1vZGVsRXZlbnRzKSB7XG4gICAgdGhpcy5tb2RlbEV2ZW50cyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBtb2RlbEV2ZW50cywgdGhpcy5fbW9kZWxFdmVudHNcbiAgICApXG4gIH1cbiAgZ2V0IF92aWV3RXZlbnRzKCkge1xuICAgIHRoaXMudmlld0V2ZW50cyA9ICh0aGlzLnZpZXdFdmVudHMpXG4gICAgICA/IHRoaXMudmlld0V2ZW50c1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLnZpZXdFdmVudHNcbiAgfVxuICBzZXQgX3ZpZXdFdmVudHModmlld0V2ZW50cykge1xuICAgIHRoaXMudmlld0V2ZW50cyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICB2aWV3RXZlbnRzLCB0aGlzLl92aWV3RXZlbnRzXG4gICAgKVxuICB9XG4gIGdldCBfY29udHJvbGxlckV2ZW50cygpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXJFdmVudHMgPSAodGhpcy5jb250cm9sbGVyRXZlbnRzKVxuICAgICAgPyB0aGlzLmNvbnRyb2xsZXJFdmVudHNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyRXZlbnRzXG4gIH1cbiAgc2V0IF9jb250cm9sbGVyRXZlbnRzKGNvbnRyb2xsZXJFdmVudHMpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXJFdmVudHMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgY29udHJvbGxlckV2ZW50cywgdGhpcy5fY29udHJvbGxlckV2ZW50c1xuICAgIClcbiAgfVxuICBnZXQgX2VuYWJsZWQoKSB7IHJldHVybiB0aGlzLmVuYWJsZWQgfHwgZmFsc2UgfVxuICBzZXQgX2VuYWJsZWQoZW5hYmxlZCkgeyB0aGlzLmVuYWJsZWQgPSBlbmFibGVkIH1cbiAgZW5hYmxlTW9kZWxFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLmJpbmRFdmVudHNUb1RhcmdldE9iamVjdHModGhpcy5tb2RlbEV2ZW50cywgdGhpcy5tb2RlbHMsIHRoaXMubW9kZWxDYWxsYmFja3MpXG4gIH1cbiAgZGlzYWJsZU1vZGVsRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyh0aGlzLm1vZGVsRXZlbnRzLCB0aGlzLm1vZGVscywgdGhpcy5tb2RlbENhbGxiYWNrcylcbiAgfVxuICBlbmFibGVWaWV3RXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy5iaW5kRXZlbnRzVG9UYXJnZXRPYmplY3RzKHRoaXMudmlld0V2ZW50cywgdGhpcy52aWV3cywgdGhpcy52aWV3Q2FsbGJhY2tzKVxuICB9XG4gIGRpc2FibGVWaWV3RXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyh0aGlzLnZpZXdFdmVudHMsIHRoaXMudmlld3MsIHRoaXMudmlld0NhbGxiYWNrcylcbiAgfVxuICBlbmFibGVDb250cm9sbGVyRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy5iaW5kRXZlbnRzVG9UYXJnZXRPYmplY3RzKHRoaXMuY29udHJvbGxlckV2ZW50cywgdGhpcy5jb250cm9sbGVycywgdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzKVxuICB9XG4gIGRpc2FibGVDb250cm9sbGVyRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyh0aGlzLmNvbnRyb2xsZXJFdmVudHMsIHRoaXMuY29udHJvbGxlcnMsIHRoaXMuY29udHJvbGxlckNhbGxiYWNrcylcbiAgfVxuICBlbmFibGVFbWl0dGVyRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy5iaW5kRXZlbnRzVG9UYXJnZXRPYmplY3RzKHRoaXMuZW1pdHRlckV2ZW50cywgdGhpcy5lbWl0dGVycywgdGhpcy5lbWl0dGVyQ2FsbGJhY2tzKVxuICB9XG4gIGRpc2FibGVFbWl0dGVyRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyh0aGlzLmVtaXR0ZXJFdmVudHMsIHRoaXMuZW1pdHRlcnMsIHRoaXMuZW1pdHRlckNhbGxiYWNrcylcbiAgfVxuICBlbmFibGVSb3V0ZXJFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLmJpbmRFdmVudHNUb1RhcmdldE9iamVjdHModGhpcy5yb3V0ZXJFdmVudHMsIHRoaXMucm91dGVycywgdGhpcy5yb3V0ZXJDYWxsYmFja3MpXG4gIH1cbiAgZGlzYWJsZVJvdXRlckV2ZW50cygpIHtcbiAgICBNVkMuVXRpbHMudW5iaW5kRXZlbnRzRnJvbVRhcmdldE9iamVjdHModGhpcy5yb3V0ZXJFdmVudHMsIHRoaXMucm91dGVycywgdGhpcy5yb3V0ZXJDYWxsYmFja3MpXG4gIH1cbiAgZW5hYmxlKCkge1xuICAgIGxldCBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3NcbiAgICBpZihcbiAgICAgIHNldHRpbmdzICYmXG4gICAgICAhdGhpcy5lbmFibGVkXG4gICAgKSB7XG4gICAgICBpZihzZXR0aW5ncy5tb2RlbENhbGxiYWNrcykgdGhpcy5fbW9kZWxDYWxsYmFja3MgPSBzZXR0aW5ncy5tb2RlbENhbGxiYWNrc1xuICAgICAgaWYoc2V0dGluZ3Mudmlld0NhbGxiYWNrcykgdGhpcy5fdmlld0NhbGxiYWNrcyA9IHNldHRpbmdzLnZpZXdDYWxsYmFja3NcbiAgICAgIGlmKHNldHRpbmdzLmNvbnRyb2xsZXJDYWxsYmFja3MpIHRoaXMuX2NvbnRyb2xsZXJDYWxsYmFja3MgPSBzZXR0aW5ncy5jb250cm9sbGVyQ2FsbGJhY2tzXG4gICAgICBpZihzZXR0aW5ncy5lbWl0dGVyQ2FsbGJhY2tzKSB0aGlzLl9lbWl0dGVyQ2FsbGJhY2tzID0gc2V0dGluZ3MuZW1pdHRlckNhbGxiYWNrc1xuICAgICAgaWYoc2V0dGluZ3Mucm91dGVyQ2FsbGJhY2tzKSB0aGlzLl9yb3V0ZXJDYWxsYmFja3MgPSBzZXR0aW5ncy5yb3V0ZXJDYWxsYmFja3NcbiAgICAgIGlmKHNldHRpbmdzLm1vZGVscykgdGhpcy5fbW9kZWxzID0gc2V0dGluZ3MubW9kZWxzXG4gICAgICBpZihzZXR0aW5ncy52aWV3cykgdGhpcy5fdmlld3MgPSBzZXR0aW5ncy52aWV3c1xuICAgICAgaWYoc2V0dGluZ3MuY29udHJvbGxlcnMpIHRoaXMuX2NvbnRyb2xsZXJzID0gc2V0dGluZ3MuY29udHJvbGxlcnNcbiAgICAgIGlmKHNldHRpbmdzLmVtaXR0ZXJzKSB0aGlzLl9lbWl0dGVycyA9IHNldHRpbmdzLmVtaXR0ZXJzXG4gICAgICBpZihzZXR0aW5ncy5yb3V0ZXJzKSB0aGlzLl9yb3V0ZXJzID0gc2V0dGluZ3Mucm91dGVyc1xuICAgICAgaWYoc2V0dGluZ3Mucm91dGVyRXZlbnRzKSB0aGlzLl9yb3V0ZXJFdmVudHMgPSBzZXR0aW5ncy5yb3V0ZXJFdmVudHNcbiAgICAgIGlmKHNldHRpbmdzLm1vZGVsRXZlbnRzKSB0aGlzLl9tb2RlbEV2ZW50cyA9IHNldHRpbmdzLm1vZGVsRXZlbnRzXG4gICAgICBpZihzZXR0aW5ncy52aWV3RXZlbnRzKSB0aGlzLl92aWV3RXZlbnRzID0gc2V0dGluZ3Mudmlld0V2ZW50c1xuICAgICAgaWYoc2V0dGluZ3MuY29udHJvbGxlckV2ZW50cykgdGhpcy5fY29udHJvbGxlckV2ZW50cyA9IHNldHRpbmdzLmNvbnRyb2xsZXJFdmVudHNcbiAgICAgIGlmKHNldHRpbmdzLmVtaXR0ZXJFdmVudHMpIHRoaXMuX2VtaXR0ZXJFdmVudHMgPSBzZXR0aW5ncy5lbWl0dGVyRXZlbnRzXG4gICAgICBpZihcbiAgICAgICAgdGhpcy5tb2RlbEV2ZW50cyAmJlxuICAgICAgICB0aGlzLm1vZGVscyAmJlxuICAgICAgICB0aGlzLm1vZGVsQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5lbmFibGVNb2RlbEV2ZW50cygpXG4gICAgICB9XG4gICAgICBpZihcbiAgICAgICAgdGhpcy52aWV3RXZlbnRzICYmXG4gICAgICAgIHRoaXMudmlld3MgJiZcbiAgICAgICAgdGhpcy52aWV3Q2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5lbmFibGVWaWV3RXZlbnRzKClcbiAgICAgIH1cbiAgICAgIGlmKFxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJFdmVudHMgJiZcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyAmJlxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVuYWJsZUNvbnRyb2xsZXJFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMucm91dGVyRXZlbnRzICYmXG4gICAgICAgIHRoaXMucm91dGVycyAmJlxuICAgICAgICB0aGlzLnJvdXRlckNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlUm91dGVyRXZlbnRzKClcbiAgICAgIH1cbiAgICAgIGlmKFxuICAgICAgICB0aGlzLmVtaXR0ZXJFdmVudHMgJiZcbiAgICAgICAgdGhpcy5lbWl0dGVycyAmJlxuICAgICAgICB0aGlzLmVtaXR0ZXJDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVuYWJsZUVtaXR0ZXJFdmVudHMoKVxuICAgICAgfVxuICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWVcbiAgICB9XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5kaXNhYmxlKClcbiAgICB0aGlzLmVuYWJsZSgpXG4gIH1cbiAgZGlzYWJsZSgpIHtcbiAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICBzZXR0aW5ncyAmJlxuICAgICAgdGhpcy5lbmFibGVkXG4gICAgKSB7XG4gICAgICBpZihcbiAgICAgICAgdGhpcy5tb2RlbEV2ZW50cyAmJlxuICAgICAgICB0aGlzLm1vZGVscyAmJlxuICAgICAgICB0aGlzLm1vZGVsQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlTW9kZWxFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMudmlld0V2ZW50cyAmJlxuICAgICAgICB0aGlzLnZpZXdzICYmXG4gICAgICAgIHRoaXMudmlld0NhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZVZpZXdFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMuY29udHJvbGxlckV2ZW50cyAmJlxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzICYmXG4gICAgICAgIHRoaXMuY29udHJvbGxlckNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZUNvbnRyb2xsZXJFdmVudHMoKVxuICAgICAgfX1cbiAgICAgIGlmKFxuICAgICAgICB0aGlzLnJvdXRlckV2ZW50cyAmJlxuICAgICAgICB0aGlzLnJvdXRlcnMgJiZcbiAgICAgICAgdGhpcy5yb3V0ZXJDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmRpc2FibGVSb3V0ZXJFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMuZW1pdHRlckV2ZW50cyAmJlxuICAgICAgICB0aGlzLmVtaXR0ZXJzICYmXG4gICAgICAgIHRoaXMuZW1pdHRlckNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZUVtaXR0ZXJFdmVudHMoKVxuICAgICAgICBkZWxldGUgdGhpcy5fbW9kZWxDYWxsYmFja3NcbiAgICAgICAgZGVsZXRlIHRoaXMuX3ZpZXdDYWxsYmFja3NcbiAgICAgICAgZGVsZXRlIHRoaXMuX2NvbnRyb2xsZXJDYWxsYmFja3NcbiAgICAgICAgZGVsZXRlIHRoaXMuX2VtaXR0ZXJDYWxsYmFja3NcbiAgICAgICAgZGVsZXRlIHRoaXMuX3JvdXRlckNhbGxiYWNrc1xuICAgICAgICBkZWxldGUgdGhpcy5fbW9kZWxzXG4gICAgICAgIGRlbGV0ZSB0aGlzLl92aWV3c1xuICAgICAgICBkZWxldGUgdGhpcy5fY29udHJvbGxlcnNcbiAgICAgICAgZGVsZXRlIHRoaXMuX2VtaXR0ZXJzXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9yb3V0ZXJzXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9yb3V0ZXJFdmVudHNcbiAgICAgICAgZGVsZXRlIHRoaXMuX21vZGVsRXZlbnRzXG4gICAgICAgIGRlbGV0ZSB0aGlzLl92aWV3RXZlbnRzXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jb250cm9sbGVyRXZlbnRzXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9lbWl0dGVyRXZlbnRzXG4gICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2VcbiAgICB9XG4gIH1cbn1cbiIsIk1WQy5Sb3V0ZXIgPSBjbGFzcyBleHRlbmRzIE1WQy5CYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICB9XG4gIGdldCByb3V0ZSgpIHtcbiAgICBpZih0aGlzLl9oYXNoKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKHdpbmRvdy5sb2NhdGlvbi5oYXNoKS5zcGxpdCgnIycpLnBvcCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBTdHJpbmcod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIH1cbiAgfVxuICBnZXQgX2hhc2goKSB7IHJldHVybiB0aGlzLmhhc2ggfVxuICBzZXQgX2hhc2goaGFzaCkgeyB0aGlzLmhhc2ggPSBoYXNoIH1cbiAgZ2V0IF9lbmFibGVkKCkgeyByZXR1cm4gdGhpcy5lbmFibGVkIHx8IGZhbHNlIH1cbiAgc2V0IF9lbmFibGVkKGVuYWJsZWQpIHsgdGhpcy5lbmFibGVkID0gZW5hYmxlZCB9XG4gIGdldCBfcm91dGVzKCkge1xuICAgIHRoaXMucm91dGVzID0gKHRoaXMucm91dGVzKVxuICAgICAgPyB0aGlzLnJvdXRlc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLnJvdXRlc1xuICB9XG4gIHNldCBfcm91dGVzKHJvdXRlcykge1xuICAgIHRoaXMucm91dGVzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHJvdXRlcywgdGhpcy5fcm91dGVzXG4gICAgKVxuICB9XG4gIGdldCBfY29udHJvbGxlcigpIHsgcmV0dXJuIHRoaXMuY29udHJvbGxlciB9XG4gIHNldCBfY29udHJvbGxlcihjb250cm9sbGVyKSB7IHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXIgfVxuICBnZXQgX3ByZXZpb3VzVVJMKCkgeyByZXR1cm4gdGhpcy5wcmV2aW91c1VSTCB9XG4gIHNldCBfcHJldmlvdXNVUkwocHJldmlvdXNVUkwpIHsgdGhpcy5wcmV2aW91c1VSTCA9IHByZXZpb3VzVVJMIH1cbiAgZ2V0IF9jdXJyZW50VVJMKCkgeyByZXR1cm4gdGhpcy5jdXJyZW50VVJMIH1cbiAgc2V0IF9jdXJyZW50VVJMKGN1cnJlbnRVUkwpIHsgdGhpcy5jdXJyZW50VVJMID0gY3VycmVudFVSTCB9XG4gIGdldCBmcmFnbWVudElEUmVnRXhwKCkgeyByZXR1cm4gbmV3IFJlZ0V4cCgvXihbMC05QS1aXFw/XFw9XFwsXFwuXFwqXFwtXFxfXFwnXFxcIlxcXlxcJVxcJFxcI1xcQFxcIVxcflxcKFxcKVxce1xcfVxcJlxcPFxcPlxcXFxcXC9dKSokLywgJ2dpJykgfVxuICBmcmFnbWVudE5hbWVSZWdFeHAoZnJhZ21lbnQpIHsgcmV0dXJuIG5ldyBSZWdFeHAoJ14nLmNvbmNhdChmcmFnbWVudCwgJyQnKSkgfVxuICBlbmFibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgc2V0dGluZ3MgJiZcbiAgICAgICF0aGlzLmVuYWJsZWRcbiAgICApIHtcbiAgICAgIHRoaXMuX2hhc2ggPSAodHlwZW9mIHRoaXMuc2V0dGluZ3MuaGFzaCA9PT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/IHRoaXMuc2V0dGluZ3MuaGFzaFxuICAgICAgICA6IHRydWVcbiAgICAgIHRoaXMuZW5hYmxlRW1pdHRlcnMoKVxuICAgICAgdGhpcy5lbmFibGVFdmVudHMoKVxuICAgICAgdGhpcy5lbmFibGVSb3V0ZXMoKVxuICAgICAgdGhpcy5yb3V0ZUNoYW5nZSgpXG4gICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZVxuICAgIH1cbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGxldCBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3NcbiAgICBpZihcbiAgICAgIHNldHRpbmdzICYmXG4gICAgICB0aGlzLmVuYWJsZWRcbiAgICApIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9oYXNoXG4gICAgICB0aGlzLmRpc2FibGVFdmVudHMoKVxuICAgICAgdGhpcy5kaXNhYmxlUm91dGVzKClcbiAgICAgIHRoaXMuZGlzYWJsZUVtaXR0ZXJzKClcbiAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZVxuICAgIH1cbiAgfVxuICBlbmFibGVSb3V0ZXMoKSB7XG4gICAgaWYodGhpcy5zZXR0aW5ncy5jb250cm9sbGVyKSB0aGlzLl9jb250cm9sbGVyID0gdGhpcy5zZXR0aW5ncy5jb250cm9sbGVyXG4gICAgdGhpcy5fcm91dGVzID0gT2JqZWN0LmVudHJpZXModGhpcy5zZXR0aW5ncy5yb3V0ZXMpLnJlZHVjZShcbiAgICAgIChcbiAgICAgICAgX3JvdXRlcyxcbiAgICAgICAgW3JvdXRlUGF0aCwgcm91dGVDYWxsYmFja10sXG4gICAgICAgIHJvdXRlSW5kZXgsXG4gICAgICAgIG9yaWdpbmFsUm91dGVzLFxuICAgICAgKSA9PiB7XG4gICAgICAgIF9yb3V0ZXNbcm91dGVQYXRoXSA9IHRoaXMuY29udHJvbGxlcltyb3V0ZUNhbGxiYWNrXS5iaW5kKHRoaXMuY29udHJvbGxlcilcbiAgICAgICAgcmV0dXJuIF9yb3V0ZXNcbiAgICAgIH0sXG4gICAgICB7fVxuICAgIClcbiAgICByZXR1cm5cbiAgfVxuICBlbmFibGVFbWl0dGVycygpIHtcbiAgICB0aGlzLl9lbWl0dGVycyA9IHtcbiAgICAgIG5hdmlnYXRlRW1pdHRlcjogbmV3IE1WQy5FbWl0dGVycy5OYXZpZ2F0ZUVtaXR0ZXIoKSxcbiAgICB9XG4gIH1cbiAgZGlzYWJsZUVtaXR0ZXJzKCkge1xuICAgIGRlbGV0ZSB0aGlzLl9lbWl0dGVycy5uYXZpZ2F0ZUVtaXR0ZXJcbiAgfVxuICBkaXNhYmxlUm91dGVzKCkge1xuICAgIGRlbGV0ZSB0aGlzLl9yb3V0ZXNcbiAgICBkZWxldGUgdGhpcy5fY29udHJvbGxlclxuICB9XG4gIGVuYWJsZUV2ZW50cygpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHRoaXMucm91dGVDaGFuZ2UuYmluZCh0aGlzKSlcbiAgfVxuICBkaXNhYmxlRXZlbnRzKCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgdGhpcy5yb3V0ZUNoYW5nZS5iaW5kKHRoaXMpKVxuICB9XG4gIHJvdXRlQ2hhbmdlKCkge1xuICAgIGxldCByb3V0ZSA9IHRoaXMucm91dGUuc3BsaXQoJy8nKS5maWx0ZXIoKGZyYWdtZW50KSA9PiBmcmFnbWVudC5sZW5ndGgpXG4gICAgcm91dGUgPSAocm91dGUubGVuZ3RoKVxuICAgICAgPyByb3V0ZVxuICAgICAgOiBbJy8nXVxuICAgIGxldCByb3V0ZUNvbnRyb2xsZXJEYXRhID0gT2JqZWN0LmVudHJpZXModGhpcy5yb3V0ZXMpXG4gICAgICAuZmlsdGVyKChbcm91dGVyUGF0aCwgcm91dGVyQ29udHJvbGxlcl0pID0+IHtcbiAgICAgICAgcm91dGVyUGF0aCA9IHJvdXRlclBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKGZyYWdtZW50KSA9PiBmcmFnbWVudC5sZW5ndGgpXG4gICAgICAgIHJvdXRlclBhdGggPSAocm91dGVyUGF0aC5sZW5ndGgpXG4gICAgICAgICAgPyByb3V0ZXJQYXRoXG4gICAgICAgICAgOiBbJy8nXVxuICAgICAgICBpZihcbiAgICAgICAgICByb3V0ZS5sZW5ndGggJiZcbiAgICAgICAgICByb3V0ZS5sZW5ndGggPT09IHJvdXRlclBhdGgubGVuZ3RoXG4gICAgICAgICkge1xuICAgICAgICAgIHJvdXRlclBhdGhcbiAgICAgICAgICBsZXQgbWF0Y2hcbiAgICAgICAgICByZXR1cm4gcm91dGVyUGF0aC5maWx0ZXIoKGZyYWdtZW50LCBmcmFnbWVudEluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgbWF0Y2ggPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICBtYXRjaCA9PT0gdHJ1ZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmKGZyYWdtZW50WzBdID09PSAnOicpIHtcbiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnRJRFJlZ0V4cFxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gZnJhZ21lbnQucmVwbGFjZShuZXcgUmVnRXhwKCcvJywgJ2dpJyksICdcXFxcXFwvJylcbiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnROYW1lUmVnRXhwKGZyYWdtZW50KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG1hdGNoID0gZnJhZ21lbnQudGVzdChyb3V0ZVtmcmFnbWVudEluZGV4XSlcbiAgICAgICAgICAgICAgaWYoXG4gICAgICAgICAgICAgICAgbWF0Y2ggPT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICBmcmFnbWVudEluZGV4ID09PSByb3V0ZS5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiByb3V0ZXJDb250cm9sbGVyXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVswXVxuICAgICAgICB9XG4gICAgICB9KVswXVxuICAgIHRyeSB7XG4gICAgICBpZih0aGlzLmN1cnJlbnRVUkwpIHRoaXMuX3ByZXZpb3VzVVJMID0gdGhpcy5jdXJyZW50VVJMXG4gICAgICB0aGlzLl9jdXJyZW50VVJMID0gd2luZG93LmxvY2F0aW9uLmhyZWZcbiAgICAgIGxldCByb3V0ZUNvbnRyb2xsZXJOYW1lID0gcm91dGVDb250cm9sbGVyRGF0YVswXVxuICAgICAgbGV0IHJvdXRlQ29udHJvbGxlciA9IHJvdXRlQ29udHJvbGxlckRhdGFbMV1cbiAgICAgIGxldCBuYXZpZ2F0ZUVtaXR0ZXIgPSB0aGlzLmVtaXR0ZXJzLm5hdmlnYXRlRW1pdHRlclxuICAgICAgbGV0IG5hdmlnYXRlRW1pdHRlckRhdGEgPSB7XG4gICAgICAgIGN1cnJlbnRVUkw6IHRoaXMuY3VycmVudFVSTCxcbiAgICAgICAgcHJldmlvdXNVUkw6IHRoaXMucHJldmlvdXNVUkwsXG4gICAgICAgIGN1cnJlbnRSb3V0ZTogdGhpcy5yb3V0ZSxcbiAgICAgICAgY3VycmVudENvbnRyb2xsZXI6IHJvdXRlQ29udHJvbGxlci5uYW1lXG4gICAgICB9XG4gICAgICBuYXZpZ2F0ZUVtaXR0ZXIuc2V0KG5hdmlnYXRlRW1pdHRlckRhdGEpXG4gICAgICB0aGlzLmVtaXQoXG4gICAgICAgIG5hdmlnYXRlRW1pdHRlci5uYW1lLFxuICAgICAgICBuYXZpZ2F0ZUVtaXR0ZXIuZW1pc3Npb24oKVxuICAgICAgKVxuICAgICAgcm91dGVDb250cm9sbGVyKG5hdmlnYXRlRW1pdHRlci5lbWlzc2lvbigpKVxuICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG4gIG5hdmlnYXRlKHBhdGgpIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGhcbiAgfVxufVxuIl0sImZpbGUiOiJicm93c2VyL212Yy1mcmFtZXdvcmstbWluLmpzIn0=
