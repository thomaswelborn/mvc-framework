var MVC=MVC||{};MVC.Constants={},MVC.CONST=MVC.Constants,MVC.Constants.Events={},MVC.CONST.EV=MVC.Constants.Events,MVC.Constants.Operators={},MVC.CONST.Operators={},MVC.CONST.Operators.Comparison={EQ:"EQ",STEQ:"STEQ",NOEQ:"NOEQ",STNOEQ:"STNOEQ",GT:"GT",LT:"LT",GTE:"GTE",LTE:"LTE"},MVC.CONST.Operators.Statement={AND:"AND",OR:"OR"},console.log(MVC.CONST),MVC.Utils={},MVC.Utils.isArray=function(t){return Array.isArray(t)},MVC.Utils.isObject=function(t){return!Array.isArray(t)&&null!==t&&"object"==typeof t},MVC.Utils.typeOf=function(t){return"object"==typeof valueA?MVC.Utils.isObject(valueA)?"object":MVC.Utils.isArray(valueA)?"array":null===valueA?"null":void 0:typeof t},MVC.Utils.isHTMLElement=function(t){return t instanceof HTMLElement},MVC.Utils.typeOf=function(t){switch(typeof t){case"object":return MVC.Utils.isArray(t)?"array":MVC.Utils.isObject(t)?"object":null===t?"null":void 0;case"string":case"number":case"boolean":case"undefined":case"function":return typeof t}},MVC.Utils.addPropertiesToObject=function(){var t;switch(arguments.length){case 2:var e=arguments[0];for(var[s,i]of(t=arguments[1],Object.entries(e)))t[s]=i;break;case 3:var r=arguments[0],a=arguments[1];(t=arguments[2])[r]=a}return t},MVC.Utils.objectQuery=function(t,e){var s=MVC.Utils.objectQuery.parseNotation(t);return"@"===s[0]&&s.splice(0,1),s.length?(e=MVC.Utils.isObject(e)?Object.entries(e):e,s.reduce((t,e,s,i)=>{var r=[];for(var[a,n]of(e=MVC.Utils.objectQuery.parseFragment(e),t))a.match(e)&&(r=s===i.length-1?r.concat([[a,n]]):r.concat(Object.entries(n)));return t=r},e)):e},MVC.Utils.objectQuery.parseNotation=function(t){return t="["===t.charAt(0)&&"]"==t.charAt(t.length-1)?t.slice(1,-1).split("]["):t.split(".")},MVC.Utils.objectQuery.parseFragment=function(t){return"/"===t.charAt(0)&&"/"==t.charAt(t.length-1)&&(t=t.slice(1,-1),t=new RegExp("^".concat(t,"$"))),t},MVC.Utils.toggleEventsForTargetObjects=function(t,e,s,i){for(var[r,a]of Object.entries(e)){var n=r.split(" "),l=n[0],h=n[1],o=MVC.Utils.objectQuery(l,s);for(var[c,u]of o=MVC.Utils.isArray(o)?o:[["@",o]]){var v="on"===t?u instanceof NodeList||u instanceof HTMLElement||u instanceof Document?"addEventListener":"on":u instanceof NodeList||u instanceof HTMLElement||u instanceof Document?"removeEventListener":"off",d=MVC.Utils.objectQuery(a,i)[0][1];if(u instanceof NodeList)for(var b of u)b[v](h,d);else HTMLElement,u[v](h,d)}}},MVC.Utils.bindEventsToTargetObjects=function(){this.toggleEventsForTargetObjects("on",...arguments)},MVC.Utils.unbindEventsFromTargetObjects=function(){this.toggleEventsForTargetObjects("off",...arguments)},MVC.Utils.validateDataSchema=function(t,e){if(e){var s={};return Object.entries(e).forEach(e=>{var[i,r]=e,a={},n=t[i];if(a.key=i,r.required&&(a.required=MVC.Utils.validateDataSchema.required(n,r.required)),r.type&&(a.type=MVC.Utils.validateDataSchema.type(n,r.type)),r.evaluations){var l=MVC.Utils.validateDataSchema.evaluations(n,r.evaluations);a.evaluations=MVC.Utils.validateDataSchema.evaluationResults(l)}s[i]=a}),s}},MVC.Utils.validateDataSchema.required=function(t,e){var s={value:t},i=Object.assign({pass:"Value is defined.",fail:"Value is not defined."},e.messages);switch(t=void 0!==t,MVC.Utils.typeOf(e)){case"boolean":s.comparator=e,s.result=t===e;break;case"object":s.comparator=e.value,s.result=t===e.value}return s.message=s.result?i.pass:i.fail,s},MVC.Utils.validateDataSchema.type=function(t,e){var s={value:t},i=Object.assign({pass:"Valid Type.",fail:"Invalid Type."},e.messages);switch(MVC.Utils.typeOf(e)){case"string":s.comparator,s.result=MVC.Utils.typeOf(t)===e;break;case"object":s.result=MVC.Utils.typeOf(t)===e.value}return s.message=s.result?i.pass:i.fail,s},MVC.Utils.validateDataSchema.evaluations=function(t,e){return e.reduce((e,s,i)=>{if(MVC.Utils.isArray(s))e.push(...MVC.Utils.validateDataSchema.evaluations(t,s));else{s.value=t;var r=MVC.Utils.validateDataSchema.compareValues(s.value,s.comparison.value,s.comparator,s.messages);s.results=s.results||{},s.results.value=r,e.push(s)}if(e.length>1){var a=e[i];if(a.comparison.statement){e[i-1];var n=a.results.statement?a.results.statement.result:a.results.value.result,l=MVC.Utils.validateDataSchema.compareStatements(n,a.comparison.statement,a.results.value.result,a.messages);a.results=a.results||{},a.results.statement=l}}return e},[])},MVC.Utils.validateDataSchema.evaluationResults=function(t){var e={pass:[],fail:[]};return t.forEach(t=>{t.results.statement?!1===t.results.statement.result?e.fail.push(t):!0===t.results.statement.result&&e.pass.push(t):t.results.value&&(!1===t.results.value.result?e.fail.push(t):!0===t.results.value.result&&e.pass.push(t))}),e},MVC.Utils.validateDataSchema.compareValues=function(t,e,s,i){var r;switch(e){case MVC.CONST.Operators.Comparison.EQ:r=t==s;break;case MVC.CONST.Operators.Comparison.STEQ:r=t===s;break;case MVC.CONST.Operators.Comparison.NOEQ:r=t!=s;break;case MVC.CONST.Operators.Comparison.STNOEQ:r=t!==s;break;case MVC.CONST.Operators.Comparison.GT:r=t>s;break;case MVC.CONST.Operators.Comparison.LT:r=t<s;break;case MVC.CONST.Operators.Comparison.GTE:r=t>=s;break;case MVC.CONST.Operators.Comparison.LTE:r=t<=s}return{result:r,message:r?i.pass:i.fail}},MVC.Utils.validateDataSchema.compareStatements=function(t,e,s,i){var r;switch(e){case MVC.CONST.Operators.Statement.AND:r=t&&s;break;case MVC.CONST.Operators.Statement.OR:r=t||s}return{result:r,message:r?i.pass:i.fail}},MVC.Events=class{constructor(){}get _events(){return this.events=this.events?this.events:{},this.events}eventCallbacks(t){return this._events[t]||{}}eventCallbackName(t){return t.name.length?t.name:"anonymousFunction"}eventCallbackGroup(t,e){return t[e]||[]}on(t,e){var s=this.eventCallbacks(t),i=this.eventCallbackName(e),r=this.eventCallbackGroup(s,i);r.push(e),s[i]=r,this._events[t]=s}off(){switch(arguments.length){case 1:var t=arguments[0];delete this._events[t];break;case 2:t=arguments[0];var e=arguments[1],s=this.eventCallbackName(e);delete this._events[t][s]}}emit(t,e){var s=this.eventCallbacks(t);for(var[i,r]of Object.entries(s))for(var a of r){a(e,...Object.values(arguments).splice(2)||[])}}},MVC.Channels=class{constructor(){}get _channels(){return this.channels=this.channels?this.channels:{},this.channels}channel(t){return this._channels[t]=this._channels[t]?this._channels[t]:new MVC.Channels.Channel,this._channels[t]}off(t){delete this._channels[t]}},MVC.Channels.Channel=class{constructor(){}get _responses(){return this.responses=this.responses?this.responses:{},this.responses}response(t,e){if(!e)return this._responses[response];this._responses[t]=e}request(t,e){if(this._responses[t])return this._responses[t](e)}off(t){if(t)delete this._responses[t];else for(var[e]of Object.keys(this._responses))delete this._responses[e]}},MVC.Base=class extends MVC.Events{constructor(t,e){super(),e&&(this._configuration=e),t&&(this._settings=t)}get _configuration(){return this.configuration=this.configuration?this.configuration:{},this.configuration}set _configuration(t){this.configuration=t}get _settings(){return this.settings=this.settings?this.settings:{},this.settings}set _settings(t){this.settings=MVC.Utils.addPropertiesToObject(t,this._settings)}get _emitters(){return this.emitters=this.emitters?this.emitters:{},this.emitters}set _emitters(t){this.emitters=MVC.Utils.addPropertiesToObject(t,this._emitters)}},MVC.Service=class extends MVC.Base{constructor(){super(...arguments)}get _defaults(){return this.defaults||{contentType:{"Content-Type":"application/json"},responseType:"json"}}get _responseTypes(){return["","arraybuffer","blob","document","json","text"]}get _responseType(){return this.responseType}set _responseType(t){this._xhr.responseType=this._responseTypes.find(e=>e===t)||this._defaults.responseType}get _type(){return this.type}set _type(t){this.type=t}get _url(){return this.url}set _url(t){this.url=t}get _headers(){return this.headers||[]}set _headers(t){this._headers.length=0,t.forEach(t=>{this._headers.push(t),t=Object.entries(t)[0],this._xhr.setRequestHeader(t[0],t[1])})}get _data(){return this.data}set _data(t){this.data=t}get _xhr(){return this.xhr=this.xhr?this.xhr:new XMLHttpRequest,this.xhr}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}request(t){return t=t||this.data||null,new Promise((e,s)=>{200===this._xhr.status&&this._xhr.abort(),this._xhr.open(this.type,this.url),this._headers=this.settings.headers||[this._defaults.contentType],this._xhr.onload=e,this._xhr.onerror=s,this._xhr.send(t)}).then(t=>(this.emit("xhr:resolve",{name:"xhr:resolve",data:t.currentTarget}),t)).catch(t=>{throw t})}enable(){var t=this.settings;return!this.enabled&&Object.keys(t).length&&(t.type&&(this._type=t.type),t.url&&(this._url=t.url),t.data&&(this._data=t.data||null),this.settings.responseType&&(this._responseType=this._settings.responseType),this._enabled=!0),this}disable(){var t=this.settings;return this.enabled&&Object.keys(t).length&&(delete this._type,delete this._url,delete this._data,delete this._headers,delete this._responseType,this._enabled=!1),this}},MVC.Model=class extends MVC.Base{constructor(){super(...arguments)}get _isSetting(){return this.isSetting}set _isSetting(t){this.isSetting=t}get _changing(){return this.changing=this.changing?this.changing:{},this.changing}get _localStorage(){return this.localStorage}set _localStorage(t){this.localStorage=t}get _defaults(){return this.defaults}set _defaults(t){this.defaults=t}get _schema(){return this._schema}set _schema(t){this.schema=t}get _histiogram(){return this.histiogram||{length:1}}set _histiogram(t){this.histiogram=Object.assign(this._histiogram,t)}get _history(){return this.history=this.history?this.history:[],this.history}set _history(t){Object.keys(t).length&&this._histiogram.length&&(this._history.unshift(this.parse(t)),this._history.splice(this._histiogram.length))}get _db(){var t=localStorage.getItem(this.localStorage.endpoint);return this.db=t||"{}",JSON.parse(this.db)}set _db(t){t=JSON.stringify(t),localStorage.setItem(this.localStorage.endpoint,t)}get _data(){return this.data=this.data?this.data:{},this.data}get _dataEvents(){return this.dataEvents=this.dataEvents?this.dataEvents:{},this.dataEvents}set _dataEvents(t){this.dataEvents=MVC.Utils.addPropertiesToObject(t,this._dataEvents)}get _dataCallbacks(){return this.dataCallbacks=this.dataCallbacks?this.dataCallbacks:{},this.dataCallbacks}set _dataCallbacks(t){this.dataCallbacks=MVC.Utils.addPropertiesToObject(t,this._dataCallbacks)}get _services(){return this.services=this.services?this.services:{},this.services}set _services(t){this.services=MVC.Utils.addPropertiesToObject(t,this._services)}get _serviceEvents(){return this.serviceEvents=this.serviceEvents?this.serviceEvents:{},this.serviceEvents}set _serviceEvents(t){this.serviceEvents=MVC.Utils.addPropertiesToObject(t,this._serviceEvents)}get _serviceCallbacks(){return this.serviceCallbacks=this.serviceCallbacks?this.serviceCallbacks:{},this.serviceCallbacks}set _serviceCallbacks(t){this.serviceCallbacks=MVC.Utils.addPropertiesToObject(t,this._serviceCallbacks)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}enableServiceEvents(){MVC.Utils.bindEventsToTargetObjects(this.serviceEvents,this.services,this.serviceCallbacks)}disableServiceEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.serviceEvents,this.services,this.serviceCallbacks)}enableDataEvents(){MVC.Utils.bindEventsToTargetObjects(this.dataEvents,this,this.dataCallbacks)}disableDataEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.dataEvents,this,this.dataCallbacks)}setDefaults(){var t={};this.defaults&&Object.assign(t,this.defaults),this.localStorage&&Object.assign(t,this._db),Object.keys(t)&&this.set(t)}get(){switch(arguments.length){case 0:return this.data;case 1:var t=arguments[0];return this.data[t]}}set(){switch(this._history=this.parse(),arguments.length){case 1:this._isSetting=!0;var t=Object.entries(arguments[0]);t.forEach((e,s)=>{var[i,r]=e;s===t.length-1&&(this._isSetting=!1),this._changing[i]=r,this.setDataProperty(i,r),this.localStorage&&this.setDB(i,r)}),delete this.changing;break;case 2:var e=arguments[0],s=arguments[1];this.setDataProperty(e,s),this.localStorage&&this.setDB(e,s)}return this}unset(){switch(this._history=this.parse(),arguments.length){case 0:for(var t of Object.keys(this._data))this.unsetDataProperty(t);break;case 1:var e=arguments[0];this.unsetDataProperty(e)}return this}setDB(){var t=this._db;switch(arguments.length){case 1:Object.entries(arguments[0]).forEach(e=>{var[s,i]=e;t[s]=i});break;case 2:var e=arguments[0],s=arguments[1];t[e]=s}this._db=t}unsetDB(){switch(arguments.length){case 0:delete this._db;break;case 1:var t=this._db;delete t[arguments[0]],this._db=t}}setDataProperty(t,e){if(!this._data["_".concat(t)]){var s=this;Object.defineProperties(this._data,{["_".concat(t)]:{configurable:!0,get(){return this[t]},set(e){this[t]=e;var i=["set",":",t].join("");s.emit(i,{name:i,data:{key:t,value:e}},s),s._isSetting||(Object.values(s._changing).length?s.emit("set",{name:"set",data:s._changing}):s.emit("set",{name:"set",data:{key:t,value:e}},s))}}})}this._data["_".concat(t)]=e}unsetDataProperty(t){var e=["unset",":",t].join(""),s=this._data[t];delete this._data["_".concat(t)],delete this._data[t],this.emit(e,{name:e,data:{key:t,value:s}}),this.emit("unset",{name:"unset",data:{key:t,value:s}})}parse(t){return t=t||this._data,JSON.parse(JSON.stringify(Object.assign({},t)))}enable(){this.settings&&!this.enabled&&(this.settings.localStorage&&(this._localStorage=this.settings.localStorage),this.settings.histiogram&&(this._histiogram=this.settings.histiogram),this.settings.emitters&&(this._emitters=this.settings.emitters),this.settings.services&&(this._services=this.settings.services),this.settings.serviceCallbacks&&(this._serviceCallbacks=this.settings.serviceCallbacks),this.settings.serviceEvents&&(this._serviceEvents=this.settings.serviceEvents),this.settings.data&&this.set(this.settings.data),this.settings.dataCallbacks&&(this._dataCallbacks=this.settings.dataCallbacks),this.settings.dataEvents&&(this._dataEvents=this.settings.dataEvents),this.settings.schema&&(this._schema=this.settings.schema),this.settings.defaults&&(this._defaults=this.settings.defaults),this.services&&this.serviceEvents&&this.serviceCallbacks&&this.enableServiceEvents(),this.dataEvents&&this.dataCallbacks&&this.enableDataEvents(),this._enabled=!0)}disable(){this.settings&&!this.enabled&&(this.services&&this.serviceEvents&&this.serviceCallbacks&&this.disableServiceEvents(),this.dataEvents&&this.dataCallbacks&&this.disableDataEvents(),delete this._localStorage,delete this._histiogram,delete this._services,delete this._serviceCallbacks,delete this._serviceEvents,delete this._data,delete this._dataCallbacks,delete this._dataEvents,delete this._schema,delete this._emitters,this._enabled=!1)}},MVC.Emitter=class extends MVC.Model{constructor(){super(...arguments),this.settings&&this.settings.name&&(this._name=this.settings.name)}get _name(){return this.name}set _name(t){this.name=t}emission(){var t={name:this.name,data:this.data};return this.emit(this.name,t),t}},MVC.Emitters={},MVC.Emitters.Navigate=class extends MVC.Emitter{constructor(){super(...arguments),this.addSettings(),this.enable()}addSettings(){this._name="navigate",this._schema={oldURL:String,newURL:String,currentRoute:String,currentController:String}}},MVC.View=class extends MVC.Base{constructor(){super(...arguments)}get _elementName(){return this._element.tagName}set _elementName(t){this._element||(this._element=document.createElement(t))}get _element(){return this.element}set _element(t){t instanceof HTMLElement||t instanceof Document?this.element=t:"string"==typeof t&&(this.element=document.querySelector(t)),this.elementObserver.observe(this.element,{subtree:!0,childList:!0})}get _attributes(){return this._element.attributes}set _attributes(t){for(var[e,s]of Object.entries(t))void 0===s?this._element.removeAttribute(e):this._element.setAttribute(e,s)}get _ui(){return this.ui=this.ui?this.ui:{},this.ui}set _ui(t){for(var[e,s]of(this._ui.$element||(this._ui.$element=this.element),Object.entries(t)))"string"==typeof s?this._ui[e]=this._element.querySelectorAll(s):(s instanceof HTMLElement||s instanceof Document)&&(this._ui[e]=s)}get _uiEvents(){return this.uiEvents}set _uiEvents(t){this.uiEvents=t}get _uiCallbacks(){return this.uiCallbacks=this.uiCallbacks?this.uiCallbacks:{},this.uiCallbacks}set _uiCallbacks(t){this.uiCallbacks=MVC.Utils.addPropertiesToObject(t,this._uiCallbacks)}get _observerCallbacks(){return this.observerCallbacks=this.observerCallbacks?this.observerCallbacks:{},this.observerCallbacks}set _observerCallbacks(t){this.observerCallbacks=MVC.Utils.addPropertiesToObject(t,this._observerCallbacks)}get elementObserver(){return this._elementObserver=this._elementObserver?this._elementObserver:new MutationObserver(this.elementObserve.bind(this)),this._elementObserver}get _insert(){return this.insert}set _insert(t){this.insert=t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _templates(){return this.templates=this.templates?this.templates:{},this.templates}set _templates(t){this.templates=MVC.Utils.addPropertiesToObject(t,this._templates)}elementObserve(t,e){for(var[s,i]of Object.entries(t))switch(i.type){case"childList":for(var r of["addedNodes","removedNodes"])i[r].length&&this.resetUI()}}autoInsert(){this.insert&&document.querySelectorAll(this.insert.element).forEach(t=>{t.insertAdjacentElement(this.insert.method,this.element)})}autoRemove(){this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element)}enableElement(t){(t=t||this.settings).elementName&&(this._elementName=t.elementName),t.element&&(this._element=t.element),t.attributes&&(this._attributes=t.attributes),t.templates&&(this._templates=t.templates),t.insert&&(this._insert=t.insert)}disableElement(t){t=t||this.settings,this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element),this.element&&delete this.element,this.attributes&&delete this.attributes,this.templates&&delete this.templates,this.insert&&delete this.insert}resetUI(){this.disableUI(),this.enableUI()}enableUI(t){(t=t||this.settings).ui&&(this._ui=t.ui),t.uiCallbacks&&(this._uiCallbacks=t.uiCallbacks),t.uiEvents&&(this._uiEvents=t.uiEvents,this.enableUIEvents())}disableUI(t){(t=t||this.settings).uiEvents&&(this.disableUIEvents(),delete this._uiEvents),delete this.uiEvents,delete this.ui,delete this.uiCallbacks}enableUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.bindEventsToTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}disableUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.unbindEventsFromTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}enableEmitters(){this.settings.emitters&&(this._emitters=this.settings.emitters)}disableEmitters(){this._emitters&&delete this._emitters}enable(){var t=this.settings;if(t&&!this._enabled)return this.enableEmitters(),this.enableElement(t),this.enableUI(t),this._enabled=!0,this}disable(){var t=this.settings;if(t&&this._enabled)return this.disableUI(t),this.disableElement(t),this.disableEmitters(),this._enabled=!1,thiss}},MVC.Controller=class extends MVC.Base{constructor(){super(...arguments)}get _emitterCallbacks(){return this.emitterCallbacks=this.emitterCallbacks?this.emitterCallbacks:{},this.emitterCallbacks}set _emitterCallbacks(t){this.emitterCallbacks=MVC.Utils.addPropertiesToObject(t,this._emitterCallbacks)}get _modelCallbacks(){return this.modelCallbacks=this.modelCallbacks?this.modelCallbacks:{},this.modelCallbacks}set _modelCallbacks(t){this.modelCallbacks=MVC.Utils.addPropertiesToObject(t,this._modelCallbacks)}get _viewCallbacks(){return this.viewCallbacks=this.viewCallbacks?this.viewCallbacks:{},this.viewCallbacks}set _viewCallbacks(t){this.viewCallbacks=MVC.Utils.addPropertiesToObject(t,this._viewCallbacks)}get _controllerCallbacks(){return this.controllerCallbacks=this.controllerCallbacks?this.controllerCallbacks:{},this.controllerCallbacks}set _controllerCallbacks(t){this.controllerCallbacks=MVC.Utils.addPropertiesToObject(t,this._controllerCallbacks)}get _models(){return this.models=this.models?this.models:{},this.models}set _models(t){this.models=MVC.Utils.addPropertiesToObject(t,this._models)}get _views(){return this.views=this.views?this.views:{},this.views}set _views(t){this.views=MVC.Utils.addPropertiesToObject(t,this._views)}get _controllers(){return this.controllers=this.controllers?this.controllers:{},this.controllers}set _controllers(t){this.controllers=MVC.Utils.addPropertiesToObject(t,this._controllers)}get _routers(){return this.routers=this.routers?this.routers:{},this.routers}set _routers(t){this.routers=MVC.Utils.addPropertiesToObject(t,this._routers)}get _routerEvents(){return this.routerEvents=this.routerEvents?this.routerEvents:{},this.routerEvents}set _routerEvents(t){this.routerEvents=MVC.Utils.addPropertiesToObject(t,this._routerEvents)}get _routerCallbacks(){return this.routerCallbacks=this.routerCallbacks?this.routerCallbacks:{},this.routerCallbacks}set _routerCallbacks(t){this.routerCallbacks=MVC.Utils.addPropertiesToObject(t,this._routerCallbacks)}get _emitterEvents(){return this.emitterEvents=this.emitterEvents?this.emitterEvents:{},this.emitterEvents}set _emitterEvents(t){this.emitterEvents=MVC.Utils.addPropertiesToObject(t,this._emitterEvents)}get _modelEvents(){return this.modelEvents=this.modelEvents?this.modelEvents:{},this.modelEvents}set _modelEvents(t){this.modelEvents=MVC.Utils.addPropertiesToObject(t,this._modelEvents)}get _viewEvents(){return this.viewEvents=this.viewEvents?this.viewEvents:{},this.viewEvents}set _viewEvents(t){this.viewEvents=MVC.Utils.addPropertiesToObject(t,this._viewEvents)}get _controllerEvents(){return this.controllerEvents=this.controllerEvents?this.controllerEvents:{},this.controllerEvents}set _controllerEvents(t){this.controllerEvents=MVC.Utils.addPropertiesToObject(t,this._controllerEvents)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}enableModelEvents(){MVC.Utils.bindEventsToTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}disableModelEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}enableViewEvents(){MVC.Utils.bindEventsToTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}disableViewEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}enableControllerEvents(){MVC.Utils.bindEventsToTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}disableControllerEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}enableEmitterEvents(){MVC.Utils.bindEventsToTargetObjects(this.emitterEvents,this.emitters,this.emitterCallbacks)}disableEmitterEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.emitterEvents,this.emitters,this.emitterCallbacks)}enableRouterEvents(){MVC.Utils.bindEventsToTargetObjects(this.routerEvents,this.routers,this.routerCallbacks)}disableRouterEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.routerEvents,this.routers,this.routerCallbacks)}enable(){var t=this.settings;t&&!this.enabled&&(t.modelCallbacks&&(this._modelCallbacks=t.modelCallbacks),t.viewCallbacks&&(this._viewCallbacks=t.viewCallbacks),t.controllerCallbacks&&(this._controllerCallbacks=t.controllerCallbacks),t.emitterCallbacks&&(this._emitterCallbacks=t.emitterCallbacks),t.routerCallbacks&&(this._routerCallbacks=t.routerCallbacks),t.models&&(this._models=t.models),t.views&&(this._views=t.views),t.controllers&&(this._controllers=t.controllers),t.emitters&&(this._emitters=t.emitters),t.routers&&(this._routers=t.routers),t.modelEvents&&(this._modelEvents=t.modelEvents),t.viewEvents&&(this._viewEvents=t.viewEvents),t.controllerEvents&&(this._controllerEvents=t.controllerEvents),t.emitterEvents&&(this._emitterEvents=t.emitterEvents),t.routerEvents&&(this._routerEvents=t.routerEvents),this.modelEvents&&this.models&&this.modelCallbacks&&this.enableModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.enableViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.enableControllerEvents(),this.routerEvents&&this.routers&&this.routerCallbacks&&this.enableRouterEvents(),this.emitterEvents&&this.emitters&&this.emitterCallbacks&&this.enableEmitterEvents(),this._enabled=!0)}reset(){this.disable(),this.enable()}disable(){this.settings&&this.enabled&&(this.modelEvents&&this.models&&this.modelCallbacks&&this.disableModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.disableViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.disableControllerEvents()),this.routerEvents&&this.routers&&this.routerCallbacks&&this.disableRouterEvents(),this.emitterEvents&&this.emitters&&this.emitterCallbacks&&(this.disableEmitterEvents(),delete this._modelCallbacks,delete this._viewCallbacks,delete this._controllerCallbacks,delete this._emitterCallbacks,delete this._routerCallbacks,delete this._models,delete this._views,delete this._controllers,delete this._emitters,delete this._routers,delete this._routerEvents,delete this._modelEvents,delete this._viewEvents,delete this._controllerEvents,delete this._emitterEvents,this._enabled=!1)}},MVC.Router=class extends MVC.Base{constructor(){super(...arguments)}get protocol(){return window.location.protocol}get hostname(){return window.location.hostname}get port(){return window.location.port}get path(){return window.location.pathname}get hash(){var t=window.location.href,e=t.indexOf("#");if(e>-1){var s,i=t.indexOf("?"),r=e+1;return s=i>-1?e>i?t.length:i:t.length,(t=t.slice(r,s)).length?t:null}return null}get params(){var t=window.location.href,e=t.indexOf("?");if(e>-1){var s,i=t.indexOf("#"),r=e+1;return s=i>-1?e>i?t.length:i:t.length,(t=t.slice(r,s)).length?t:null}return null}get _routeData(){var t={location:{},controller:{}},e=this.path.split("/").filter(t=>t.length);e=e.length?e:["/"];var s=this.hash,i=s?s.split("/").filter(t=>t.length):null,r=this.params,a=r?MVC.Utils.paramsToObject(r):null;this.protocol&&(t.location.protocol=this.protocol),this.hostname&&(t.location.hostname=this.hostname),this.port&&(t.location.port=this.port),this.path&&(t.location.path=this.path),s&&i&&(i=i.length?i:["/"],t.location.hash={path:s,fragments:i}),r&&a&&(t.location.params={path:r,data:a}),t.location.path={name:this.path,fragments:e},t.location.currentURL=this.currentURL;var n=this._routeControllerData;return t.location=Object.assign(t.location,n.location),t.controller=n.controller,this.routeData=t,this.routeData}get _routeControllerData(){var t={location:{}};return Object.entries(this.routes).forEach(e=>{var[s,i]=e,r=this.path.split("/").filter(t=>t.length);r=r.length?r:["/"];var a,n=s.split("/").filter((t,e)=>t.length);if(n=n.length?n:["/"],r.length&&r.length===n.length)return n.filter((e,l)=>{if(void 0===a||!0===a){if(":"===e[0]){var h=e.replace(":","");l===r.length-1&&(t.location.currentIDKey=h),t.location[h]=r[l],e=this.fragmentIDRegExp}else e=e.replace(new RegExp("/","gi"),"\\/"),e=this.routeFragmentNameRegExp(e);if(!0===(a=e.test(r[l]))&&l===r.length-1)return t.location.route={name:s,fragments:n},t.controller=i,i}})[0]}),t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _routes(){return this.routes=this.routes?this.routes:{},this.routes}set _routes(t){this.routes=MVC.Utils.addPropertiesToObject(t,this._routes)}get _controller(){return this.controller}set _controller(t){this.controller=t}get _previousURL(){return this.previousURL}set _previousURL(t){this.previousURL=t}get _currentURL(){return this.currentURL}set _currentURL(t){this.currentURL&&(this._previousURL=this.currentURL),this.currentURL=t}get fragmentIDRegExp(){return new RegExp(/^([0-9A-Z\?\=\,\.\*\-\_\'\"\^\%\$\#\@\!\~\(\)\{\}\&\<\>\\\/])*$/,"gi")}routeFragmentNameRegExp(t){return new RegExp("^".concat(t,"$"))}enable(){return this.enabled||(this.enableEmitters(),this.enableEvents(),this.enableRoutes(),this._enabled=!0),this}disable(){this.enabled&&(this.disableEvents(),this.disableRoutes(),this.disableEmitters(),this._enabled=!1)}enableRoutes(){return this.settings.controller&&(this._controller=this.settings.controller),this._routes=Object.entries(this.settings.routes).reduce((t,e,s,i)=>{var[r,a]=e;return t[r]=Object.assign(a,{callback:this.controller[a.callback].bind(this.controller)}),t},{}),this}enableEmitters(){return this._emitters={navigateEmitter:new MVC.Emitters.Navigate},this}disableEmitters(){delete this._emitters.navigateEmitter}disableRoutes(){delete this._routes,delete this._controller}enableEvents(){return window.addEventListener("hashchange",this.routeChange.bind(this)),this}disableEvents(){window.removeEventListener("hashchange",this.routeChange.bind(this))}routeChange(){this._currentURL=window.location.href;var t=this._routeData;if(t.controller){var e=this.emitters.navigateEmitter;this.previousURL&&(t.previousURL=this.previousURL),e.unset().set(t),this.emit(e.name,e.emission()),t.controller.callback(e.emission())}return this}navigate(t){window.location.href=t}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1WQy5qcyIsIkNvbnN0YW50cy5qcyIsIkV2ZW50cy5qcyIsIk9wZXJhdG9ycy5qcyIsImluZGV4LmpzIiwiaXMuanMiLCJ0eXBlT2YuanMiLCJhZGRQcm9wZXJ0aWVzVG9PYmplY3QuanMiLCJvYmplY3RRdWVyeS5qcyIsInRvZ2dsZUV2ZW50c0ZvclRhcmdldE9iamVjdHMuanMiLCJ2YWxpZGF0ZURhdGFTY2hlbWEuanMiLCJDaGFubmVscy5qcyIsIkNoYW5uZWwuanMiLCJCYXNlLmpzIiwiU2VydmljZS5qcyIsIk1vZGVsLmpzIiwiRW1pdHRlci5qcyIsIk5hdmlnYXRlLmpzIiwiVmlldy5qcyIsIkNvbnRyb2xsZXIuanMiLCJSb3V0ZXIuanMiXSwibmFtZXMiOlsiTVZDIiwiQ29uc3RhbnRzIiwiQ09OU1QiLCJFdmVudHMiLCJFViIsIk9wZXJhdG9ycyIsIkNvbXBhcmlzb24iLCJFUSIsIlNURVEiLCJOT0VRIiwiU1ROT0VRIiwiR1QiLCJMVCIsIkdURSIsIkxURSIsIlN0YXRlbWVudCIsIkFORCIsIk9SIiwiY29uc29sZSIsImxvZyIsIlV0aWxzIiwiaXNBcnJheSIsIm9iamVjdCIsIkFycmF5IiwiaXNPYmplY3QiLCJ0eXBlT2YiLCJ2YWx1ZSIsInZhbHVlQSIsInVuZGVmaW5lZCIsImlzSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImRhdGEiLCJhZGRQcm9wZXJ0aWVzVG9PYmplY3QiLCJ0YXJnZXRPYmplY3QiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm9wZXJ0aWVzIiwiX3Byb3BlcnR5TmFtZSIsIl9wcm9wZXJ0eVZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsInByb3BlcnR5TmFtZSIsInByb3BlcnR5VmFsdWUiLCJvYmplY3RRdWVyeSIsInN0cmluZyIsImNvbnRleHQiLCJzdHJpbmdEYXRhIiwicGFyc2VOb3RhdGlvbiIsInNwbGljZSIsInJlZHVjZSIsImZyYWdtZW50IiwiZnJhZ21lbnRJbmRleCIsImZyYWdtZW50cyIsInByb3BlcnR5S2V5IiwicGFyc2VGcmFnbWVudCIsIm1hdGNoIiwiY29uY2F0IiwiY2hhckF0Iiwic2xpY2UiLCJzcGxpdCIsIlJlZ0V4cCIsInRvZ2dsZUV2ZW50c0ZvclRhcmdldE9iamVjdHMiLCJ0b2dnbGVNZXRob2QiLCJldmVudHMiLCJ0YXJnZXRPYmplY3RzIiwiY2FsbGJhY2tzIiwiZXZlbnRTZXR0aW5ncyIsImV2ZW50Q2FsbGJhY2tOYW1lIiwiZXZlbnREYXRhIiwiZXZlbnRUYXJnZXRTZXR0aW5ncyIsImV2ZW50TmFtZSIsImV2ZW50VGFyZ2V0cyIsImV2ZW50VGFyZ2V0TmFtZSIsImV2ZW50VGFyZ2V0IiwiZXZlbnRNZXRob2ROYW1lIiwiTm9kZUxpc3QiLCJEb2N1bWVudCIsImV2ZW50Q2FsbGJhY2siLCJfZXZlbnRUYXJnZXQiLCJiaW5kRXZlbnRzVG9UYXJnZXRPYmplY3RzIiwidGhpcyIsInVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzIiwidmFsaWRhdGVEYXRhU2NoZW1hIiwic2NoZW1hIiwidmFsaWRhdGlvblN1bW1hcnkiLCJmb3JFYWNoIiwiX3JlZiIsInNjaGVtYUtleSIsInNjaGVtYVNldHRpbmdzIiwidmFsaWRhdGlvbiIsImtleSIsInJlcXVpcmVkIiwidHlwZSIsImV2YWx1YXRpb25zIiwidmFsaWRhdGlvbkV2YWx1YXRpb25zIiwiZXZhbHVhdGlvblJlc3VsdHMiLCJtZXNzYWdlcyIsImFzc2lnbiIsInBhc3MiLCJmYWlsIiwiY29tcGFyYXRvciIsInJlc3VsdCIsIm1lc3NhZ2UiLCJfZXZhbHVhdGlvbnMiLCJldmFsdWF0aW9uIiwiZXZhbHVhdGlvbkluZGV4IiwicHVzaCIsInZhbHVlQ29tcGFyaXNvbiIsImNvbXBhcmVWYWx1ZXMiLCJjb21wYXJpc29uIiwicmVzdWx0cyIsImN1cnJlbnRFdmFsdWF0aW9uIiwic3RhdGVtZW50IiwicHJldmlvdXNFdmFsdWF0aW9uQ29tcGFyaXNvblZhbHVlIiwic3RhdGVtZW50Q29tcGFyaXNvbiIsImNvbXBhcmVTdGF0ZW1lbnRzIiwiZXZhbHVhdGlvblZhbGlkYXRpb24iLCJvcGVyYXRvciIsImV2YWx1YXRpb25SZXN1bHQiLCJbb2JqZWN0IE9iamVjdF0iLCJfZXZlbnRzIiwibmFtZSIsImV2ZW50Q2FsbGJhY2tzIiwiZXZlbnRDYWxsYmFja0dyb3VwIiwiZXZlbnRDYWxsYmFja0dyb3VwTmFtZSIsInZhbHVlcyIsIkNoYW5uZWxzIiwiX2NoYW5uZWxzIiwiY2hhbm5lbHMiLCJjaGFubmVsTmFtZSIsIkNoYW5uZWwiLCJfcmVzcG9uc2VzIiwicmVzcG9uc2VzIiwicmVzcG9uc2VOYW1lIiwicmVzcG9uc2VDYWxsYmFjayIsInJlc3BvbnNlIiwicmVxdWVzdERhdGEiLCJfcmVzcG9uc2VOYW1lIiwia2V5cyIsIkJhc2UiLCJzZXR0aW5ncyIsImNvbmZpZ3VyYXRpb24iLCJzdXBlciIsIl9jb25maWd1cmF0aW9uIiwiX3NldHRpbmdzIiwiX2VtaXR0ZXJzIiwiZW1pdHRlcnMiLCJTZXJ2aWNlIiwiX2RlZmF1bHRzIiwiZGVmYXVsdHMiLCJjb250ZW50VHlwZSIsIkNvbnRlbnQtVHlwZSIsInJlc3BvbnNlVHlwZSIsIl9yZXNwb25zZVR5cGVzIiwiX3Jlc3BvbnNlVHlwZSIsIl94aHIiLCJmaW5kIiwicmVzcG9uc2VUeXBlSXRlbSIsIl90eXBlIiwiX3VybCIsInVybCIsIl9oZWFkZXJzIiwiaGVhZGVycyIsImhlYWRlciIsInNldFJlcXVlc3RIZWFkZXIiLCJfZGF0YSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiX2VuYWJsZWQiLCJlbmFibGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzdGF0dXMiLCJhYm9ydCIsIm9wZW4iLCJvbmxvYWQiLCJvbmVycm9yIiwic2VuZCIsInRoZW4iLCJlbWl0IiwiY3VycmVudFRhcmdldCIsImNhdGNoIiwiZXJyb3IiLCJNb2RlbCIsIl9pc1NldHRpbmciLCJpc1NldHRpbmciLCJfY2hhbmdpbmciLCJjaGFuZ2luZyIsIl9sb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJfc2NoZW1hIiwiX2hpc3Rpb2dyYW0iLCJoaXN0aW9ncmFtIiwiX2hpc3RvcnkiLCJoaXN0b3J5IiwidW5zaGlmdCIsInBhcnNlIiwiX2RiIiwiZGIiLCJnZXRJdGVtIiwiZW5kcG9pbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic2V0SXRlbSIsIl9kYXRhRXZlbnRzIiwiZGF0YUV2ZW50cyIsIl9kYXRhQ2FsbGJhY2tzIiwiZGF0YUNhbGxiYWNrcyIsIl9zZXJ2aWNlcyIsInNlcnZpY2VzIiwiX3NlcnZpY2VFdmVudHMiLCJzZXJ2aWNlRXZlbnRzIiwiX3NlcnZpY2VDYWxsYmFja3MiLCJzZXJ2aWNlQ2FsbGJhY2tzIiwic2V0IiwiX2FyZ3VtZW50cyIsImluZGV4Iiwic2V0RGF0YVByb3BlcnR5Iiwic2V0REIiLCJfa2V5IiwidW5zZXREYXRhUHJvcGVydHkiLCJfcmVmMiIsImRlZmluZVByb3BlcnRpZXMiLCJjb25maWd1cmFibGUiLCJzZXRWYWx1ZUV2ZW50TmFtZSIsImpvaW4iLCJ1bnNldFZhbHVlRXZlbnROYW1lIiwidW5zZXRWYWx1ZSIsImVuYWJsZVNlcnZpY2VFdmVudHMiLCJlbmFibGVEYXRhRXZlbnRzIiwiZGlzYWJsZVNlcnZpY2VFdmVudHMiLCJkaXNhYmxlRGF0YUV2ZW50cyIsIkVtaXR0ZXIiLCJfbmFtZSIsIkVtaXR0ZXJzIiwiTmF2aWdhdGUiLCJhZGRTZXR0aW5ncyIsImVuYWJsZSIsIm9sZFVSTCIsIlN0cmluZyIsIm5ld1VSTCIsImN1cnJlbnRSb3V0ZSIsImN1cnJlbnRDb250cm9sbGVyIiwiVmlldyIsIl9lbGVtZW50TmFtZSIsIl9lbGVtZW50IiwidGFnTmFtZSIsImVsZW1lbnROYW1lIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJlbGVtZW50T2JzZXJ2ZXIiLCJvYnNlcnZlIiwic3VidHJlZSIsImNoaWxkTGlzdCIsIl9hdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImF0dHJpYnV0ZUtleSIsImF0dHJpYnV0ZVZhbHVlIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiX3VpIiwidWkiLCJ1aUtleSIsInVpVmFsdWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX3VpRXZlbnRzIiwidWlFdmVudHMiLCJfdWlDYWxsYmFja3MiLCJ1aUNhbGxiYWNrcyIsIl9vYnNlcnZlckNhbGxiYWNrcyIsIm9ic2VydmVyQ2FsbGJhY2tzIiwiX2VsZW1lbnRPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJlbGVtZW50T2JzZXJ2ZSIsImJpbmQiLCJfaW5zZXJ0IiwiaW5zZXJ0IiwiX3RlbXBsYXRlcyIsInRlbXBsYXRlcyIsIm11dGF0aW9uUmVjb3JkTGlzdCIsIm9ic2VydmVyIiwibXV0YXRpb25SZWNvcmRJbmRleCIsIm11dGF0aW9uUmVjb3JkIiwibXV0YXRpb25SZWNvcmRDYXRlZ29yeSIsInJlc2V0VUkiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJtZXRob2QiLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJkaXNhYmxlVUkiLCJlbmFibGVVSSIsImVuYWJsZVVJRXZlbnRzIiwiZGlzYWJsZVVJRXZlbnRzIiwiZW5hYmxlRW1pdHRlcnMiLCJlbmFibGVFbGVtZW50IiwiZGlzYWJsZUVsZW1lbnQiLCJkaXNhYmxlRW1pdHRlcnMiLCJ0aGlzcyIsIkNvbnRyb2xsZXIiLCJfZW1pdHRlckNhbGxiYWNrcyIsImVtaXR0ZXJDYWxsYmFja3MiLCJfbW9kZWxDYWxsYmFja3MiLCJtb2RlbENhbGxiYWNrcyIsIl92aWV3Q2FsbGJhY2tzIiwidmlld0NhbGxiYWNrcyIsIl9jb250cm9sbGVyQ2FsbGJhY2tzIiwiY29udHJvbGxlckNhbGxiYWNrcyIsIl9tb2RlbHMiLCJtb2RlbHMiLCJfdmlld3MiLCJ2aWV3cyIsIl9jb250cm9sbGVycyIsImNvbnRyb2xsZXJzIiwiX3JvdXRlcnMiLCJyb3V0ZXJzIiwiX3JvdXRlckV2ZW50cyIsInJvdXRlckV2ZW50cyIsIl9yb3V0ZXJDYWxsYmFja3MiLCJyb3V0ZXJDYWxsYmFja3MiLCJfZW1pdHRlckV2ZW50cyIsImVtaXR0ZXJFdmVudHMiLCJfbW9kZWxFdmVudHMiLCJtb2RlbEV2ZW50cyIsIl92aWV3RXZlbnRzIiwidmlld0V2ZW50cyIsIl9jb250cm9sbGVyRXZlbnRzIiwiY29udHJvbGxlckV2ZW50cyIsImVuYWJsZU1vZGVsRXZlbnRzIiwiZW5hYmxlVmlld0V2ZW50cyIsImVuYWJsZUNvbnRyb2xsZXJFdmVudHMiLCJlbmFibGVSb3V0ZXJFdmVudHMiLCJlbmFibGVFbWl0dGVyRXZlbnRzIiwiZGlzYWJsZSIsImRpc2FibGVNb2RlbEV2ZW50cyIsImRpc2FibGVWaWV3RXZlbnRzIiwiZGlzYWJsZUNvbnRyb2xsZXJFdmVudHMiLCJkaXNhYmxlUm91dGVyRXZlbnRzIiwiZGlzYWJsZUVtaXR0ZXJFdmVudHMiLCJSb3V0ZXIiLCJwcm90b2NvbCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aCIsInBhdGhuYW1lIiwiaGFzaCIsImhyZWYiLCJoYXNoSW5kZXgiLCJpbmRleE9mIiwic2xpY2VTdG9wIiwicGFyYW1JbmRleCIsInNsaWNlU3RhcnQiLCJwYXJhbXMiLCJfcm91dGVEYXRhIiwicm91dGVEYXRhIiwiY29udHJvbGxlciIsImZpbHRlciIsImhhc2hGcmFnbWVudHMiLCJwYXJhbURhdGEiLCJwYXJhbXNUb09iamVjdCIsImN1cnJlbnRVUkwiLCJyb3V0ZUNvbnRyb2xsZXJEYXRhIiwiX3JvdXRlQ29udHJvbGxlckRhdGEiLCJyb3V0ZXMiLCJyb3V0ZVBhdGgiLCJyb3V0ZVNldHRpbmdzIiwicGF0aEZyYWdtZW50cyIsInJvdXRlRnJhZ21lbnRzIiwicm91dGVGcmFnbWVudCIsInJvdXRlRnJhZ21lbnRJbmRleCIsImN1cnJlbnRJREtleSIsInJlcGxhY2UiLCJmcmFnbWVudElEUmVnRXhwIiwicm91dGVGcmFnbWVudE5hbWVSZWdFeHAiLCJ0ZXN0Iiwicm91dGUiLCJfcm91dGVzIiwiX2NvbnRyb2xsZXIiLCJfcHJldmlvdXNVUkwiLCJwcmV2aW91c1VSTCIsIl9jdXJyZW50VVJMIiwiZW5hYmxlRXZlbnRzIiwiZW5hYmxlUm91dGVzIiwiZGlzYWJsZUV2ZW50cyIsImRpc2FibGVSb3V0ZXMiLCJyb3V0ZUluZGV4Iiwib3JpZ2luYWxSb3V0ZXMiLCJjYWxsYmFjayIsIm5hdmlnYXRlRW1pdHRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyb3V0ZUNoYW5nZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1bnNldCIsImVtaXNzaW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxJQUFNQSxLQUFPLEdBQ2pCQSxJQUFJQyxVQUFZLEdBQ2hCRCxJQUFJRSxNQUFRRixJQUFJQyxVQUNoQkQsSUFBSUMsVUFBVUUsT0FBUyxHQUN2QkgsSUFBSUUsTUFBTUUsR0FBS0osSUFBSUMsVUFBVUUsT0FDN0JILElBQUlDLFVBQVVJLFVBQVksR0FDMUJMLElBQUlFLE1BQU1HLFVBQVksR0FDdEJMLElBQUlFLE1BQU1HLFVBQVVDLFdBQWEsQ0FDL0JDLEdBQUksS0FDSkMsS0FBTSxPQUNOQyxLQUFNLE9BQ05DLE9BQVEsU0FDUkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLElBQUssTUFDTEMsSUFBSyxPQUVQZCxJQUFJRSxNQUFNRyxVQUFVVSxVQUFZLENBQzlCQyxJQUFLLE1BQ0xDLEdBQUksTUFFTkMsUUFBUUMsSUFBSW5CLElBQUlFLE9BQ2hCRixJQUFJb0IsTUFBUSxHQUNacEIsSUFBSW9CLE1BQU1DLFFBQVUsU0FBaUJDLEdBQ25DLE9BQU9DLE1BQU1GLFFBQVFDLElBR3ZCdEIsSUFBSW9CLE1BQU1JLFNBQVcsU0FBa0JGLEdBQ3JDLE9BQVFDLE1BQU1GLFFBQVFDLElBQXNCLE9BQVhBLEdBQW9DLGlCQUFYQSxHQUc1RHRCLElBQUlvQixNQUFNSyxPQUFTLFNBQWdCQyxHQUNqQyxNQUF5QixpQkFBWEMsT0FBc0IzQixJQUFJb0IsTUFBTUksU0FBU0csUUFBVSxTQUFXM0IsSUFBSW9CLE1BQU1DLFFBQVFNLFFBQVUsUUFBcUIsT0FBWEEsT0FBa0IsWUFB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SUMsRUFBVUMsV0FBWSxDQUN4QixJQUFJaUMsRUFBa0J4VCxLQUFLa0UsU0FBU3NQLGdCQUNoQ3hULEtBQUsrUyxjQUFhekIsRUFBVXlCLFlBQWMvUyxLQUFLK1MsYUFDbkRTLEVBQWdCSSxRQUFRckwsSUFBSStJLEdBQzVCdFIsS0FBS29HLEtBQUtvTixFQUFnQi9RLEtBQU0rUSxFQUFnQkssWUFDaER2QyxFQUFVQyxXQUFXZ0MsU0FBU0MsRUFBZ0JLLFlBR2hELE9BQU83VCxLQUdUdUMsU0FBU29PLEdBQ1BKLE9BQU9DLFNBQVNNLEtBQU9IIiwic291cmNlc0NvbnRlbnQiOlsidmFyIE1WQyA9IE1WQyB8fCB7fVxyXG4iLCJNVkMuQ29uc3RhbnRzID0ge31cbk1WQy5DT05TVCA9IE1WQy5Db25zdGFudHNcbiIsIk1WQy5FdmVudHMgPSBjbGFzcyB7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG4gIGdldCBfZXZlbnRzKCkge1xyXG4gICAgdGhpcy5ldmVudHMgPSAodGhpcy5ldmVudHMpXHJcbiAgICAgID8gdGhpcy5ldmVudHNcclxuICAgICAgOiB7fVxyXG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzXHJcbiAgfVxyXG4gIGV2ZW50Q2FsbGJhY2tzKGV2ZW50TmFtZSkgeyByZXR1cm4gdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gfHwge30gfVxyXG4gIGV2ZW50Q2FsbGJhY2tOYW1lKGV2ZW50Q2FsbGJhY2spIHtcclxuICAgIHJldHVybiAoZXZlbnRDYWxsYmFjay5uYW1lLmxlbmd0aClcclxuICAgICAgPyBldmVudENhbGxiYWNrLm5hbWVcclxuICAgICAgOiAnYW5vbnltb3VzRnVuY3Rpb24nXHJcbiAgfVxyXG4gIGV2ZW50Q2FsbGJhY2tHcm91cChldmVudENhbGxiYWNrcywgZXZlbnRDYWxsYmFja05hbWUpIHtcclxuICAgIHJldHVybiBldmVudENhbGxiYWNrc1tldmVudENhbGxiYWNrTmFtZV0gfHwgW11cclxuICB9XHJcbiAgb24oZXZlbnROYW1lLCBldmVudENhbGxiYWNrKSB7XHJcbiAgICBsZXQgZXZlbnRDYWxsYmFja3MgPSB0aGlzLmV2ZW50Q2FsbGJhY2tzKGV2ZW50TmFtZSlcclxuICAgIGxldCBldmVudENhbGxiYWNrTmFtZSA9IHRoaXMuZXZlbnRDYWxsYmFja05hbWUoZXZlbnRDYWxsYmFjaylcclxuICAgIGxldCBldmVudENhbGxiYWNrR3JvdXAgPSB0aGlzLmV2ZW50Q2FsbGJhY2tHcm91cChldmVudENhbGxiYWNrcywgZXZlbnRDYWxsYmFja05hbWUpXHJcbiAgICBldmVudENhbGxiYWNrR3JvdXAucHVzaChldmVudENhbGxiYWNrKVxyXG4gICAgZXZlbnRDYWxsYmFja3NbZXZlbnRDYWxsYmFja05hbWVdID0gZXZlbnRDYWxsYmFja0dyb3VwXHJcbiAgICB0aGlzLl9ldmVudHNbZXZlbnROYW1lXSA9IGV2ZW50Q2FsbGJhY2tzXHJcbiAgfVxyXG4gIG9mZigpIHtcclxuICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgIGNhc2UgMTpcclxuICAgICAgICB2YXIgZXZlbnROYW1lID0gYXJndW1lbnRzWzBdXHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAyOlxyXG4gICAgICAgIHZhciBldmVudE5hbWUgPSBhcmd1bWVudHNbMF1cclxuICAgICAgICB2YXIgZXZlbnRDYWxsYmFjayA9IGFyZ3VtZW50c1sxXVxyXG4gICAgICAgIHZhciBldmVudENhbGxiYWNrTmFtZSA9IHRoaXMuZXZlbnRDYWxsYmFja05hbWUoZXZlbnRDYWxsYmFjaylcclxuICAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV1bZXZlbnRDYWxsYmFja05hbWVdXHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuICB9XHJcbiAgZW1pdChldmVudE5hbWUsIGV2ZW50RGF0YSkge1xyXG4gICAgbGV0IGV2ZW50Q2FsbGJhY2tzID0gdGhpcy5ldmVudENhbGxiYWNrcyhldmVudE5hbWUpXHJcbiAgICBmb3IobGV0IFtldmVudENhbGxiYWNrR3JvdXBOYW1lLCBldmVudENhbGxiYWNrR3JvdXBdIG9mIE9iamVjdC5lbnRyaWVzKGV2ZW50Q2FsbGJhY2tzKSkge1xyXG4gICAgICBmb3IobGV0IGV2ZW50Q2FsbGJhY2sgb2YgZXZlbnRDYWxsYmFja0dyb3VwKSB7XHJcbiAgICAgICAgbGV0IGFkZGl0aW9uYWxBcmd1bWVudHMgPSBPYmplY3QudmFsdWVzKGFyZ3VtZW50cykuc3BsaWNlKDIpIHx8IFtdXHJcbiAgICAgICAgZXZlbnRDYWxsYmFjayhldmVudERhdGEsIC4uLmFkZGl0aW9uYWxBcmd1bWVudHMpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiTVZDLkNvbnN0YW50cy5PcGVyYXRvcnMgPSB7fVxyXG5NVkMuQ09OU1QuT3BlcmF0b3JzID0ge31cclxuTVZDLkNPTlNULk9wZXJhdG9ycy5Db21wYXJpc29uID0ge1xyXG4gIEVROiAnRVEnLFxyXG4gIFNURVE6ICdTVEVRJyxcclxuICBOT0VROiAnTk9FUScsXHJcbiAgU1ROT0VROiAnU1ROT0VRJyxcclxuICBHVDogJ0dUJyxcclxuICBMVDogJ0xUJyxcclxuICBHVEU6ICdHVEUnLFxyXG4gIExURTogJ0xURScsXHJcbn1cclxuTVZDLkNPTlNULk9wZXJhdG9ycy5TdGF0ZW1lbnQgPSB7XHJcbiAgQU5EOiAnQU5EJyxcclxuICBPUjogJ09SJ1xyXG59XHJcbmNvbnNvbGUubG9nKE1WQy5DT05TVClcclxuIiwiTVZDLkVtaXR0ZXJzID0ge31cclxuIiwiTVZDLlV0aWxzLmlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KG9iamVjdCkgeyByZXR1cm4gQXJyYXkuaXNBcnJheShvYmplY3QpIH1cclxuTVZDLlV0aWxzLmlzT2JqZWN0ID0gZnVuY3Rpb24gaXNPYmplY3Qob2JqZWN0KSB7XHJcbiAgcmV0dXJuIChcclxuICAgICFBcnJheS5pc0FycmF5KG9iamVjdCkgJiZcclxuICAgIG9iamVjdCAhPT0gbnVsbFxyXG4gICkgPyB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0J1xyXG4gICAgOiBmYWxzZVxyXG59XHJcbk1WQy5VdGlscy50eXBlT2YgPSBmdW5jdGlvbiB0eXBlT2YodmFsdWUpIHtcclxuICByZXR1cm4gKHR5cGVvZiB2YWx1ZUEgPT09ICdvYmplY3QnKVxyXG4gICAgPyAoTVZDLlV0aWxzLmlzT2JqZWN0KHZhbHVlQSkpXHJcbiAgICAgID8gJ29iamVjdCdcclxuICAgICAgOiAoTVZDLlV0aWxzLmlzQXJyYXkodmFsdWVBKSlcclxuICAgICAgICA/ICdhcnJheSdcclxuICAgICAgICA6ICh2YWx1ZUEgPT09IG51bGwpXHJcbiAgICAgICAgICA/ICdudWxsJ1xyXG4gICAgICAgICAgOiB1bmRlZmluZWRcclxuICAgIDogdHlwZW9mIHZhbHVlXHJcbn1cclxuTVZDLlV0aWxzLmlzSFRNTEVsZW1lbnQgPSBmdW5jdGlvbiBpc0hUTUxFbGVtZW50KG9iamVjdCkge1xyXG4gIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudFxyXG59XHJcbiIsIk1WQy5VdGlscy50eXBlT2YgPSAgZnVuY3Rpb24gdHlwZU9mKGRhdGEpIHtcclxuICBzd2l0Y2godHlwZW9mIGRhdGEpIHtcclxuICAgIGNhc2UgJ29iamVjdCc6XHJcbiAgICAgIGxldCBfb2JqZWN0XHJcbiAgICAgIGlmKE1WQy5VdGlscy5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgLy8gQXJyYXlcclxuICAgICAgICByZXR1cm4gJ2FycmF5J1xyXG4gICAgICB9IGVsc2UgaWYoXHJcbiAgICAgICAgTVZDLlV0aWxzLmlzT2JqZWN0KGRhdGEpXHJcbiAgICAgICkge1xyXG4gICAgICAgIC8vIE9iamVjdFxyXG4gICAgICAgIHJldHVybiAnb2JqZWN0J1xyXG4gICAgICB9IGVsc2UgaWYoXHJcbiAgICAgICAgZGF0YSA9PT0gbnVsbFxyXG4gICAgICApIHtcclxuICAgICAgICAvLyBOdWxsXHJcbiAgICAgICAgcmV0dXJuICdudWxsJ1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBfb2JqZWN0XHJcbiAgICAgIGJyZWFrXHJcbiAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgY2FzZSAnbnVtYmVyJzpcclxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxyXG4gICAgY2FzZSAndW5kZWZpbmVkJzpcclxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcclxuICAgICAgcmV0dXJuIHR5cGVvZiBkYXRhXHJcbiAgICAgIGJyZWFrXHJcbiAgfVxyXG59XHJcbiIsIk1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QgPSBmdW5jdGlvbiBhZGRQcm9wZXJ0aWVzVG9PYmplY3QoKSB7XHJcbiAgbGV0IHRhcmdldE9iamVjdFxyXG4gIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIGxldCBwcm9wZXJ0aWVzID0gYXJndW1lbnRzWzBdXHJcbiAgICAgIHRhcmdldE9iamVjdCA9IGFyZ3VtZW50c1sxXVxyXG4gICAgICBmb3IobGV0IFtwcm9wZXJ0eU5hbWUsIHByb3BlcnR5VmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BlcnRpZXMpKSB7XHJcbiAgICAgICAgdGFyZ2V0T2JqZWN0W3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eVZhbHVlXHJcbiAgICAgIH1cclxuICAgICAgYnJlYWtcclxuICAgIGNhc2UgMzpcclxuICAgICAgbGV0IHByb3BlcnR5TmFtZSA9IGFyZ3VtZW50c1swXVxyXG4gICAgICBsZXQgcHJvcGVydHlWYWx1ZSA9IGFyZ3VtZW50c1sxXVxyXG4gICAgICB0YXJnZXRPYmplY3QgPSBhcmd1bWVudHNbMl1cclxuICAgICAgdGFyZ2V0T2JqZWN0W3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eVZhbHVlXHJcbiAgICAgIGJyZWFrXHJcbiAgfVxyXG4gIHJldHVybiB0YXJnZXRPYmplY3RcclxufVxyXG4iLCJNVkMuVXRpbHMub2JqZWN0UXVlcnkgPSBmdW5jdGlvbiBvYmplY3RRdWVyeShcclxuICBzdHJpbmcsXHJcbiAgY29udGV4dFxyXG4pIHtcclxuICBsZXQgc3RyaW5nRGF0YSA9IE1WQy5VdGlscy5vYmplY3RRdWVyeS5wYXJzZU5vdGF0aW9uKHN0cmluZylcclxuICBpZihzdHJpbmdEYXRhWzBdID09PSAnQCcpIHN0cmluZ0RhdGEuc3BsaWNlKDAsIDEpXHJcbiAgaWYoIXN0cmluZ0RhdGEubGVuZ3RoKSByZXR1cm4gY29udGV4dFxyXG4gIGNvbnRleHQgPSAoTVZDLlV0aWxzLmlzT2JqZWN0KGNvbnRleHQpKVxyXG4gICAgPyBPYmplY3QuZW50cmllcyhjb250ZXh0KVxyXG4gICAgOiBjb250ZXh0XHJcbiAgcmV0dXJuIHN0cmluZ0RhdGEucmVkdWNlKChvYmplY3QsIGZyYWdtZW50LCBmcmFnbWVudEluZGV4LCBmcmFnbWVudHMpID0+IHtcclxuICAgIGxldCBwcm9wZXJ0aWVzID0gW11cclxuICAgIGZyYWdtZW50ID0gTVZDLlV0aWxzLm9iamVjdFF1ZXJ5LnBhcnNlRnJhZ21lbnQoZnJhZ21lbnQpXHJcbiAgICBmb3IobGV0IFtwcm9wZXJ0eUtleSwgcHJvcGVydHlWYWx1ZV0gb2Ygb2JqZWN0KSB7XHJcbiAgICAgIGlmKHByb3BlcnR5S2V5Lm1hdGNoKGZyYWdtZW50KSkge1xyXG4gICAgICAgIGlmKGZyYWdtZW50SW5kZXggPT09IGZyYWdtZW50cy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcy5jb25jYXQoW1twcm9wZXJ0eUtleSwgcHJvcGVydHlWYWx1ZV1dKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcy5jb25jYXQoT2JqZWN0LmVudHJpZXMocHJvcGVydHlWYWx1ZSkpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBvYmplY3QgPSBwcm9wZXJ0aWVzXHJcbiAgICByZXR1cm4gb2JqZWN0XHJcbiAgfSwgY29udGV4dClcclxufVxyXG5NVkMuVXRpbHMub2JqZWN0UXVlcnkucGFyc2VOb3RhdGlvbiA9IGZ1bmN0aW9uIHBhcnNlTm90YXRpb24oc3RyaW5nKSB7XHJcbiAgaWYoXHJcbiAgICBzdHJpbmcuY2hhckF0KDApID09PSAnWycgJiZcclxuICAgIHN0cmluZy5jaGFyQXQoc3RyaW5nLmxlbmd0aCAtIDEpID09ICddJ1xyXG4gICkge1xyXG4gICAgc3RyaW5nID0gc3RyaW5nXHJcbiAgICAgIC5zbGljZSgxLCAtMSlcclxuICAgICAgLnNwbGl0KCddWycpXHJcbiAgfSBlbHNlIHtcclxuICAgIHN0cmluZyA9IHN0cmluZ1xyXG4gICAgICAuc3BsaXQoJy4nKVxyXG4gIH1cclxuICByZXR1cm4gc3RyaW5nXHJcbn1cclxuTVZDLlV0aWxzLm9iamVjdFF1ZXJ5LnBhcnNlRnJhZ21lbnQgPSBmdW5jdGlvbiBwYXJzZUZyYWdtZW50KGZyYWdtZW50KSB7XHJcbiAgaWYoXHJcbiAgICBmcmFnbWVudC5jaGFyQXQoMCkgPT09ICcvJyAmJlxyXG4gICAgZnJhZ21lbnQuY2hhckF0KGZyYWdtZW50Lmxlbmd0aCAtIDEpID09ICcvJ1xyXG4gICkge1xyXG4gICAgZnJhZ21lbnQgPSBmcmFnbWVudC5zbGljZSgxLCAtMSlcclxuICAgIGZyYWdtZW50ID0gbmV3IFJlZ0V4cCgnXicuY29uY2F0KGZyYWdtZW50LCAnJCcpKVxyXG4gIH1cclxuICByZXR1cm4gZnJhZ21lbnRcclxufVxyXG4iLCJNVkMuVXRpbHMudG9nZ2xlRXZlbnRzRm9yVGFyZ2V0T2JqZWN0cyA9IGZ1bmN0aW9uIHRvZ2dsZUV2ZW50c0ZvclRhcmdldE9iamVjdHMoXHJcbiAgdG9nZ2xlTWV0aG9kLFxyXG4gIGV2ZW50cyxcclxuICB0YXJnZXRPYmplY3RzLFxyXG4gIGNhbGxiYWNrc1xyXG4pIHtcclxuICBmb3IobGV0IFtldmVudFNldHRpbmdzLCBldmVudENhbGxiYWNrTmFtZV0gb2YgT2JqZWN0LmVudHJpZXMoZXZlbnRzKSkge1xyXG4gICAgbGV0IGV2ZW50RGF0YSA9IGV2ZW50U2V0dGluZ3Muc3BsaXQoJyAnKVxyXG4gICAgbGV0IGV2ZW50VGFyZ2V0U2V0dGluZ3MgPSBldmVudERhdGFbMF1cclxuICAgIGxldCBldmVudE5hbWUgPSBldmVudERhdGFbMV1cclxuICAgIGxldCBldmVudFRhcmdldHMgPSBNVkMuVXRpbHMub2JqZWN0UXVlcnkoXHJcbiAgICAgIGV2ZW50VGFyZ2V0U2V0dGluZ3MsXHJcbiAgICAgIHRhcmdldE9iamVjdHNcclxuICAgIClcclxuICAgIGV2ZW50VGFyZ2V0cyA9ICghTVZDLlV0aWxzLmlzQXJyYXkoZXZlbnRUYXJnZXRzKSlcclxuICAgICAgPyBbWydAJywgZXZlbnRUYXJnZXRzXV1cclxuICAgICAgOiBldmVudFRhcmdldHNcclxuICAgIGZvcihsZXQgW2V2ZW50VGFyZ2V0TmFtZSwgZXZlbnRUYXJnZXRdIG9mIGV2ZW50VGFyZ2V0cykge1xyXG4gICAgICBsZXQgZXZlbnRNZXRob2ROYW1lID0gKHRvZ2dsZU1ldGhvZCA9PT0gJ29uJylcclxuICAgICAgPyAoXHJcbiAgICAgICAgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBOb2RlTGlzdCB8fFxyXG4gICAgICAgIChcclxuICAgICAgICAgIGV2ZW50VGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHxcclxuICAgICAgICAgIGV2ZW50VGFyZ2V0IGluc3RhbmNlb2YgRG9jdW1lbnRcclxuICAgICAgICApXHJcbiAgICAgICkgPyAnYWRkRXZlbnRMaXN0ZW5lcidcclxuICAgICAgICA6ICdvbidcclxuICAgICAgOiAoXHJcbiAgICAgICAgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBOb2RlTGlzdCB8fFxyXG4gICAgICAgIChcclxuICAgICAgICAgIGV2ZW50VGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHxcclxuICAgICAgICAgIGV2ZW50VGFyZ2V0IGluc3RhbmNlb2YgRG9jdW1lbnRcclxuICAgICAgICApXHJcbiAgICAgICkgPyAncmVtb3ZlRXZlbnRMaXN0ZW5lcidcclxuICAgICAgICA6ICdvZmYnXHJcbiAgICAgIGxldCBldmVudENhbGxiYWNrID0gTVZDLlV0aWxzLm9iamVjdFF1ZXJ5KFxyXG4gICAgICAgIGV2ZW50Q2FsbGJhY2tOYW1lLFxyXG4gICAgICAgIGNhbGxiYWNrc1xyXG4gICAgICApWzBdWzFdXHJcbiAgICAgIGlmKGV2ZW50VGFyZ2V0IGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcclxuICAgICAgICBmb3IobGV0IF9ldmVudFRhcmdldCBvZiBldmVudFRhcmdldCkge1xyXG4gICAgICAgICAgX2V2ZW50VGFyZ2V0W2V2ZW50TWV0aG9kTmFtZV0oZXZlbnROYW1lLCBldmVudENhbGxiYWNrKVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmKGV2ZW50VGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICBldmVudFRhcmdldFtldmVudE1ldGhvZE5hbWVdKGV2ZW50TmFtZSwgZXZlbnRDYWxsYmFjaylcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBldmVudFRhcmdldFtldmVudE1ldGhvZE5hbWVdKGV2ZW50TmFtZSwgZXZlbnRDYWxsYmFjaylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5NVkMuVXRpbHMuYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cyA9IGZ1bmN0aW9uIGJpbmRFdmVudHNUb1RhcmdldE9iamVjdHMoKSB7XHJcbiAgdGhpcy50b2dnbGVFdmVudHNGb3JUYXJnZXRPYmplY3RzKCdvbicsIC4uLmFyZ3VtZW50cylcclxufVxyXG5NVkMuVXRpbHMudW5iaW5kRXZlbnRzRnJvbVRhcmdldE9iamVjdHMgPSBmdW5jdGlvbiB1bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cygpIHtcclxuICB0aGlzLnRvZ2dsZUV2ZW50c0ZvclRhcmdldE9iamVjdHMoJ29mZicsIC4uLmFyZ3VtZW50cylcclxufVxyXG4iLCJNVkMuVXRpbHMudmFsaWRhdGVEYXRhU2NoZW1hID0gZnVuY3Rpb24gdmFsaWRhdGVEYXRhU2NoZW1hKGRhdGEsIHNjaGVtYSkge1xyXG4gIGlmKHNjaGVtYSkge1xyXG4gICAgbGV0IHZhbGlkYXRpb25TdW1tYXJ5ID0ge31cclxuICAgIE9iamVjdC5lbnRyaWVzKHNjaGVtYSlcclxuICAgICAgLmZvckVhY2goKFtzY2hlbWFLZXksIHNjaGVtYVNldHRpbmdzXSkgPT4ge1xyXG4gICAgICAgIGxldCB2YWxpZGF0aW9uID0ge31cclxuICAgICAgICBsZXQgdmFsdWUgPSBkYXRhW3NjaGVtYUtleV1cclxuICAgICAgICB2YWxpZGF0aW9uLmtleSA9IHNjaGVtYUtleVxyXG4gICAgICAgIGlmKHNjaGVtYVNldHRpbmdzLnJlcXVpcmVkKSB7XHJcbiAgICAgICAgICB2YWxpZGF0aW9uLnJlcXVpcmVkID0gTVZDLlV0aWxzLnZhbGlkYXRlRGF0YVNjaGVtYVxyXG4gICAgICAgICAgICAucmVxdWlyZWQodmFsdWUsIHNjaGVtYVNldHRpbmdzLnJlcXVpcmVkKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZihzY2hlbWFTZXR0aW5ncy50eXBlKSB7XHJcbiAgICAgICAgICB2YWxpZGF0aW9uLnR5cGUgPSBNVkMuVXRpbHMudmFsaWRhdGVEYXRhU2NoZW1hXHJcbiAgICAgICAgICAgIC50eXBlKHZhbHVlLCBzY2hlbWFTZXR0aW5ncy50eXBlKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZihzY2hlbWFTZXR0aW5ncy5ldmFsdWF0aW9ucykge1xyXG4gICAgICAgICAgbGV0IHZhbGlkYXRpb25FdmFsdWF0aW9ucyA9IE1WQy5VdGlscy52YWxpZGF0ZURhdGFTY2hlbWFcclxuICAgICAgICAgICAgLmV2YWx1YXRpb25zKHZhbHVlLCBzY2hlbWFTZXR0aW5ncy5ldmFsdWF0aW9ucylcclxuICAgICAgICAgIHZhbGlkYXRpb24uZXZhbHVhdGlvbnMgPSBNVkMuVXRpbHMudmFsaWRhdGVEYXRhU2NoZW1hXHJcbiAgICAgICAgICAgIC5ldmFsdWF0aW9uUmVzdWx0cyh2YWxpZGF0aW9uRXZhbHVhdGlvbnMpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbGlkYXRpb25TdW1tYXJ5W3NjaGVtYUtleV0gPSB2YWxpZGF0aW9uXHJcbiAgICAgIH0pXHJcbiAgICByZXR1cm4gdmFsaWRhdGlvblN1bW1hcnlcclxuICB9XHJcbn1cclxuXHJcbk1WQy5VdGlscy52YWxpZGF0ZURhdGFTY2hlbWEucmVxdWlyZWQgPSBmdW5jdGlvbiByZXF1aXJlZCh2YWx1ZSwgc2NoZW1hU2V0dGluZ3MpIHtcclxuICBsZXQgdmFsaWRhdGlvblN1bW1hcnkgPSB7XHJcbiAgICB2YWx1ZTogdmFsdWUsXHJcbiAgfVxyXG4gIGxldCBtZXNzYWdlcyA9IE9iamVjdC5hc3NpZ24oXHJcbiAgICB7XHJcbiAgICAgIHBhc3M6ICdWYWx1ZSBpcyBkZWZpbmVkLicsXHJcbiAgICAgIGZhaWw6ICdWYWx1ZSBpcyBub3QgZGVmaW5lZC4nLFxyXG4gICAgfSxcclxuICAgIHNjaGVtYVNldHRpbmdzLm1lc3NhZ2VzXHJcbiAgKVxyXG4gIHZhbHVlID0gKHZhbHVlICE9PSB1bmRlZmluZWQpXHJcbiAgc3dpdGNoKE1WQy5VdGlscy50eXBlT2Yoc2NoZW1hU2V0dGluZ3MpKSB7XHJcbiAgICBjYXNlICdib29sZWFuJzpcclxuICAgICAgdmFsaWRhdGlvblN1bW1hcnkuY29tcGFyYXRvciA9IHNjaGVtYVNldHRpbmdzXHJcbiAgICAgIHZhbGlkYXRpb25TdW1tYXJ5LnJlc3VsdCA9ICh2YWx1ZSA9PT0gc2NoZW1hU2V0dGluZ3MpXHJcbiAgICAgIGJyZWFrXHJcbiAgICBjYXNlICdvYmplY3QnOlxyXG4gICAgICB2YWxpZGF0aW9uU3VtbWFyeS5jb21wYXJhdG9yID0gc2NoZW1hU2V0dGluZ3MudmFsdWVcclxuICAgICAgdmFsaWRhdGlvblN1bW1hcnkucmVzdWx0ID0gKHZhbHVlID09PSBzY2hlbWFTZXR0aW5ncy52YWx1ZSlcclxuICAgICAgYnJlYWtcclxuICB9XHJcbiAgdmFsaWRhdGlvblN1bW1hcnkubWVzc2FnZSA9ICh2YWxpZGF0aW9uU3VtbWFyeS5yZXN1bHQpXHJcbiAgICA/IG1lc3NhZ2VzLnBhc3NcclxuICAgIDogbWVzc2FnZXMuZmFpbFxyXG4gIHJldHVybiB2YWxpZGF0aW9uU3VtbWFyeVxyXG59XHJcblxyXG5NVkMuVXRpbHMudmFsaWRhdGVEYXRhU2NoZW1hLnR5cGUgPSBmdW5jdGlvbiByZXF1aXJlZCh2YWx1ZSwgc2NoZW1hU2V0dGluZ3MpIHtcclxuICBsZXQgdmFsaWRhdGlvblN1bW1hcnkgPSB7XHJcbiAgICB2YWx1ZTogdmFsdWVcclxuICB9XHJcbiAgbGV0IG1lc3NhZ2VzID0gT2JqZWN0LmFzc2lnbihcclxuICAgIHtcclxuICAgICAgcGFzczogJ1ZhbGlkIFR5cGUuJyxcclxuICAgICAgZmFpbDogJ0ludmFsaWQgVHlwZS4nLFxyXG4gICAgfSxcclxuICAgIHNjaGVtYVNldHRpbmdzLm1lc3NhZ2VzXHJcbiAgKVxyXG4gIHN3aXRjaChNVkMuVXRpbHMudHlwZU9mKHNjaGVtYVNldHRpbmdzKSkge1xyXG4gICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgdmFsaWRhdGlvblN1bW1hcnkuY29tcGFyYXRvclxyXG4gICAgICB2YWxpZGF0aW9uU3VtbWFyeS5yZXN1bHQgPSAoTVZDLlV0aWxzLnR5cGVPZih2YWx1ZSkgPT09IHNjaGVtYVNldHRpbmdzKVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgdmFsaWRhdGlvblN1bW1hcnkucmVzdWx0ID0gKE1WQy5VdGlscy50eXBlT2YodmFsdWUpID09PSBzY2hlbWFTZXR0aW5ncy52YWx1ZSlcclxuICAgICAgYnJlYWtcclxuICB9XHJcbiAgdmFsaWRhdGlvblN1bW1hcnkubWVzc2FnZSA9ICh2YWxpZGF0aW9uU3VtbWFyeS5yZXN1bHQpXHJcbiAgICA/IG1lc3NhZ2VzLnBhc3NcclxuICAgIDogbWVzc2FnZXMuZmFpbFxyXG4gIHJldHVybiB2YWxpZGF0aW9uU3VtbWFyeVxyXG59XHJcblxyXG5NVkMuVXRpbHMudmFsaWRhdGVEYXRhU2NoZW1hLmV2YWx1YXRpb25zID0gZnVuY3Rpb24gcmVxdWlyZWQodmFsdWUsIGV2YWx1YXRpb25zKSB7XHJcbiAgcmV0dXJuIGV2YWx1YXRpb25zLnJlZHVjZSgoX2V2YWx1YXRpb25zLCBldmFsdWF0aW9uLCBldmFsdWF0aW9uSW5kZXgpID0+IHtcclxuICAgIGlmKE1WQy5VdGlscy5pc0FycmF5KGV2YWx1YXRpb24pKSB7XHJcbiAgICAgIF9ldmFsdWF0aW9ucy5wdXNoKFxyXG4gICAgICAgIC4uLk1WQy5VdGlscy52YWxpZGF0ZURhdGFTY2hlbWEuZXZhbHVhdGlvbnModmFsdWUsIGV2YWx1YXRpb24pXHJcbiAgICAgIClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGV2YWx1YXRpb24udmFsdWUgPSB2YWx1ZVxyXG4gICAgICBsZXQgdmFsdWVDb21wYXJpc29uID0gTVZDLlV0aWxzLnZhbGlkYXRlRGF0YVNjaGVtYS5jb21wYXJlVmFsdWVzKFxyXG4gICAgICAgIGV2YWx1YXRpb24udmFsdWUsXHJcbiAgICAgICAgZXZhbHVhdGlvbi5jb21wYXJpc29uLnZhbHVlLFxyXG4gICAgICAgIGV2YWx1YXRpb24uY29tcGFyYXRvcixcclxuICAgICAgICBldmFsdWF0aW9uLm1lc3NhZ2VzXHJcbiAgICAgIClcclxuICAgICAgZXZhbHVhdGlvbi5yZXN1bHRzID0gZXZhbHVhdGlvbi5yZXN1bHRzIHx8IHt9XHJcbiAgICAgIGV2YWx1YXRpb24ucmVzdWx0cy52YWx1ZSA9IHZhbHVlQ29tcGFyaXNvblxyXG4gICAgICBfZXZhbHVhdGlvbnMucHVzaChldmFsdWF0aW9uKVxyXG4gICAgfVxyXG4gICAgaWYoX2V2YWx1YXRpb25zLmxlbmd0aCA+IDEpIHtcclxuICAgICAgbGV0IGN1cnJlbnRFdmFsdWF0aW9uID0gX2V2YWx1YXRpb25zW2V2YWx1YXRpb25JbmRleF1cclxuICAgICAgaWYoY3VycmVudEV2YWx1YXRpb24uY29tcGFyaXNvbi5zdGF0ZW1lbnQpIHtcclxuICAgICAgICBsZXQgcHJldmlvdXNFdmFsdWF0aW9uID0gX2V2YWx1YXRpb25zW2V2YWx1YXRpb25JbmRleCAtIDFdXHJcbiAgICAgICAgbGV0IHByZXZpb3VzRXZhbHVhdGlvbkNvbXBhcmlzb25WYWx1ZSA9IChjdXJyZW50RXZhbHVhdGlvbi5yZXN1bHRzLnN0YXRlbWVudClcclxuICAgICAgICAgID8gY3VycmVudEV2YWx1YXRpb24ucmVzdWx0cy5zdGF0ZW1lbnQucmVzdWx0XHJcbiAgICAgICAgICA6IGN1cnJlbnRFdmFsdWF0aW9uLnJlc3VsdHMudmFsdWUucmVzdWx0XHJcbiAgICAgICAgbGV0IHN0YXRlbWVudENvbXBhcmlzb24gPSBNVkMuVXRpbHMudmFsaWRhdGVEYXRhU2NoZW1hLmNvbXBhcmVTdGF0ZW1lbnRzKFxyXG4gICAgICAgICAgcHJldmlvdXNFdmFsdWF0aW9uQ29tcGFyaXNvblZhbHVlLFxyXG4gICAgICAgICAgY3VycmVudEV2YWx1YXRpb24uY29tcGFyaXNvbi5zdGF0ZW1lbnQsXHJcbiAgICAgICAgICBjdXJyZW50RXZhbHVhdGlvbi5yZXN1bHRzLnZhbHVlLnJlc3VsdCxcclxuICAgICAgICAgIGN1cnJlbnRFdmFsdWF0aW9uLm1lc3NhZ2VzXHJcbiAgICAgICAgKVxyXG4gICAgICAgIGN1cnJlbnRFdmFsdWF0aW9uLnJlc3VsdHMgPSBjdXJyZW50RXZhbHVhdGlvbi5yZXN1bHRzIHx8IHt9XHJcbiAgICAgICAgY3VycmVudEV2YWx1YXRpb24ucmVzdWx0cy5zdGF0ZW1lbnQgPSBzdGF0ZW1lbnRDb21wYXJpc29uXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBfZXZhbHVhdGlvbnNcclxuICB9LCBbXSlcclxufVxyXG5cclxuTVZDLlV0aWxzLnZhbGlkYXRlRGF0YVNjaGVtYS5ldmFsdWF0aW9uUmVzdWx0cyA9IGZ1bmN0aW9uIGV2YWx1YXRpb25SZXN1bHRzKGV2YWx1YXRpb25zKSB7XHJcbiAgbGV0IHZhbGlkYXRpb25FdmFsdWF0aW9ucyA9IHtcclxuICAgIHBhc3M6IFtdLFxyXG4gICAgZmFpbDogW10sXHJcbiAgfVxyXG4gIGV2YWx1YXRpb25zLmZvckVhY2goKGV2YWx1YXRpb25WYWxpZGF0aW9uKSA9PiB7XHJcbiAgICBpZihldmFsdWF0aW9uVmFsaWRhdGlvbi5yZXN1bHRzLnN0YXRlbWVudCkge1xyXG4gICAgICBpZihldmFsdWF0aW9uVmFsaWRhdGlvbi5yZXN1bHRzLnN0YXRlbWVudC5yZXN1bHQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgdmFsaWRhdGlvbkV2YWx1YXRpb25zLmZhaWwucHVzaChldmFsdWF0aW9uVmFsaWRhdGlvbilcclxuICAgICAgfSBlbHNlIGlmKGV2YWx1YXRpb25WYWxpZGF0aW9uLnJlc3VsdHMuc3RhdGVtZW50LnJlc3VsdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHZhbGlkYXRpb25FdmFsdWF0aW9ucy5wYXNzLnB1c2goZXZhbHVhdGlvblZhbGlkYXRpb24pXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZihldmFsdWF0aW9uVmFsaWRhdGlvbi5yZXN1bHRzLnZhbHVlKSB7XHJcbiAgICAgIGlmKGV2YWx1YXRpb25WYWxpZGF0aW9uLnJlc3VsdHMudmFsdWUucmVzdWx0ID09PSBmYWxzZSkge1xyXG4gICAgICAgIHZhbGlkYXRpb25FdmFsdWF0aW9ucy5mYWlsLnB1c2goZXZhbHVhdGlvblZhbGlkYXRpb24pXHJcbiAgICAgIH0gZWxzZSBpZihldmFsdWF0aW9uVmFsaWRhdGlvbi5yZXN1bHRzLnZhbHVlLnJlc3VsdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHZhbGlkYXRpb25FdmFsdWF0aW9ucy5wYXNzLnB1c2goZXZhbHVhdGlvblZhbGlkYXRpb24pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KVxyXG4gIHJldHVybiB2YWxpZGF0aW9uRXZhbHVhdGlvbnNcclxufVxyXG5cclxuTVZDLlV0aWxzLnZhbGlkYXRlRGF0YVNjaGVtYS5jb21wYXJlVmFsdWVzID0gZnVuY3Rpb24gY29tcGFyZVZhbHVlcyh2YWx1ZSwgb3BlcmF0b3IsIGNvbXBhcmF0b3IsIG1lc3NhZ2VzKSB7XHJcbiAgbGV0IGV2YWx1YXRpb25SZXN1bHRcclxuICBzd2l0Y2gob3BlcmF0b3IpIHtcclxuICAgIGNhc2UgTVZDLkNPTlNULk9wZXJhdG9ycy5Db21wYXJpc29uLkVROlxyXG4gICAgICBldmFsdWF0aW9uUmVzdWx0ID0gKHZhbHVlID09IGNvbXBhcmF0b3IpXHJcbiAgICAgIGJyZWFrXHJcbiAgICBjYXNlIE1WQy5DT05TVC5PcGVyYXRvcnMuQ29tcGFyaXNvbi5TVEVROlxyXG4gICAgICBldmFsdWF0aW9uUmVzdWx0ID0gKHZhbHVlID09PSBjb21wYXJhdG9yKVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSBNVkMuQ09OU1QuT3BlcmF0b3JzLkNvbXBhcmlzb24uTk9FUTpcclxuICAgICAgZXZhbHVhdGlvblJlc3VsdCA9ICh2YWx1ZSAhPSBjb21wYXJhdG9yKVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSBNVkMuQ09OU1QuT3BlcmF0b3JzLkNvbXBhcmlzb24uU1ROT0VROlxyXG4gICAgICBldmFsdWF0aW9uUmVzdWx0ID0gKHZhbHVlICE9PSBjb21wYXJhdG9yKVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSBNVkMuQ09OU1QuT3BlcmF0b3JzLkNvbXBhcmlzb24uR1Q6XHJcbiAgICAgIGV2YWx1YXRpb25SZXN1bHQgPSAodmFsdWUgPiBjb21wYXJhdG9yKVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSBNVkMuQ09OU1QuT3BlcmF0b3JzLkNvbXBhcmlzb24uTFQ6XHJcbiAgICAgIGV2YWx1YXRpb25SZXN1bHQgPSAodmFsdWUgPCBjb21wYXJhdG9yKVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSBNVkMuQ09OU1QuT3BlcmF0b3JzLkNvbXBhcmlzb24uR1RFOlxyXG4gICAgICBldmFsdWF0aW9uUmVzdWx0ID0gKHZhbHVlID49IGNvbXBhcmF0b3IpXHJcbiAgICAgIGJyZWFrXHJcbiAgICBjYXNlIE1WQy5DT05TVC5PcGVyYXRvcnMuQ29tcGFyaXNvbi5MVEU6XHJcbiAgICAgIGV2YWx1YXRpb25SZXN1bHQgPSAodmFsdWUgPD0gY29tcGFyYXRvcilcclxuICAgICAgYnJlYWtcclxuICB9XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3VsdDogZXZhbHVhdGlvblJlc3VsdCxcclxuICAgIG1lc3NhZ2U6IChldmFsdWF0aW9uUmVzdWx0KVxyXG4gICAgICA/IG1lc3NhZ2VzLnBhc3NcclxuICAgICAgOiBtZXNzYWdlcy5mYWlsXHJcbiAgfVxyXG59XHJcblxyXG5NVkMuVXRpbHMudmFsaWRhdGVEYXRhU2NoZW1hLmNvbXBhcmVTdGF0ZW1lbnRzID0gZnVuY3Rpb24gY29tcGFyZVN0YXRlbWVudHModmFsdWUsIG9wZXJhdG9yLCBjb21wYXJhdG9yLCBtZXNzYWdlcykge1xyXG4gIGxldCBldmFsdWF0aW9uUmVzdWx0XHJcbiAgc3dpdGNoKG9wZXJhdG9yKSB7XHJcbiAgICBjYXNlIE1WQy5DT05TVC5PcGVyYXRvcnMuU3RhdGVtZW50LkFORDpcclxuICAgICAgZXZhbHVhdGlvblJlc3VsdCA9IHZhbHVlICYmIGNvbXBhcmF0b3JcclxuICAgICAgYnJlYWtcclxuICAgIGNhc2UgTVZDLkNPTlNULk9wZXJhdG9ycy5TdGF0ZW1lbnQuT1I6XHJcbiAgICAgIGV2YWx1YXRpb25SZXN1bHQgPSB2YWx1ZSB8fCBjb21wYXJhdG9yXHJcbiAgICAgIGJyZWFrXHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICByZXN1bHQ6IGV2YWx1YXRpb25SZXN1bHQsXHJcbiAgICBtZXNzYWdlOiAoZXZhbHVhdGlvblJlc3VsdClcclxuICAgICAgPyBtZXNzYWdlcy5wYXNzXHJcbiAgICAgIDogbWVzc2FnZXMuZmFpbFxyXG4gIH1cclxufVxyXG4iLCJNVkMuQ2hhbm5lbHMgPSBjbGFzcyB7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG4gIGdldCBfY2hhbm5lbHMoKSB7XHJcbiAgICB0aGlzLmNoYW5uZWxzID0gKHRoaXMuY2hhbm5lbHMpXHJcbiAgICAgID8gdGhpcy5jaGFubmVsc1xyXG4gICAgICA6IHt9XHJcbiAgICByZXR1cm4gdGhpcy5jaGFubmVsc1xyXG4gIH1cclxuICBjaGFubmVsKGNoYW5uZWxOYW1lKSB7XHJcbiAgICB0aGlzLl9jaGFubmVsc1tjaGFubmVsTmFtZV0gPSAodGhpcy5fY2hhbm5lbHNbY2hhbm5lbE5hbWVdKVxyXG4gICAgICA/IHRoaXMuX2NoYW5uZWxzW2NoYW5uZWxOYW1lXVxyXG4gICAgICA6IG5ldyBNVkMuQ2hhbm5lbHMuQ2hhbm5lbCgpXHJcbiAgICByZXR1cm4gdGhpcy5fY2hhbm5lbHNbY2hhbm5lbE5hbWVdXHJcbiAgfVxyXG4gIG9mZihjaGFubmVsTmFtZSkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NoYW5uZWxzW2NoYW5uZWxOYW1lXVxyXG4gIH1cclxufVxyXG4iLCJNVkMuQ2hhbm5lbHMuQ2hhbm5lbCA9IGNsYXNzIHtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcbiAgZ2V0IF9yZXNwb25zZXMoKSB7XHJcbiAgICB0aGlzLnJlc3BvbnNlcyA9ICh0aGlzLnJlc3BvbnNlcylcclxuICAgICAgPyB0aGlzLnJlc3BvbnNlc1xyXG4gICAgICA6IHt9XHJcbiAgICByZXR1cm4gdGhpcy5yZXNwb25zZXNcclxuICB9XHJcbiAgcmVzcG9uc2UocmVzcG9uc2VOYW1lLCByZXNwb25zZUNhbGxiYWNrKSB7XHJcbiAgICBpZihyZXNwb25zZUNhbGxiYWNrKSB7XHJcbiAgICAgIHRoaXMuX3Jlc3BvbnNlc1tyZXNwb25zZU5hbWVdID0gcmVzcG9uc2VDYWxsYmFja1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlc1tyZXNwb25zZV1cclxuICAgIH1cclxuICB9XHJcbiAgcmVxdWVzdChyZXNwb25zZU5hbWUsIHJlcXVlc3REYXRhKSB7XHJcbiAgICBpZih0aGlzLl9yZXNwb25zZXNbcmVzcG9uc2VOYW1lXSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcmVzcG9uc2VzW3Jlc3BvbnNlTmFtZV0ocmVxdWVzdERhdGEpXHJcbiAgICB9XHJcbiAgfVxyXG4gIG9mZihyZXNwb25zZU5hbWUpIHtcclxuICAgIGlmKHJlc3BvbnNlTmFtZSkge1xyXG4gICAgICBkZWxldGUgdGhpcy5fcmVzcG9uc2VzW3Jlc3BvbnNlTmFtZV1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZvcihsZXQgW3Jlc3BvbnNlTmFtZV0gb2YgT2JqZWN0LmtleXModGhpcy5fcmVzcG9uc2VzKSkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9yZXNwb25zZXNbcmVzcG9uc2VOYW1lXVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIk1WQy5CYXNlID0gY2xhc3MgZXh0ZW5kcyBNVkMuRXZlbnRzIHtcclxuICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgY29uZmlndXJhdGlvbikge1xyXG4gICAgc3VwZXIoKVxyXG4gICAgaWYoY29uZmlndXJhdGlvbikgdGhpcy5fY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb25cclxuICAgIGlmKHNldHRpbmdzKSB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzXHJcbiAgfVxyXG4gIGdldCBfY29uZmlndXJhdGlvbigpIHtcclxuICAgIHRoaXMuY29uZmlndXJhdGlvbiA9ICh0aGlzLmNvbmZpZ3VyYXRpb24pXHJcbiAgICAgID8gdGhpcy5jb25maWd1cmF0aW9uXHJcbiAgICAgIDoge31cclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25cclxuICB9XHJcbiAgc2V0IF9jb25maWd1cmF0aW9uKGNvbmZpZ3VyYXRpb24pIHsgdGhpcy5jb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbiB9XHJcbiAgZ2V0IF9zZXR0aW5ncygpIHtcclxuICAgIHRoaXMuc2V0dGluZ3MgPSAodGhpcy5zZXR0aW5ncylcclxuICAgICAgPyB0aGlzLnNldHRpbmdzXHJcbiAgICAgIDoge31cclxuICAgIHJldHVybiB0aGlzLnNldHRpbmdzXHJcbiAgfVxyXG4gIHNldCBfc2V0dGluZ3Moc2V0dGluZ3MpIHtcclxuICAgIHRoaXMuc2V0dGluZ3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxyXG4gICAgICBzZXR0aW5ncywgdGhpcy5fc2V0dGluZ3NcclxuICAgIClcclxuICB9XHJcbiAgZ2V0IF9lbWl0dGVycygpIHtcclxuICAgIHRoaXMuZW1pdHRlcnMgPSAodGhpcy5lbWl0dGVycylcclxuICAgICAgPyB0aGlzLmVtaXR0ZXJzXHJcbiAgICAgIDoge31cclxuICAgIHJldHVybiB0aGlzLmVtaXR0ZXJzXHJcbiAgfVxyXG4gIHNldCBfZW1pdHRlcnMoZW1pdHRlcnMpIHtcclxuICAgIHRoaXMuZW1pdHRlcnMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxyXG4gICAgICBlbWl0dGVycywgdGhpcy5fZW1pdHRlcnNcclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiTVZDLlNlcnZpY2UgPSBjbGFzcyBleHRlbmRzIE1WQy5CYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICB9XG4gIGdldCBfZGVmYXVsdHMoKSB7IHJldHVybiB0aGlzLmRlZmF1bHRzIHx8IHtcbiAgICBjb250ZW50VHlwZTogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9LFxuICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICB9IH1cbiAgZ2V0IF9yZXNwb25zZVR5cGVzKCkgeyByZXR1cm4gWycnLCAnYXJyYXlidWZmZXInLCAnYmxvYicsICdkb2N1bWVudCcsICdqc29uJywgJ3RleHQnXSB9XG4gIGdldCBfcmVzcG9uc2VUeXBlKCkgeyByZXR1cm4gdGhpcy5yZXNwb25zZVR5cGUgfVxuICBzZXQgX3Jlc3BvbnNlVHlwZShyZXNwb25zZVR5cGUpIHtcbiAgICB0aGlzLl94aHIucmVzcG9uc2VUeXBlID0gdGhpcy5fcmVzcG9uc2VUeXBlcy5maW5kKFxuICAgICAgKHJlc3BvbnNlVHlwZUl0ZW0pID0+IHJlc3BvbnNlVHlwZUl0ZW0gPT09IHJlc3BvbnNlVHlwZVxuICAgICkgfHwgdGhpcy5fZGVmYXVsdHMucmVzcG9uc2VUeXBlXG4gIH1cbiAgZ2V0IF90eXBlKCkgeyByZXR1cm4gdGhpcy50eXBlIH1cbiAgc2V0IF90eXBlKHR5cGUpIHsgdGhpcy50eXBlID0gdHlwZSB9XG4gIGdldCBfdXJsKCkgeyByZXR1cm4gdGhpcy51cmwgfVxuICBzZXQgX3VybCh1cmwpIHsgdGhpcy51cmwgPSB1cmwgfVxuICBnZXQgX2hlYWRlcnMoKSB7IHJldHVybiB0aGlzLmhlYWRlcnMgfHwgW10gfVxuICBzZXQgX2hlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMuX2hlYWRlcnMubGVuZ3RoID0gMFxuICAgIGhlYWRlcnMuZm9yRWFjaCgoaGVhZGVyKSA9PiB7XG4gICAgICB0aGlzLl9oZWFkZXJzLnB1c2goaGVhZGVyKVxuICAgICAgaGVhZGVyID0gT2JqZWN0LmVudHJpZXMoaGVhZGVyKVswXVxuICAgICAgdGhpcy5feGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSlcbiAgfVxuICBnZXQgX2RhdGEoKSB7IHJldHVybiB0aGlzLmRhdGEgfVxuICBzZXQgX2RhdGEoZGF0YSkgeyB0aGlzLmRhdGEgPSBkYXRhIH1cbiAgZ2V0IF94aHIoKSB7XG4gICAgdGhpcy54aHIgPSAodGhpcy54aHIpXG4gICAgICA/IHRoaXMueGhyXG4gICAgICA6IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG4gICAgcmV0dXJuIHRoaXMueGhyXG4gIH1cbiAgZ2V0IF9lbmFibGVkKCkgeyByZXR1cm4gdGhpcy5lbmFibGVkIHx8IGZhbHNlIH1cbiAgc2V0IF9lbmFibGVkKGVuYWJsZWQpIHsgdGhpcy5lbmFibGVkID0gZW5hYmxlZCB9XG4gIHJlcXVlc3QoZGF0YSkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHRoaXMuZGF0YSB8fCBudWxsXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmKHRoaXMuX3hoci5zdGF0dXMgPT09IDIwMCkgdGhpcy5feGhyLmFib3J0KClcbiAgICAgIHRoaXMuX3hoci5vcGVuKHRoaXMudHlwZSwgdGhpcy51cmwpXG4gICAgICB0aGlzLl9oZWFkZXJzID0gdGhpcy5zZXR0aW5ncy5oZWFkZXJzIHx8IFt0aGlzLl9kZWZhdWx0cy5jb250ZW50VHlwZV1cbiAgICAgIHRoaXMuX3hoci5vbmxvYWQgPSByZXNvbHZlXG4gICAgICB0aGlzLl94aHIub25lcnJvciA9IHJlamVjdFxuICAgICAgdGhpcy5feGhyLnNlbmQoZGF0YSlcbiAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgdGhpcy5lbWl0KCd4aHI6cmVzb2x2ZScsIHtcbiAgICAgICAgbmFtZTogJ3hocjpyZXNvbHZlJyxcbiAgICAgICAgZGF0YTogcmVzcG9uc2UuY3VycmVudFRhcmdldCxcbiAgICAgIH0pXG4gICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHsgdGhyb3cgZXJyb3IgfSlcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgIXRoaXMuZW5hYmxlZCAmJlxuICAgICAgT2JqZWN0LmtleXMoc2V0dGluZ3MpLmxlbmd0aFxuICAgICkge1xuICAgICAgaWYoc2V0dGluZ3MudHlwZSkgdGhpcy5fdHlwZSA9IHNldHRpbmdzLnR5cGVcbiAgICAgIGlmKHNldHRpbmdzLnVybCkgdGhpcy5fdXJsID0gc2V0dGluZ3MudXJsXG4gICAgICBpZihzZXR0aW5ncy5kYXRhKSB0aGlzLl9kYXRhID0gc2V0dGluZ3MuZGF0YSB8fCBudWxsXG4gICAgICBpZih0aGlzLnNldHRpbmdzLnJlc3BvbnNlVHlwZSkgdGhpcy5fcmVzcG9uc2VUeXBlID0gdGhpcy5fc2V0dGluZ3MucmVzcG9uc2VUeXBlXG4gICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgdGhpcy5lbmFibGVkICYmXG4gICAgICBPYmplY3Qua2V5cyhzZXR0aW5ncykubGVuZ3RoXG4gICAgKSB7XG4gICAgICBkZWxldGUgdGhpcy5fdHlwZVxuICAgICAgZGVsZXRlIHRoaXMuX3VybFxuICAgICAgZGVsZXRlIHRoaXMuX2RhdGFcbiAgICAgIGRlbGV0ZSB0aGlzLl9oZWFkZXJzXG4gICAgICBkZWxldGUgdGhpcy5fcmVzcG9uc2VUeXBlXG4gICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuIiwiTVZDLk1vZGVsID0gY2xhc3MgZXh0ZW5kcyBNVkMuQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgfVxuICBnZXQgX2lzU2V0dGluZygpIHsgcmV0dXJuIHRoaXMuaXNTZXR0aW5nIH1cbiAgc2V0IF9pc1NldHRpbmcoaXNTZXR0aW5nKSB7IHRoaXMuaXNTZXR0aW5nID0gaXNTZXR0aW5nIH1cbiAgZ2V0IF9jaGFuZ2luZygpIHtcbiAgICB0aGlzLmNoYW5naW5nID0gKHRoaXMuY2hhbmdpbmcpXG4gICAgICA/IHRoaXMuY2hhbmdpbmdcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5jaGFuZ2luZ1xuICB9XG4gIGdldCBfbG9jYWxTdG9yYWdlKCkgeyByZXR1cm4gdGhpcy5sb2NhbFN0b3JhZ2UgfVxuICBzZXQgX2xvY2FsU3RvcmFnZShsb2NhbFN0b3JhZ2UpIHsgdGhpcy5sb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2UgfVxuICBnZXQgX2RlZmF1bHRzKCkgeyByZXR1cm4gdGhpcy5kZWZhdWx0cyB9XG4gIHNldCBfZGVmYXVsdHMoZGVmYXVsdHMpIHsgdGhpcy5kZWZhdWx0cyA9IGRlZmF1bHRzIH1cbiAgZ2V0IF9zY2hlbWEoKSB7IHJldHVybiB0aGlzLl9zY2hlbWEgfVxuICBzZXQgX3NjaGVtYShzY2hlbWEpIHsgdGhpcy5zY2hlbWEgPSBzY2hlbWEgfVxuICBnZXQgX2hpc3Rpb2dyYW0oKSB7IHJldHVybiB0aGlzLmhpc3Rpb2dyYW0gfHwge1xuICAgIGxlbmd0aDogMVxuICB9IH1cbiAgc2V0IF9oaXN0aW9ncmFtKGhpc3Rpb2dyYW0pIHtcbiAgICB0aGlzLmhpc3Rpb2dyYW0gPSBPYmplY3QuYXNzaWduKFxuICAgICAgdGhpcy5faGlzdGlvZ3JhbSxcbiAgICAgIGhpc3Rpb2dyYW1cbiAgICApXG4gIH1cbiAgZ2V0IF9oaXN0b3J5KCkge1xuICAgIHRoaXMuaGlzdG9yeSA9ICh0aGlzLmhpc3RvcnkpXG4gICAgICA/IHRoaXMuaGlzdG9yeVxuICAgICAgOiBbXVxuICAgIHJldHVybiB0aGlzLmhpc3RvcnlcbiAgfVxuICBzZXQgX2hpc3RvcnkoZGF0YSkge1xuICAgIGlmKFxuICAgICAgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoXG4gICAgKSB7XG4gICAgICBpZih0aGlzLl9oaXN0aW9ncmFtLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9oaXN0b3J5LnVuc2hpZnQodGhpcy5wYXJzZShkYXRhKSlcbiAgICAgICAgdGhpcy5faGlzdG9yeS5zcGxpY2UodGhpcy5faGlzdGlvZ3JhbS5sZW5ndGgpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldCBfZGIoKSB7XG4gICAgbGV0IGRiID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5sb2NhbFN0b3JhZ2UuZW5kcG9pbnQpXG4gICAgdGhpcy5kYiA9IChkYilcbiAgICAgID8gZGJcbiAgICAgIDogJ3t9J1xuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuZGIpXG4gIH1cbiAgc2V0IF9kYihkYikge1xuICAgIGRiID0gSlNPTi5zdHJpbmdpZnkoZGIpXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5sb2NhbFN0b3JhZ2UuZW5kcG9pbnQsIGRiKVxuICB9XG4gIGdldCBfZGF0YSgpIHtcbiAgICB0aGlzLmRhdGEgPSAgKHRoaXMuZGF0YSlcbiAgICAgID8gdGhpcy5kYXRhXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuZGF0YVxuICB9XG4gIGdldCBfZGF0YUV2ZW50cygpIHtcbiAgICB0aGlzLmRhdGFFdmVudHMgPSAodGhpcy5kYXRhRXZlbnRzKVxuICAgICAgPyB0aGlzLmRhdGFFdmVudHNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5kYXRhRXZlbnRzXG4gIH1cbiAgc2V0IF9kYXRhRXZlbnRzKGRhdGFFdmVudHMpIHtcbiAgICB0aGlzLmRhdGFFdmVudHMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgZGF0YUV2ZW50cywgdGhpcy5fZGF0YUV2ZW50c1xuICAgIClcbiAgfVxuICBnZXQgX2RhdGFDYWxsYmFja3MoKSB7XG4gICAgdGhpcy5kYXRhQ2FsbGJhY2tzID0gKHRoaXMuZGF0YUNhbGxiYWNrcylcbiAgICAgID8gdGhpcy5kYXRhQ2FsbGJhY2tzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuZGF0YUNhbGxiYWNrc1xuICB9XG4gIHNldCBfZGF0YUNhbGxiYWNrcyhkYXRhQ2FsbGJhY2tzKSB7XG4gICAgdGhpcy5kYXRhQ2FsbGJhY2tzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIGRhdGFDYWxsYmFja3MsIHRoaXMuX2RhdGFDYWxsYmFja3NcbiAgICApXG4gIH1cbiAgZ2V0IF9zZXJ2aWNlcygpIHtcbiAgICB0aGlzLnNlcnZpY2VzID0gICh0aGlzLnNlcnZpY2VzKVxuICAgICAgPyB0aGlzLnNlcnZpY2VzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuc2VydmljZXNcbiAgfVxuICBzZXQgX3NlcnZpY2VzKHNlcnZpY2VzKSB7XG4gICAgdGhpcy5zZXJ2aWNlcyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBzZXJ2aWNlcywgdGhpcy5fc2VydmljZXNcbiAgICApXG4gIH1cbiAgZ2V0IF9zZXJ2aWNlRXZlbnRzKCkge1xuICAgIHRoaXMuc2VydmljZUV2ZW50cyA9ICh0aGlzLnNlcnZpY2VFdmVudHMpXG4gICAgICA/IHRoaXMuc2VydmljZUV2ZW50c1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLnNlcnZpY2VFdmVudHNcbiAgfVxuICBzZXQgX3NlcnZpY2VFdmVudHMoc2VydmljZUV2ZW50cykge1xuICAgIHRoaXMuc2VydmljZUV2ZW50cyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBzZXJ2aWNlRXZlbnRzLCB0aGlzLl9zZXJ2aWNlRXZlbnRzXG4gICAgKVxuICB9XG4gIGdldCBfc2VydmljZUNhbGxiYWNrcygpIHtcbiAgICB0aGlzLnNlcnZpY2VDYWxsYmFja3MgPSAodGhpcy5zZXJ2aWNlQ2FsbGJhY2tzKVxuICAgICAgPyB0aGlzLnNlcnZpY2VDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlQ2FsbGJhY2tzXG4gIH1cbiAgc2V0IF9zZXJ2aWNlQ2FsbGJhY2tzKHNlcnZpY2VDYWxsYmFja3MpIHtcbiAgICB0aGlzLnNlcnZpY2VDYWxsYmFja3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgc2VydmljZUNhbGxiYWNrcywgdGhpcy5fc2VydmljZUNhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgX2VuYWJsZWQoKSB7IHJldHVybiB0aGlzLmVuYWJsZWQgfHwgZmFsc2UgfVxuICBzZXQgX2VuYWJsZWQoZW5hYmxlZCkgeyB0aGlzLmVuYWJsZWQgPSBlbmFibGVkIH1cbiAgZW5hYmxlU2VydmljZUV2ZW50cygpIHtcbiAgICBNVkMuVXRpbHMuYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cyh0aGlzLnNlcnZpY2VFdmVudHMsIHRoaXMuc2VydmljZXMsIHRoaXMuc2VydmljZUNhbGxiYWNrcylcbiAgfVxuICBkaXNhYmxlU2VydmljZUV2ZW50cygpIHtcbiAgICBNVkMuVXRpbHMudW5iaW5kRXZlbnRzRnJvbVRhcmdldE9iamVjdHModGhpcy5zZXJ2aWNlRXZlbnRzLCB0aGlzLnNlcnZpY2VzLCB0aGlzLnNlcnZpY2VDYWxsYmFja3MpXG4gIH1cbiAgZW5hYmxlRGF0YUV2ZW50cygpIHtcbiAgICBNVkMuVXRpbHMuYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cyh0aGlzLmRhdGFFdmVudHMsIHRoaXMsIHRoaXMuZGF0YUNhbGxiYWNrcylcbiAgfVxuICBkaXNhYmxlRGF0YUV2ZW50cygpIHtcbiAgICBNVkMuVXRpbHMudW5iaW5kRXZlbnRzRnJvbVRhcmdldE9iamVjdHModGhpcy5kYXRhRXZlbnRzLCB0aGlzLCB0aGlzLmRhdGFDYWxsYmFja3MpXG4gIH1cbiAgc2V0RGVmYXVsdHMoKSB7XG4gICAgbGV0IF9kZWZhdWx0cyA9IHt9XG4gICAgaWYodGhpcy5kZWZhdWx0cykgT2JqZWN0LmFzc2lnbihfZGVmYXVsdHMsIHRoaXMuZGVmYXVsdHMpXG4gICAgaWYodGhpcy5sb2NhbFN0b3JhZ2UpIE9iamVjdC5hc3NpZ24oX2RlZmF1bHRzLCB0aGlzLl9kYilcbiAgICBpZihPYmplY3Qua2V5cyhfZGVmYXVsdHMpKSB0aGlzLnNldChfZGVmYXVsdHMpXG4gIH1cbiAgZ2V0KCkge1xuICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbGV0IGtleSA9IGFyZ3VtZW50c1swXVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW2tleV1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgc2V0KCkge1xuICAgIHRoaXMuX2hpc3RvcnkgPSB0aGlzLnBhcnNlKClcbiAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICB0aGlzLl9pc1NldHRpbmcgPSB0cnVlXG4gICAgICAgIGxldCBfYXJndW1lbnRzID0gT2JqZWN0LmVudHJpZXMoYXJndW1lbnRzWzBdKVxuICAgICAgICBfYXJndW1lbnRzLmZvckVhY2goKFtrZXksIHZhbHVlXSwgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZihpbmRleCA9PT0gKF9hcmd1bWVudHMubGVuZ3RoIC0gMSkpIHRoaXMuX2lzU2V0dGluZyA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5fY2hhbmdpbmdba2V5XSA9IHZhbHVlXG4gICAgICAgICAgdGhpcy5zZXREYXRhUHJvcGVydHkoa2V5LCB2YWx1ZSlcbiAgICAgICAgICBpZih0aGlzLmxvY2FsU3RvcmFnZSkgdGhpcy5zZXREQihrZXksIHZhbHVlKVxuICAgICAgICB9KVxuICAgICAgICBkZWxldGUgdGhpcy5jaGFuZ2luZ1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAyOlxuICAgICAgICB2YXIga2V5ID0gYXJndW1lbnRzWzBdXG4gICAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1sxXVxuICAgICAgICB0aGlzLnNldERhdGFQcm9wZXJ0eShrZXksIHZhbHVlKVxuICAgICAgICBpZih0aGlzLmxvY2FsU3RvcmFnZSkgdGhpcy5zZXREQihrZXksIHZhbHVlKVxuICAgICAgICBicmVha1xuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIHVuc2V0KCkge1xuICAgIHRoaXMuX2hpc3RvcnkgPSB0aGlzLnBhcnNlKClcbiAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBmb3IobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLl9kYXRhKSkge1xuICAgICAgICAgIHRoaXMudW5zZXREYXRhUHJvcGVydHkoa2V5KVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGxldCBrZXkgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgdGhpcy51bnNldERhdGFQcm9wZXJ0eShrZXkpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgc2V0REIoKSB7XG4gICAgbGV0IGRiID0gdGhpcy5fZGJcbiAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgX2FyZ3VtZW50cyA9IE9iamVjdC5lbnRyaWVzKGFyZ3VtZW50c1swXSlcbiAgICAgICAgX2FyZ3VtZW50cy5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICBkYltrZXldID0gdmFsdWVcbiAgICAgICAgfSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgbGV0IGtleSA9IGFyZ3VtZW50c1swXVxuICAgICAgICBsZXQgdmFsdWUgPSBhcmd1bWVudHNbMV1cbiAgICAgICAgZGJba2V5XSA9IHZhbHVlXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHRoaXMuX2RiID0gZGJcbiAgfVxuICB1bnNldERCKCkge1xuICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9kYlxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAxOlxuICAgICAgICBsZXQgZGIgPSB0aGlzLl9kYlxuICAgICAgICBsZXQga2V5ID0gYXJndW1lbnRzWzBdXG4gICAgICAgIGRlbGV0ZSBkYltrZXldXG4gICAgICAgIHRoaXMuX2RiID0gZGJcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgc2V0RGF0YVByb3BlcnR5KGtleSwgdmFsdWUpIHtcbiAgICBpZighdGhpcy5fZGF0YVsnXycuY29uY2F0KGtleSldKSB7XG4gICAgICBsZXQgY29udGV4dCA9IHRoaXNcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgICAgICB0aGlzLl9kYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgWydfJy5jb25jYXQoa2V5KV06IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldCgpIHsgcmV0dXJuIHRoaXNba2V5XSB9LFxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlXG4gICAgICAgICAgICAgIGxldCBzZXRWYWx1ZUV2ZW50TmFtZSA9IFsnc2V0JywgJzonLCBrZXldLmpvaW4oJycpXG4gICAgICAgICAgICAgIGxldCBzZXRFdmVudE5hbWUgPSAnc2V0J1xuICAgICAgICAgICAgICBjb250ZXh0LmVtaXQoXG4gICAgICAgICAgICAgICAgc2V0VmFsdWVFdmVudE5hbWUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogc2V0VmFsdWVFdmVudE5hbWUsXG4gICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGlmKCFjb250ZXh0Ll9pc1NldHRpbmcpIHtcbiAgICAgICAgICAgICAgICBpZighT2JqZWN0LnZhbHVlcyhjb250ZXh0Ll9jaGFuZ2luZykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0LmVtaXQoXG4gICAgICAgICAgICAgICAgICAgIHNldEV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNldEV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQuZW1pdChcbiAgICAgICAgICAgICAgICAgICAgc2V0RXZlbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogc2V0RXZlbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGNvbnRleHQuX2NoYW5naW5nLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cbiAgICB0aGlzLl9kYXRhWydfJy5jb25jYXQoa2V5KV0gPSB2YWx1ZVxuICB9XG4gIHVuc2V0RGF0YVByb3BlcnR5KGtleSkge1xuICAgIGxldCB1bnNldFZhbHVlRXZlbnROYW1lID0gWyd1bnNldCcsICc6Jywga2V5XS5qb2luKCcnKVxuICAgIGxldCB1bnNldEV2ZW50TmFtZSA9ICd1bnNldCdcbiAgICBsZXQgdW5zZXRWYWx1ZSA9IHRoaXMuX2RhdGFba2V5XVxuICAgIGRlbGV0ZSB0aGlzLl9kYXRhWydfJy5jb25jYXQoa2V5KV1cbiAgICBkZWxldGUgdGhpcy5fZGF0YVtrZXldXG4gICAgdGhpcy5lbWl0KFxuICAgICAgdW5zZXRWYWx1ZUV2ZW50TmFtZSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogdW5zZXRWYWx1ZUV2ZW50TmFtZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB1bnNldFZhbHVlLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICAgIHRoaXMuZW1pdChcbiAgICAgIHVuc2V0RXZlbnROYW1lLFxuICAgICAge1xuICAgICAgICBuYW1lOiB1bnNldEV2ZW50TmFtZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB1bnNldFZhbHVlLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICB9XG4gIHBhcnNlKGRhdGEpIHtcbiAgICBkYXRhID0gZGF0YSB8fCB0aGlzLl9kYXRhXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmFzc2lnbih7fSwgZGF0YSkpKVxuICB9XG4gIGVuYWJsZSgpIHtcbiAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICBzZXR0aW5ncyAmJlxuICAgICAgIXRoaXMuZW5hYmxlZFxuICAgICkge1xuICAgICAgaWYodGhpcy5zZXR0aW5ncy5sb2NhbFN0b3JhZ2UpIHRoaXMuX2xvY2FsU3RvcmFnZSA9IHRoaXMuc2V0dGluZ3MubG9jYWxTdG9yYWdlXG4gICAgICBpZih0aGlzLnNldHRpbmdzLmhpc3Rpb2dyYW0pIHRoaXMuX2hpc3Rpb2dyYW0gPSB0aGlzLnNldHRpbmdzLmhpc3Rpb2dyYW1cbiAgICAgIGlmKHRoaXMuc2V0dGluZ3MuZW1pdHRlcnMpIHRoaXMuX2VtaXR0ZXJzID0gdGhpcy5zZXR0aW5ncy5lbWl0dGVyc1xuICAgICAgaWYodGhpcy5zZXR0aW5ncy5zZXJ2aWNlcykgdGhpcy5fc2VydmljZXMgPSB0aGlzLnNldHRpbmdzLnNlcnZpY2VzXG4gICAgICBpZih0aGlzLnNldHRpbmdzLnNlcnZpY2VDYWxsYmFja3MpIHRoaXMuX3NlcnZpY2VDYWxsYmFja3MgPSB0aGlzLnNldHRpbmdzLnNlcnZpY2VDYWxsYmFja3NcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3Muc2VydmljZUV2ZW50cykgdGhpcy5fc2VydmljZUV2ZW50cyA9IHRoaXMuc2V0dGluZ3Muc2VydmljZUV2ZW50c1xuICAgICAgaWYodGhpcy5zZXR0aW5ncy5kYXRhKSB0aGlzLnNldCh0aGlzLnNldHRpbmdzLmRhdGEpXG4gICAgICBpZih0aGlzLnNldHRpbmdzLmRhdGFDYWxsYmFja3MpIHRoaXMuX2RhdGFDYWxsYmFja3MgPSB0aGlzLnNldHRpbmdzLmRhdGFDYWxsYmFja3NcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3MuZGF0YUV2ZW50cykgdGhpcy5fZGF0YUV2ZW50cyA9IHRoaXMuc2V0dGluZ3MuZGF0YUV2ZW50c1xuICAgICAgaWYodGhpcy5zZXR0aW5ncy5zY2hlbWEpIHRoaXMuX3NjaGVtYSA9IHRoaXMuc2V0dGluZ3Muc2NoZW1hXG4gICAgICBpZih0aGlzLnNldHRpbmdzLmRlZmF1bHRzKSB0aGlzLl9kZWZhdWx0cyA9IHRoaXMuc2V0dGluZ3MuZGVmYXVsdHNcbiAgICAgIGlmKFxuICAgICAgICB0aGlzLnNlcnZpY2VzICYmXG4gICAgICAgIHRoaXMuc2VydmljZUV2ZW50cyAmJlxuICAgICAgICB0aGlzLnNlcnZpY2VDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVuYWJsZVNlcnZpY2VFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMuZGF0YUV2ZW50cyAmJlxuICAgICAgICB0aGlzLmRhdGFDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVuYWJsZURhdGFFdmVudHMoKVxuICAgICAgfVxuICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWVcbiAgICB9XG4gIH1cbiAgZGlzYWJsZSgpIHtcbiAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICBzZXR0aW5ncyAmJlxuICAgICAgIXRoaXMuZW5hYmxlZFxuICAgICkge1xuICAgICAgaWYoXG4gICAgICAgIHRoaXMuc2VydmljZXMgJiZcbiAgICAgICAgdGhpcy5zZXJ2aWNlRXZlbnRzICYmXG4gICAgICAgIHRoaXMuc2VydmljZUNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZVNlcnZpY2VFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMuZGF0YUV2ZW50cyAmJlxuICAgICAgICB0aGlzLmRhdGFDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmRpc2FibGVEYXRhRXZlbnRzKClcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLl9sb2NhbFN0b3JhZ2VcbiAgICAgIGRlbGV0ZSB0aGlzLl9oaXN0aW9ncmFtXG4gICAgICBkZWxldGUgdGhpcy5fc2VydmljZXNcbiAgICAgIGRlbGV0ZSB0aGlzLl9zZXJ2aWNlQ2FsbGJhY2tzXG4gICAgICBkZWxldGUgdGhpcy5fc2VydmljZUV2ZW50c1xuICAgICAgZGVsZXRlIHRoaXMuX2RhdGFcbiAgICAgIGRlbGV0ZSB0aGlzLl9kYXRhQ2FsbGJhY2tzXG4gICAgICBkZWxldGUgdGhpcy5fZGF0YUV2ZW50c1xuICAgICAgZGVsZXRlIHRoaXMuX3NjaGVtYVxuICAgICAgZGVsZXRlIHRoaXMuX2VtaXR0ZXJzXG4gICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2VcbiAgICB9XG4gIH1cbn1cbiIsIk1WQy5FbWl0dGVyID0gY2xhc3MgZXh0ZW5kcyBNVkMuTW9kZWwge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxyXG4gICAgaWYodGhpcy5zZXR0aW5ncykge1xyXG4gICAgICBpZih0aGlzLnNldHRpbmdzLm5hbWUpIHRoaXMuX25hbWUgPSB0aGlzLnNldHRpbmdzLm5hbWVcclxuICAgIH1cclxuICB9XHJcbiAgZ2V0IF9uYW1lKCkgeyByZXR1cm4gdGhpcy5uYW1lIH1cclxuICBzZXQgX25hbWUobmFtZSkgeyB0aGlzLm5hbWUgPSBuYW1lIH1cclxuICBlbWlzc2lvbigpIHtcclxuICAgIGxldCBldmVudERhdGEgPSB7XHJcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgZGF0YTogdGhpcy5kYXRhXHJcbiAgICB9XHJcbiAgICB0aGlzLmVtaXQoXHJcbiAgICAgIHRoaXMubmFtZSxcclxuICAgICAgZXZlbnREYXRhXHJcbiAgICApXHJcbiAgICByZXR1cm4gZXZlbnREYXRhXHJcbiAgfVxyXG59XHJcbiIsIk1WQy5FbWl0dGVycy5OYXZpZ2F0ZSA9IGNsYXNzIGV4dGVuZHMgTVZDLkVtaXR0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxyXG4gICAgdGhpcy5hZGRTZXR0aW5ncygpXHJcbiAgICB0aGlzLmVuYWJsZSgpXHJcbiAgfVxyXG4gIGFkZFNldHRpbmdzKCkge1xyXG4gICAgdGhpcy5fbmFtZSA9ICduYXZpZ2F0ZSdcclxuICAgIHRoaXMuX3NjaGVtYSA9IHtcclxuICAgICAgb2xkVVJMOiBTdHJpbmcsXHJcbiAgICAgIG5ld1VSTDogU3RyaW5nLFxyXG4gICAgICBjdXJyZW50Um91dGU6IFN0cmluZyxcclxuICAgICAgY3VycmVudENvbnRyb2xsZXI6IFN0cmluZyxcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiTVZDLlZpZXcgPSBjbGFzcyBleHRlbmRzIE1WQy5CYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICB9XG4gIGdldCBfZWxlbWVudE5hbWUoKSB7IHJldHVybiB0aGlzLl9lbGVtZW50LnRhZ05hbWUgfVxuICBzZXQgX2VsZW1lbnROYW1lKGVsZW1lbnROYW1lKSB7XG4gICAgaWYoIXRoaXMuX2VsZW1lbnQpIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnROYW1lKVxuICB9XG4gIGdldCBfZWxlbWVudCgpIHsgcmV0dXJuIHRoaXMuZWxlbWVudCB9XG4gIHNldCBfZWxlbWVudChlbGVtZW50KSB7XG4gICAgaWYoXG4gICAgICBlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHxcbiAgICAgIGVsZW1lbnQgaW5zdGFuY2VvZiBEb2N1bWVudFxuICAgICkge1xuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICAgIH0gZWxzZSBpZih0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudClcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgfSlcbiAgfVxuICBnZXQgX2F0dHJpYnV0ZXMoKSB7IHJldHVybiB0aGlzLl9lbGVtZW50LmF0dHJpYnV0ZXMgfVxuICBzZXQgX2F0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICAgIGZvcihsZXQgW2F0dHJpYnV0ZUtleSwgYXR0cmlidXRlVmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpKSB7XG4gICAgICBpZih0eXBlb2YgYXR0cmlidXRlVmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZUtleSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZUtleSwgYXR0cmlidXRlVmFsdWUpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldCBfdWkoKSB7XG4gICAgdGhpcy51aSA9ICh0aGlzLnVpKVxuICAgICAgPyB0aGlzLnVpXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMudWlcbiAgfVxuICBzZXQgX3VpKHVpKSB7XG4gICAgaWYoIXRoaXMuX3VpWyckZWxlbWVudCddKSB0aGlzLl91aVsnJGVsZW1lbnQnXSA9IHRoaXMuZWxlbWVudFxuICAgIGZvcihsZXQgW3VpS2V5LCB1aVZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh1aSkpIHtcbiAgICAgIGlmKHR5cGVvZiB1aVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl91aVt1aUtleV0gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodWlWYWx1ZSlcbiAgICAgIH0gZWxzZSBpZihcbiAgICAgICAgdWlWYWx1ZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8XG4gICAgICAgIHVpVmFsdWUgaW5zdGFuY2VvZiBEb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX3VpW3VpS2V5XSA9IHVpVmFsdWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2V0IF91aUV2ZW50cygpIHsgcmV0dXJuIHRoaXMudWlFdmVudHMgfVxuICBzZXQgX3VpRXZlbnRzKHVpRXZlbnRzKSB7IHRoaXMudWlFdmVudHMgPSB1aUV2ZW50cyB9XG4gIGdldCBfdWlDYWxsYmFja3MoKSB7XG4gICAgdGhpcy51aUNhbGxiYWNrcyA9ICh0aGlzLnVpQ2FsbGJhY2tzKVxuICAgICAgPyB0aGlzLnVpQ2FsbGJhY2tzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMudWlDYWxsYmFja3NcbiAgfVxuICBzZXQgX3VpQ2FsbGJhY2tzKHVpQ2FsbGJhY2tzKSB7XG4gICAgdGhpcy51aUNhbGxiYWNrcyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICB1aUNhbGxiYWNrcywgdGhpcy5fdWlDYWxsYmFja3NcbiAgICApXG4gIH1cbiAgZ2V0IF9vYnNlcnZlckNhbGxiYWNrcygpIHtcbiAgICB0aGlzLm9ic2VydmVyQ2FsbGJhY2tzID0gKHRoaXMub2JzZXJ2ZXJDYWxsYmFja3MpXG4gICAgICA/IHRoaXMub2JzZXJ2ZXJDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5vYnNlcnZlckNhbGxiYWNrc1xuICB9XG4gIHNldCBfb2JzZXJ2ZXJDYWxsYmFja3Mob2JzZXJ2ZXJDYWxsYmFja3MpIHtcbiAgICB0aGlzLm9ic2VydmVyQ2FsbGJhY2tzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIG9ic2VydmVyQ2FsbGJhY2tzLCB0aGlzLl9vYnNlcnZlckNhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgZWxlbWVudE9ic2VydmVyKCkge1xuICAgIHRoaXMuX2VsZW1lbnRPYnNlcnZlciA9ICh0aGlzLl9lbGVtZW50T2JzZXJ2ZXIpXG4gICAgICA/IHRoaXMuX2VsZW1lbnRPYnNlcnZlclxuICAgICAgOiBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmVsZW1lbnRPYnNlcnZlLmJpbmQodGhpcykpXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRPYnNlcnZlclxuICB9XG4gIGdldCBfaW5zZXJ0KCkgeyByZXR1cm4gdGhpcy5pbnNlcnQgfVxuICBzZXQgX2luc2VydChpbnNlcnQpIHsgdGhpcy5pbnNlcnQgPSBpbnNlcnQgfVxuICBnZXQgX2VuYWJsZWQoKSB7IHJldHVybiB0aGlzLmVuYWJsZWQgfHwgZmFsc2UgfVxuICBzZXQgX2VuYWJsZWQoZW5hYmxlZCkgeyB0aGlzLmVuYWJsZWQgPSBlbmFibGVkIH1cbiAgZ2V0IF90ZW1wbGF0ZXMoKSB7XG4gICAgdGhpcy50ZW1wbGF0ZXMgPSAodGhpcy50ZW1wbGF0ZXMpXG4gICAgICA/IHRoaXMudGVtcGxhdGVzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzXG4gIH1cbiAgc2V0IF90ZW1wbGF0ZXModGVtcGxhdGVzKSB7XG4gICAgdGhpcy50ZW1wbGF0ZXMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgdGVtcGxhdGVzLCB0aGlzLl90ZW1wbGF0ZXNcbiAgICApXG4gIH1cbiAgZWxlbWVudE9ic2VydmUobXV0YXRpb25SZWNvcmRMaXN0LCBvYnNlcnZlcikge1xuICAgIGZvcihsZXQgW211dGF0aW9uUmVjb3JkSW5kZXgsIG11dGF0aW9uUmVjb3JkXSBvZiBPYmplY3QuZW50cmllcyhtdXRhdGlvblJlY29yZExpc3QpKSB7XG4gICAgICBzd2l0Y2gobXV0YXRpb25SZWNvcmQudHlwZSkge1xuICAgICAgICBjYXNlICdjaGlsZExpc3QnOlxuICAgICAgICAgIGxldCBtdXRhdGlvblJlY29yZENhdGVnb3JpZXMgPSBbJ2FkZGVkTm9kZXMnLCAncmVtb3ZlZE5vZGVzJ11cbiAgICAgICAgICBmb3IobGV0IG11dGF0aW9uUmVjb3JkQ2F0ZWdvcnkgb2YgbXV0YXRpb25SZWNvcmRDYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICBpZihtdXRhdGlvblJlY29yZFttdXRhdGlvblJlY29yZENhdGVnb3J5XS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdGhpcy5yZXNldFVJKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYXV0b0luc2VydCgpIHtcbiAgICBpZih0aGlzLmluc2VydCkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLmluc2VydC5lbGVtZW50KVxuICAgICAgLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgZWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQodGhpcy5pbnNlcnQubWV0aG9kLCB0aGlzLmVsZW1lbnQpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuICBhdXRvUmVtb3ZlKCkge1xuICAgIGlmKFxuICAgICAgdGhpcy5lbGVtZW50ICYmXG4gICAgICB0aGlzLmVsZW1lbnQucGFyZW50RWxlbWVudFxuICAgICkgdGhpcy5lbGVtZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KVxuICB9XG4gIGVuYWJsZUVsZW1lbnQoc2V0dGluZ3MpIHtcbiAgICBzZXR0aW5ncyA9IHNldHRpbmdzIHx8IHRoaXMuc2V0dGluZ3NcbiAgICBpZihzZXR0aW5ncy5lbGVtZW50TmFtZSkgdGhpcy5fZWxlbWVudE5hbWUgPSBzZXR0aW5ncy5lbGVtZW50TmFtZVxuICAgIGlmKHNldHRpbmdzLmVsZW1lbnQpIHRoaXMuX2VsZW1lbnQgPSBzZXR0aW5ncy5lbGVtZW50XG4gICAgaWYoc2V0dGluZ3MuYXR0cmlidXRlcykgdGhpcy5fYXR0cmlidXRlcyA9IHNldHRpbmdzLmF0dHJpYnV0ZXNcbiAgICBpZihzZXR0aW5ncy50ZW1wbGF0ZXMpIHRoaXMuX3RlbXBsYXRlcyA9IHNldHRpbmdzLnRlbXBsYXRlc1xuICAgIGlmKHNldHRpbmdzLmluc2VydCkgdGhpcy5faW5zZXJ0ID0gc2V0dGluZ3MuaW5zZXJ0XG4gIH1cbiAgZGlzYWJsZUVsZW1lbnQoc2V0dGluZ3MpIHtcbiAgICBzZXR0aW5ncyA9IHNldHRpbmdzIHx8IHRoaXMuc2V0dGluZ3NcbiAgICBpZihcbiAgICAgIHRoaXMuZWxlbWVudCAmJlxuICAgICAgdGhpcy5lbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICApIHRoaXMuZWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudClcbiAgICBpZih0aGlzLmVsZW1lbnQpIGRlbGV0ZSB0aGlzLmVsZW1lbnRcbiAgICBpZih0aGlzLmF0dHJpYnV0ZXMpIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNcbiAgICBpZih0aGlzLnRlbXBsYXRlcykgZGVsZXRlIHRoaXMudGVtcGxhdGVzXG4gICAgaWYodGhpcy5pbnNlcnQpIGRlbGV0ZSB0aGlzLmluc2VydFxuICB9XG4gIHJlc2V0VUkoKSB7XG4gICAgdGhpcy5kaXNhYmxlVUkoKVxuICAgIHRoaXMuZW5hYmxlVUkoKVxuICB9XG4gIGVuYWJsZVVJKHNldHRpbmdzKSB7XG4gICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB0aGlzLnNldHRpbmdzXG4gICAgaWYoc2V0dGluZ3MudWkpIHRoaXMuX3VpID0gc2V0dGluZ3MudWlcbiAgICBpZihzZXR0aW5ncy51aUNhbGxiYWNrcykgdGhpcy5fdWlDYWxsYmFja3MgPSBzZXR0aW5ncy51aUNhbGxiYWNrc1xuICAgIGlmKHNldHRpbmdzLnVpRXZlbnRzKSB7XG4gICAgICB0aGlzLl91aUV2ZW50cyA9IHNldHRpbmdzLnVpRXZlbnRzXG4gICAgICB0aGlzLmVuYWJsZVVJRXZlbnRzKClcbiAgICB9XG4gIH1cbiAgZGlzYWJsZVVJKHNldHRpbmdzKSB7XG4gICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB0aGlzLnNldHRpbmdzXG4gICAgaWYoc2V0dGluZ3MudWlFdmVudHMpIHtcbiAgICAgIHRoaXMuZGlzYWJsZVVJRXZlbnRzKClcbiAgICAgIGRlbGV0ZSB0aGlzLl91aUV2ZW50c1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy51aUV2ZW50c1xuICAgIGRlbGV0ZSB0aGlzLnVpXG4gICAgZGVsZXRlIHRoaXMudWlDYWxsYmFja3NcbiAgfVxuICBlbmFibGVVSUV2ZW50cygpIHtcbiAgICBpZihcbiAgICAgIHRoaXMudWlFdmVudHMgJiZcbiAgICAgIHRoaXMudWkgJiZcbiAgICAgIHRoaXMudWlDYWxsYmFja3NcbiAgICApIHtcbiAgICAgIE1WQy5VdGlscy5iaW5kRXZlbnRzVG9UYXJnZXRPYmplY3RzKFxuICAgICAgICB0aGlzLnVpRXZlbnRzLFxuICAgICAgICB0aGlzLnVpLFxuICAgICAgICB0aGlzLnVpQ2FsbGJhY2tzXG4gICAgICApXG4gICAgfVxuICB9XG4gIGRpc2FibGVVSUV2ZW50cygpIHtcbiAgICBpZihcbiAgICAgIHRoaXMudWlFdmVudHMgJiZcbiAgICAgIHRoaXMudWkgJiZcbiAgICAgIHRoaXMudWlDYWxsYmFja3NcbiAgICApIHtcbiAgICAgIE1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyhcbiAgICAgICAgdGhpcy51aUV2ZW50cyxcbiAgICAgICAgdGhpcy51aSxcbiAgICAgICAgdGhpcy51aUNhbGxiYWNrc1xuICAgICAgKVxuICAgIH1cbiAgfVxuICBlbmFibGVFbWl0dGVycygpIHtcbiAgICBpZih0aGlzLnNldHRpbmdzLmVtaXR0ZXJzKSB0aGlzLl9lbWl0dGVycyA9IHRoaXMuc2V0dGluZ3MuZW1pdHRlcnNcbiAgfVxuICBkaXNhYmxlRW1pdHRlcnMoKSB7XG4gICAgaWYodGhpcy5fZW1pdHRlcnMpIGRlbGV0ZSB0aGlzLl9lbWl0dGVyc1xuICB9XG4gIGVuYWJsZSgpIHtcbiAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICBzZXR0aW5ncyAmJlxuICAgICAgIXRoaXMuX2VuYWJsZWRcbiAgICApIHtcbiAgICAgIHRoaXMuZW5hYmxlRW1pdHRlcnMoKVxuICAgICAgdGhpcy5lbmFibGVFbGVtZW50KHNldHRpbmdzKVxuICAgICAgdGhpcy5lbmFibGVVSShzZXR0aW5ncylcbiAgICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGxldCBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3NcbiAgICBpZihcbiAgICAgIHNldHRpbmdzICYmXG4gICAgICB0aGlzLl9lbmFibGVkXG4gICAgKSB7XG4gICAgICB0aGlzLmRpc2FibGVVSShzZXR0aW5ncylcbiAgICAgIHRoaXMuZGlzYWJsZUVsZW1lbnQoc2V0dGluZ3MpXG4gICAgICB0aGlzLmRpc2FibGVFbWl0dGVycygpXG4gICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2VcbiAgICAgIHJldHVybiB0aGlzc1xuICAgIH1cbiAgfVxufVxuIiwiTVZDLkNvbnRyb2xsZXIgPSBjbGFzcyBleHRlbmRzIE1WQy5CYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICB9XG4gIGdldCBfZW1pdHRlckNhbGxiYWNrcygpIHtcbiAgICB0aGlzLmVtaXR0ZXJDYWxsYmFja3MgPSAodGhpcy5lbWl0dGVyQ2FsbGJhY2tzKVxuICAgICAgPyB0aGlzLmVtaXR0ZXJDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyQ2FsbGJhY2tzXG4gIH1cbiAgc2V0IF9lbWl0dGVyQ2FsbGJhY2tzKGVtaXR0ZXJDYWxsYmFja3MpIHtcbiAgICB0aGlzLmVtaXR0ZXJDYWxsYmFja3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgZW1pdHRlckNhbGxiYWNrcywgdGhpcy5fZW1pdHRlckNhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgX21vZGVsQ2FsbGJhY2tzKCkge1xuICAgIHRoaXMubW9kZWxDYWxsYmFja3MgPSAodGhpcy5tb2RlbENhbGxiYWNrcylcbiAgICAgID8gdGhpcy5tb2RlbENhbGxiYWNrc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLm1vZGVsQ2FsbGJhY2tzXG4gIH1cbiAgc2V0IF9tb2RlbENhbGxiYWNrcyhtb2RlbENhbGxiYWNrcykge1xuICAgIHRoaXMubW9kZWxDYWxsYmFja3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgbW9kZWxDYWxsYmFja3MsIHRoaXMuX21vZGVsQ2FsbGJhY2tzXG4gICAgKVxuICB9XG4gIGdldCBfdmlld0NhbGxiYWNrcygpIHtcbiAgICB0aGlzLnZpZXdDYWxsYmFja3MgPSAodGhpcy52aWV3Q2FsbGJhY2tzKVxuICAgICAgPyB0aGlzLnZpZXdDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy52aWV3Q2FsbGJhY2tzXG4gIH1cbiAgc2V0IF92aWV3Q2FsbGJhY2tzKHZpZXdDYWxsYmFja3MpIHtcbiAgICB0aGlzLnZpZXdDYWxsYmFja3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgdmlld0NhbGxiYWNrcywgdGhpcy5fdmlld0NhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgX2NvbnRyb2xsZXJDYWxsYmFja3MoKSB7XG4gICAgdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzID0gKHRoaXMuY29udHJvbGxlckNhbGxiYWNrcylcbiAgICAgID8gdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlckNhbGxiYWNrc1xuICB9XG4gIHNldCBfY29udHJvbGxlckNhbGxiYWNrcyhjb250cm9sbGVyQ2FsbGJhY2tzKSB7XG4gICAgdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIGNvbnRyb2xsZXJDYWxsYmFja3MsIHRoaXMuX2NvbnRyb2xsZXJDYWxsYmFja3NcbiAgICApXG4gIH1cbiAgZ2V0IF9tb2RlbHMoKSB7XG4gICAgdGhpcy5tb2RlbHMgPSAodGhpcy5tb2RlbHMpXG4gICAgICA/IHRoaXMubW9kZWxzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMubW9kZWxzXG4gIH1cbiAgc2V0IF9tb2RlbHMobW9kZWxzKSB7XG4gICAgdGhpcy5tb2RlbHMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgbW9kZWxzLCB0aGlzLl9tb2RlbHNcbiAgICApXG4gIH1cbiAgZ2V0IF92aWV3cygpIHtcbiAgICB0aGlzLnZpZXdzID0gKHRoaXMudmlld3MpXG4gICAgICA/IHRoaXMudmlld3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy52aWV3c1xuICB9XG4gIHNldCBfdmlld3Modmlld3MpIHtcbiAgICB0aGlzLnZpZXdzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHZpZXdzLCB0aGlzLl92aWV3c1xuICAgIClcbiAgfVxuICBnZXQgX2NvbnRyb2xsZXJzKCkge1xuICAgIHRoaXMuY29udHJvbGxlcnMgPSAodGhpcy5jb250cm9sbGVycylcbiAgICAgID8gdGhpcy5jb250cm9sbGVyc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXJzXG4gIH1cbiAgc2V0IF9jb250cm9sbGVycyhjb250cm9sbGVycykge1xuICAgIHRoaXMuY29udHJvbGxlcnMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgY29udHJvbGxlcnMsIHRoaXMuX2NvbnRyb2xsZXJzXG4gICAgKVxuICB9XG4gIGdldCBfcm91dGVycygpIHtcbiAgICB0aGlzLnJvdXRlcnMgPSAodGhpcy5yb3V0ZXJzKVxuICAgICAgPyB0aGlzLnJvdXRlcnNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5yb3V0ZXJzXG4gIH1cbiAgc2V0IF9yb3V0ZXJzKHJvdXRlcnMpIHtcbiAgICB0aGlzLnJvdXRlcnMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgcm91dGVycywgdGhpcy5fcm91dGVyc1xuICAgIClcbiAgfVxuICBnZXQgX3JvdXRlckV2ZW50cygpIHtcbiAgICB0aGlzLnJvdXRlckV2ZW50cyA9ICh0aGlzLnJvdXRlckV2ZW50cylcbiAgICAgID8gdGhpcy5yb3V0ZXJFdmVudHNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5yb3V0ZXJFdmVudHNcbiAgfVxuICBzZXQgX3JvdXRlckV2ZW50cyhyb3V0ZXJFdmVudHMpIHtcbiAgICB0aGlzLnJvdXRlckV2ZW50cyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICByb3V0ZXJFdmVudHMsIHRoaXMuX3JvdXRlckV2ZW50c1xuICAgIClcbiAgfVxuICBnZXQgX3JvdXRlckNhbGxiYWNrcygpIHtcbiAgICB0aGlzLnJvdXRlckNhbGxiYWNrcyA9ICh0aGlzLnJvdXRlckNhbGxiYWNrcylcbiAgICAgID8gdGhpcy5yb3V0ZXJDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5yb3V0ZXJDYWxsYmFja3NcbiAgfVxuICBzZXQgX3JvdXRlckNhbGxiYWNrcyhyb3V0ZXJDYWxsYmFja3MpIHtcbiAgICB0aGlzLnJvdXRlckNhbGxiYWNrcyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICByb3V0ZXJDYWxsYmFja3MsIHRoaXMuX3JvdXRlckNhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgX2VtaXR0ZXJFdmVudHMoKSB7XG4gICAgdGhpcy5lbWl0dGVyRXZlbnRzID0gKHRoaXMuZW1pdHRlckV2ZW50cylcbiAgICAgID8gdGhpcy5lbWl0dGVyRXZlbnRzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlckV2ZW50c1xuICB9XG4gIHNldCBfZW1pdHRlckV2ZW50cyhlbWl0dGVyRXZlbnRzKSB7XG4gICAgdGhpcy5lbWl0dGVyRXZlbnRzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIGVtaXR0ZXJFdmVudHMsIHRoaXMuX2VtaXR0ZXJFdmVudHNcbiAgICApXG4gIH1cbiAgZ2V0IF9tb2RlbEV2ZW50cygpIHtcbiAgICB0aGlzLm1vZGVsRXZlbnRzID0gKHRoaXMubW9kZWxFdmVudHMpXG4gICAgICA/IHRoaXMubW9kZWxFdmVudHNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5tb2RlbEV2ZW50c1xuICB9XG4gIHNldCBfbW9kZWxFdmVudHMobW9kZWxFdmVudHMpIHtcbiAgICB0aGlzLm1vZGVsRXZlbnRzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIG1vZGVsRXZlbnRzLCB0aGlzLl9tb2RlbEV2ZW50c1xuICAgIClcbiAgfVxuICBnZXQgX3ZpZXdFdmVudHMoKSB7XG4gICAgdGhpcy52aWV3RXZlbnRzID0gKHRoaXMudmlld0V2ZW50cylcbiAgICAgID8gdGhpcy52aWV3RXZlbnRzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMudmlld0V2ZW50c1xuICB9XG4gIHNldCBfdmlld0V2ZW50cyh2aWV3RXZlbnRzKSB7XG4gICAgdGhpcy52aWV3RXZlbnRzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHZpZXdFdmVudHMsIHRoaXMuX3ZpZXdFdmVudHNcbiAgICApXG4gIH1cbiAgZ2V0IF9jb250cm9sbGVyRXZlbnRzKCkge1xuICAgIHRoaXMuY29udHJvbGxlckV2ZW50cyA9ICh0aGlzLmNvbnRyb2xsZXJFdmVudHMpXG4gICAgICA/IHRoaXMuY29udHJvbGxlckV2ZW50c1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXJFdmVudHNcbiAgfVxuICBzZXQgX2NvbnRyb2xsZXJFdmVudHMoY29udHJvbGxlckV2ZW50cykge1xuICAgIHRoaXMuY29udHJvbGxlckV2ZW50cyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBjb250cm9sbGVyRXZlbnRzLCB0aGlzLl9jb250cm9sbGVyRXZlbnRzXG4gICAgKVxuICB9XG4gIGdldCBfZW5hYmxlZCgpIHsgcmV0dXJuIHRoaXMuZW5hYmxlZCB8fCBmYWxzZSB9XG4gIHNldCBfZW5hYmxlZChlbmFibGVkKSB7IHRoaXMuZW5hYmxlZCA9IGVuYWJsZWQgfVxuICBlbmFibGVNb2RlbEV2ZW50cygpIHtcbiAgICBNVkMuVXRpbHMuYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cyh0aGlzLm1vZGVsRXZlbnRzLCB0aGlzLm1vZGVscywgdGhpcy5tb2RlbENhbGxiYWNrcylcbiAgfVxuICBkaXNhYmxlTW9kZWxFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLnVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKHRoaXMubW9kZWxFdmVudHMsIHRoaXMubW9kZWxzLCB0aGlzLm1vZGVsQ2FsbGJhY2tzKVxuICB9XG4gIGVuYWJsZVZpZXdFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLmJpbmRFdmVudHNUb1RhcmdldE9iamVjdHModGhpcy52aWV3RXZlbnRzLCB0aGlzLnZpZXdzLCB0aGlzLnZpZXdDYWxsYmFja3MpXG4gIH1cbiAgZGlzYWJsZVZpZXdFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLnVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKHRoaXMudmlld0V2ZW50cywgdGhpcy52aWV3cywgdGhpcy52aWV3Q2FsbGJhY2tzKVxuICB9XG4gIGVuYWJsZUNvbnRyb2xsZXJFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLmJpbmRFdmVudHNUb1RhcmdldE9iamVjdHModGhpcy5jb250cm9sbGVyRXZlbnRzLCB0aGlzLmNvbnRyb2xsZXJzLCB0aGlzLmNvbnRyb2xsZXJDYWxsYmFja3MpXG4gIH1cbiAgZGlzYWJsZUNvbnRyb2xsZXJFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLnVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKHRoaXMuY29udHJvbGxlckV2ZW50cywgdGhpcy5jb250cm9sbGVycywgdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzKVxuICB9XG4gIGVuYWJsZUVtaXR0ZXJFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLmJpbmRFdmVudHNUb1RhcmdldE9iamVjdHModGhpcy5lbWl0dGVyRXZlbnRzLCB0aGlzLmVtaXR0ZXJzLCB0aGlzLmVtaXR0ZXJDYWxsYmFja3MpXG4gIH1cbiAgZGlzYWJsZUVtaXR0ZXJFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLnVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKHRoaXMuZW1pdHRlckV2ZW50cywgdGhpcy5lbWl0dGVycywgdGhpcy5lbWl0dGVyQ2FsbGJhY2tzKVxuICB9XG4gIGVuYWJsZVJvdXRlckV2ZW50cygpIHtcbiAgICBNVkMuVXRpbHMuYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cyh0aGlzLnJvdXRlckV2ZW50cywgdGhpcy5yb3V0ZXJzLCB0aGlzLnJvdXRlckNhbGxiYWNrcylcbiAgfVxuICBkaXNhYmxlUm91dGVyRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyh0aGlzLnJvdXRlckV2ZW50cywgdGhpcy5yb3V0ZXJzLCB0aGlzLnJvdXRlckNhbGxiYWNrcylcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgc2V0dGluZ3MgJiZcbiAgICAgICF0aGlzLmVuYWJsZWRcbiAgICApIHtcbiAgICAgIGlmKHNldHRpbmdzLm1vZGVsQ2FsbGJhY2tzKSB0aGlzLl9tb2RlbENhbGxiYWNrcyA9IHNldHRpbmdzLm1vZGVsQ2FsbGJhY2tzXG4gICAgICBpZihzZXR0aW5ncy52aWV3Q2FsbGJhY2tzKSB0aGlzLl92aWV3Q2FsbGJhY2tzID0gc2V0dGluZ3Mudmlld0NhbGxiYWNrc1xuICAgICAgaWYoc2V0dGluZ3MuY29udHJvbGxlckNhbGxiYWNrcykgdGhpcy5fY29udHJvbGxlckNhbGxiYWNrcyA9IHNldHRpbmdzLmNvbnRyb2xsZXJDYWxsYmFja3NcbiAgICAgIGlmKHNldHRpbmdzLmVtaXR0ZXJDYWxsYmFja3MpIHRoaXMuX2VtaXR0ZXJDYWxsYmFja3MgPSBzZXR0aW5ncy5lbWl0dGVyQ2FsbGJhY2tzXG4gICAgICBpZihzZXR0aW5ncy5yb3V0ZXJDYWxsYmFja3MpIHRoaXMuX3JvdXRlckNhbGxiYWNrcyA9IHNldHRpbmdzLnJvdXRlckNhbGxiYWNrc1xuICAgICAgaWYoc2V0dGluZ3MubW9kZWxzKSB0aGlzLl9tb2RlbHMgPSBzZXR0aW5ncy5tb2RlbHNcbiAgICAgIGlmKHNldHRpbmdzLnZpZXdzKSB0aGlzLl92aWV3cyA9IHNldHRpbmdzLnZpZXdzXG4gICAgICBpZihzZXR0aW5ncy5jb250cm9sbGVycykgdGhpcy5fY29udHJvbGxlcnMgPSBzZXR0aW5ncy5jb250cm9sbGVyc1xuICAgICAgaWYoc2V0dGluZ3MuZW1pdHRlcnMpIHRoaXMuX2VtaXR0ZXJzID0gc2V0dGluZ3MuZW1pdHRlcnNcbiAgICAgIGlmKHNldHRpbmdzLnJvdXRlcnMpIHRoaXMuX3JvdXRlcnMgPSBzZXR0aW5ncy5yb3V0ZXJzXG4gICAgICBpZihzZXR0aW5ncy5tb2RlbEV2ZW50cykgdGhpcy5fbW9kZWxFdmVudHMgPSBzZXR0aW5ncy5tb2RlbEV2ZW50c1xuICAgICAgaWYoc2V0dGluZ3Mudmlld0V2ZW50cykgdGhpcy5fdmlld0V2ZW50cyA9IHNldHRpbmdzLnZpZXdFdmVudHNcbiAgICAgIGlmKHNldHRpbmdzLmNvbnRyb2xsZXJFdmVudHMpIHRoaXMuX2NvbnRyb2xsZXJFdmVudHMgPSBzZXR0aW5ncy5jb250cm9sbGVyRXZlbnRzXG4gICAgICBpZihzZXR0aW5ncy5lbWl0dGVyRXZlbnRzKSB0aGlzLl9lbWl0dGVyRXZlbnRzID0gc2V0dGluZ3MuZW1pdHRlckV2ZW50c1xuICAgICAgaWYoc2V0dGluZ3Mucm91dGVyRXZlbnRzKSB0aGlzLl9yb3V0ZXJFdmVudHMgPSBzZXR0aW5ncy5yb3V0ZXJFdmVudHNcbiAgICAgIGlmKFxuICAgICAgICB0aGlzLm1vZGVsRXZlbnRzICYmXG4gICAgICAgIHRoaXMubW9kZWxzICYmXG4gICAgICAgIHRoaXMubW9kZWxDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVuYWJsZU1vZGVsRXZlbnRzKClcbiAgICAgIH1cbiAgICAgIGlmKFxuICAgICAgICB0aGlzLnZpZXdFdmVudHMgJiZcbiAgICAgICAgdGhpcy52aWV3cyAmJlxuICAgICAgICB0aGlzLnZpZXdDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVuYWJsZVZpZXdFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMuY29udHJvbGxlckV2ZW50cyAmJlxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzICYmXG4gICAgICAgIHRoaXMuY29udHJvbGxlckNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlQ29udHJvbGxlckV2ZW50cygpXG4gICAgICB9XG4gICAgICBpZihcbiAgICAgICAgdGhpcy5yb3V0ZXJFdmVudHMgJiZcbiAgICAgICAgdGhpcy5yb3V0ZXJzICYmXG4gICAgICAgIHRoaXMucm91dGVyQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5lbmFibGVSb3V0ZXJFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMuZW1pdHRlckV2ZW50cyAmJlxuICAgICAgICB0aGlzLmVtaXR0ZXJzICYmXG4gICAgICAgIHRoaXMuZW1pdHRlckNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlRW1pdHRlckV2ZW50cygpXG4gICAgICB9XG4gICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLmRpc2FibGUoKVxuICAgIHRoaXMuZW5hYmxlKClcbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGxldCBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3NcbiAgICBpZihcbiAgICAgIHNldHRpbmdzICYmXG4gICAgICB0aGlzLmVuYWJsZWRcbiAgICApIHtcbiAgICAgIGlmKFxuICAgICAgICB0aGlzLm1vZGVsRXZlbnRzICYmXG4gICAgICAgIHRoaXMubW9kZWxzICYmXG4gICAgICAgIHRoaXMubW9kZWxDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmRpc2FibGVNb2RlbEV2ZW50cygpXG4gICAgICB9XG4gICAgICBpZihcbiAgICAgICAgdGhpcy52aWV3RXZlbnRzICYmXG4gICAgICAgIHRoaXMudmlld3MgJiZcbiAgICAgICAgdGhpcy52aWV3Q2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlVmlld0V2ZW50cygpXG4gICAgICB9XG4gICAgICBpZihcbiAgICAgICAgdGhpcy5jb250cm9sbGVyRXZlbnRzICYmXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMgJiZcbiAgICAgICAgdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlQ29udHJvbGxlckV2ZW50cygpXG4gICAgICB9fVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMucm91dGVyRXZlbnRzICYmXG4gICAgICAgIHRoaXMucm91dGVycyAmJlxuICAgICAgICB0aGlzLnJvdXRlckNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZVJvdXRlckV2ZW50cygpXG4gICAgICB9XG4gICAgICBpZihcbiAgICAgICAgdGhpcy5lbWl0dGVyRXZlbnRzICYmXG4gICAgICAgIHRoaXMuZW1pdHRlcnMgJiZcbiAgICAgICAgdGhpcy5lbWl0dGVyQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlRW1pdHRlckV2ZW50cygpXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tb2RlbENhbGxiYWNrc1xuICAgICAgICBkZWxldGUgdGhpcy5fdmlld0NhbGxiYWNrc1xuICAgICAgICBkZWxldGUgdGhpcy5fY29udHJvbGxlckNhbGxiYWNrc1xuICAgICAgICBkZWxldGUgdGhpcy5fZW1pdHRlckNhbGxiYWNrc1xuICAgICAgICBkZWxldGUgdGhpcy5fcm91dGVyQ2FsbGJhY2tzXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tb2RlbHNcbiAgICAgICAgZGVsZXRlIHRoaXMuX3ZpZXdzXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jb250cm9sbGVyc1xuICAgICAgICBkZWxldGUgdGhpcy5fZW1pdHRlcnNcbiAgICAgICAgZGVsZXRlIHRoaXMuX3JvdXRlcnNcbiAgICAgICAgZGVsZXRlIHRoaXMuX3JvdXRlckV2ZW50c1xuICAgICAgICBkZWxldGUgdGhpcy5fbW9kZWxFdmVudHNcbiAgICAgICAgZGVsZXRlIHRoaXMuX3ZpZXdFdmVudHNcbiAgICAgICAgZGVsZXRlIHRoaXMuX2NvbnRyb2xsZXJFdmVudHNcbiAgICAgICAgZGVsZXRlIHRoaXMuX2VtaXR0ZXJFdmVudHNcbiAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZVxuICAgIH1cbiAgfVxufVxuIiwiTVZDLlJvdXRlciA9IGNsYXNzIGV4dGVuZHMgTVZDLkJhc2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gIH1cbiAgZ2V0IHByb3RvY29sKCkgeyByZXR1cm4gd2luZG93LmxvY2F0aW9uLnByb3RvY29sIH1cbiAgZ2V0IGhvc3RuYW1lKCkgeyByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lIH1cbiAgZ2V0IHBvcnQoKSB7IHJldHVybiB3aW5kb3cubG9jYXRpb24ucG9ydCB9XG4gIGdldCBwYXRoKCkgeyByZXR1cm4gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lIH1cbiAgZ2V0IGhhc2goKSB7XG4gICAgbGV0IGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgIGxldCBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKVxuICAgIGlmKGhhc2hJbmRleCA+IC0xKSB7XG4gICAgICBsZXQgcGFyYW1JbmRleCA9IGhyZWYuaW5kZXhPZignPycpXG4gICAgICBsZXQgc2xpY2VTdGFydCA9IGhhc2hJbmRleCArIDFcbiAgICAgIGxldCBzbGljZVN0b3BcbiAgICAgIGlmKHBhcmFtSW5kZXggPiAtMSkge1xuICAgICAgICBzbGljZVN0b3AgPSAoaGFzaEluZGV4ID4gcGFyYW1JbmRleClcbiAgICAgICAgICA/IGhyZWYubGVuZ3RoXG4gICAgICAgICAgOiBwYXJhbUluZGV4XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGljZVN0b3AgPSBocmVmLmxlbmd0aFxuICAgICAgfVxuICAgICAgaHJlZiA9IGhyZWYuc2xpY2Uoc2xpY2VTdGFydCwgc2xpY2VTdG9wKVxuICAgICAgaWYoaHJlZi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGhyZWZcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG4gIGdldCBwYXJhbXMoKSB7XG4gICAgbGV0IGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgIGxldCBwYXJhbUluZGV4ID0gaHJlZi5pbmRleE9mKCc/JylcbiAgICBpZihwYXJhbUluZGV4ID4gLTEpIHtcbiAgICAgIGxldCBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKVxuICAgICAgbGV0IHNsaWNlU3RhcnQgPSBwYXJhbUluZGV4ICsgMVxuICAgICAgbGV0IHNsaWNlU3RvcFxuICAgICAgaWYoaGFzaEluZGV4ID4gLTEpIHtcbiAgICAgICAgc2xpY2VTdG9wID0gKHBhcmFtSW5kZXggPiBoYXNoSW5kZXgpXG4gICAgICAgICAgPyBocmVmLmxlbmd0aFxuICAgICAgICAgIDogaGFzaEluZGV4XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGljZVN0b3AgPSBocmVmLmxlbmd0aFxuICAgICAgfVxuICAgICAgaHJlZiA9IGhyZWYuc2xpY2Uoc2xpY2VTdGFydCwgc2xpY2VTdG9wKVxuICAgICAgaWYoaHJlZi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGhyZWZcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG4gIGdldCBfcm91dGVEYXRhKCkge1xuICAgIGxldCByb3V0ZURhdGEgPSB7XG4gICAgICBsb2NhdGlvbjoge30sXG4gICAgICBjb250cm9sbGVyOiB7fSxcbiAgICB9XG4gICAgbGV0IHBhdGggPSB0aGlzLnBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKGZyYWdtZW50KSA9PiBmcmFnbWVudC5sZW5ndGgpXG4gICAgcGF0aCA9IChwYXRoLmxlbmd0aClcbiAgICAgID8gcGF0aFxuICAgICAgOiBbJy8nXVxuICAgIGxldCBoYXNoID0gdGhpcy5oYXNoXG4gICAgbGV0IGhhc2hGcmFnbWVudHMgPSAoaGFzaClcbiAgICAgID8gaGFzaC5zcGxpdCgnLycpLmZpbHRlcigoZnJhZ21lbnQpID0+IGZyYWdtZW50Lmxlbmd0aClcbiAgICAgIDogbnVsbFxuICAgIGxldCBwYXJhbXMgPSB0aGlzLnBhcmFtc1xuICAgIGxldCBwYXJhbURhdGEgPSAocGFyYW1zKVxuICAgICAgPyBNVkMuVXRpbHMucGFyYW1zVG9PYmplY3QocGFyYW1zKVxuICAgICAgOiBudWxsXG4gICAgaWYodGhpcy5wcm90b2NvbCkgcm91dGVEYXRhLmxvY2F0aW9uLnByb3RvY29sID0gdGhpcy5wcm90b2NvbFxuICAgIGlmKHRoaXMuaG9zdG5hbWUpIHJvdXRlRGF0YS5sb2NhdGlvbi5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWVcbiAgICBpZih0aGlzLnBvcnQpIHJvdXRlRGF0YS5sb2NhdGlvbi5wb3J0ID0gdGhpcy5wb3J0XG4gICAgaWYodGhpcy5wYXRoKSByb3V0ZURhdGEubG9jYXRpb24ucGF0aCA9IHRoaXMucGF0aFxuICAgIGlmKFxuICAgICAgaGFzaCAmJlxuICAgICAgaGFzaEZyYWdtZW50c1xuICAgICkge1xuICAgICAgaGFzaEZyYWdtZW50cyA9IChoYXNoRnJhZ21lbnRzLmxlbmd0aClcbiAgICAgID8gaGFzaEZyYWdtZW50c1xuICAgICAgOiBbJy8nXVxuICAgICAgcm91dGVEYXRhLmxvY2F0aW9uLmhhc2ggPSB7XG4gICAgICAgIHBhdGg6IGhhc2gsXG4gICAgICAgIGZyYWdtZW50czogaGFzaEZyYWdtZW50cyxcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoXG4gICAgICBwYXJhbXMgJiZcbiAgICAgIHBhcmFtRGF0YVxuICAgICkge1xuICAgICAgcm91dGVEYXRhLmxvY2F0aW9uLnBhcmFtcyA9IHtcbiAgICAgICAgcGF0aDogcGFyYW1zLFxuICAgICAgICBkYXRhOiBwYXJhbURhdGEsXG4gICAgICB9XG4gICAgfVxuICAgIHJvdXRlRGF0YS5sb2NhdGlvbi5wYXRoID0ge1xuICAgICAgbmFtZTogdGhpcy5wYXRoLFxuICAgICAgZnJhZ21lbnRzOiBwYXRoLFxuICAgIH1cbiAgICByb3V0ZURhdGEubG9jYXRpb24uY3VycmVudFVSTCA9IHRoaXMuY3VycmVudFVSTFxuICAgIGxldCByb3V0ZUNvbnRyb2xsZXJEYXRhID0gdGhpcy5fcm91dGVDb250cm9sbGVyRGF0YVxuICAgIHJvdXRlRGF0YS5sb2NhdGlvbiA9IE9iamVjdC5hc3NpZ24oXG4gICAgICByb3V0ZURhdGEubG9jYXRpb24sXG4gICAgICByb3V0ZUNvbnRyb2xsZXJEYXRhLmxvY2F0aW9uXG4gICAgKVxuICAgIHJvdXRlRGF0YS5jb250cm9sbGVyID0gcm91dGVDb250cm9sbGVyRGF0YS5jb250cm9sbGVyXG4gICAgdGhpcy5yb3V0ZURhdGEgPSByb3V0ZURhdGFcbiAgICByZXR1cm4gdGhpcy5yb3V0ZURhdGFcbiAgfVxuICBnZXQgX3JvdXRlQ29udHJvbGxlckRhdGEoKSB7XG4gICAgbGV0IHJvdXRlRGF0YSA9IHtcbiAgICAgIGxvY2F0aW9uOiB7fSxcbiAgICB9XG4gICAgT2JqZWN0LmVudHJpZXModGhpcy5yb3V0ZXMpXG4gICAgICAuZm9yRWFjaCgoW3JvdXRlUGF0aCwgcm91dGVTZXR0aW5nc10pID0+IHtcbiAgICAgICAgbGV0IHBhdGhGcmFnbWVudHMgPSB0aGlzLnBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKGZyYWdtZW50KSA9PiBmcmFnbWVudC5sZW5ndGgpXG4gICAgICAgIHBhdGhGcmFnbWVudHMgPSAocGF0aEZyYWdtZW50cy5sZW5ndGgpXG4gICAgICAgICAgPyBwYXRoRnJhZ21lbnRzXG4gICAgICAgICAgOiBbJy8nXVxuICAgICAgICBsZXQgcm91dGVGcmFnbWVudHMgPSByb3V0ZVBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKGZyYWdtZW50LCBmcmFnbWVudEluZGV4KSA9PiBmcmFnbWVudC5sZW5ndGgpXG4gICAgICAgIHJvdXRlRnJhZ21lbnRzID0gKHJvdXRlRnJhZ21lbnRzLmxlbmd0aClcbiAgICAgICAgICA/IHJvdXRlRnJhZ21lbnRzXG4gICAgICAgICAgOiBbJy8nXVxuICAgICAgICBpZihcbiAgICAgICAgICBwYXRoRnJhZ21lbnRzLmxlbmd0aCAmJlxuICAgICAgICAgIHBhdGhGcmFnbWVudHMubGVuZ3RoID09PSByb3V0ZUZyYWdtZW50cy5sZW5ndGhcbiAgICAgICAgKSB7XG4gICAgICAgICAgbGV0IG1hdGNoXG4gICAgICAgICAgcmV0dXJuIHJvdXRlRnJhZ21lbnRzLmZpbHRlcigocm91dGVGcmFnbWVudCwgcm91dGVGcmFnbWVudEluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgbWF0Y2ggPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICBtYXRjaCA9PT0gdHJ1ZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmKHJvdXRlRnJhZ21lbnRbMF0gPT09ICc6Jykge1xuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50SURLZXkgPSByb3V0ZUZyYWdtZW50LnJlcGxhY2UoJzonLCAnJylcbiAgICAgICAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgICAgIHJvdXRlRnJhZ21lbnRJbmRleCA9PT0gcGF0aEZyYWdtZW50cy5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICByb3V0ZURhdGEubG9jYXRpb24uY3VycmVudElES2V5ID0gY3VycmVudElES2V5XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJvdXRlRGF0YS5sb2NhdGlvbltjdXJyZW50SURLZXldID0gcGF0aEZyYWdtZW50c1tyb3V0ZUZyYWdtZW50SW5kZXhdXG4gICAgICAgICAgICAgICAgcm91dGVGcmFnbWVudCA9IHRoaXMuZnJhZ21lbnRJRFJlZ0V4cFxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvdXRlRnJhZ21lbnQgPSByb3V0ZUZyYWdtZW50LnJlcGxhY2UobmV3IFJlZ0V4cCgnLycsICdnaScpLCAnXFxcXFxcLycpXG4gICAgICAgICAgICAgICAgcm91dGVGcmFnbWVudCA9IHRoaXMucm91dGVGcmFnbWVudE5hbWVSZWdFeHAocm91dGVGcmFnbWVudClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBtYXRjaCA9IHJvdXRlRnJhZ21lbnQudGVzdChwYXRoRnJhZ21lbnRzW3JvdXRlRnJhZ21lbnRJbmRleF0pXG4gICAgICAgICAgICAgIGlmKFxuICAgICAgICAgICAgICAgIG1hdGNoID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgcm91dGVGcmFnbWVudEluZGV4ID09PSBwYXRoRnJhZ21lbnRzLmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcm91dGVEYXRhLmxvY2F0aW9uLnJvdXRlID0ge1xuICAgICAgICAgICAgICAgICAgbmFtZTogcm91dGVQYXRoLFxuICAgICAgICAgICAgICAgICAgZnJhZ21lbnRzOiByb3V0ZUZyYWdtZW50cyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm91dGVEYXRhLmNvbnRyb2xsZXIgPSByb3V0ZVNldHRpbmdzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvdXRlU2V0dGluZ3NcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pWzBdXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgcmV0dXJuIHJvdXRlRGF0YVxuICB9XG4gIGdldCBfZW5hYmxlZCgpIHsgcmV0dXJuIHRoaXMuZW5hYmxlZCB8fCBmYWxzZSB9XG4gIHNldCBfZW5hYmxlZChlbmFibGVkKSB7IHRoaXMuZW5hYmxlZCA9IGVuYWJsZWQgfVxuICBnZXQgX3JvdXRlcygpIHtcbiAgICB0aGlzLnJvdXRlcyA9ICh0aGlzLnJvdXRlcylcbiAgICAgID8gdGhpcy5yb3V0ZXNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5yb3V0ZXNcbiAgfVxuICBzZXQgX3JvdXRlcyhyb3V0ZXMpIHtcbiAgICB0aGlzLnJvdXRlcyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICByb3V0ZXMsIHRoaXMuX3JvdXRlc1xuICAgIClcbiAgfVxuICBnZXQgX2NvbnRyb2xsZXIoKSB7IHJldHVybiB0aGlzLmNvbnRyb2xsZXIgfVxuICBzZXQgX2NvbnRyb2xsZXIoY29udHJvbGxlcikgeyB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyIH1cbiAgZ2V0IF9wcmV2aW91c1VSTCgpIHsgcmV0dXJuIHRoaXMucHJldmlvdXNVUkwgfVxuICBzZXQgX3ByZXZpb3VzVVJMKHByZXZpb3VzVVJMKSB7IHRoaXMucHJldmlvdXNVUkwgPSBwcmV2aW91c1VSTCB9XG4gIGdldCBfY3VycmVudFVSTCgpIHsgcmV0dXJuIHRoaXMuY3VycmVudFVSTCB9XG4gIHNldCBfY3VycmVudFVSTChjdXJyZW50VVJMKSB7XG4gICAgaWYodGhpcy5jdXJyZW50VVJMKSB0aGlzLl9wcmV2aW91c1VSTCA9IHRoaXMuY3VycmVudFVSTFxuICAgIHRoaXMuY3VycmVudFVSTCA9IGN1cnJlbnRVUkxcbiAgfVxuICBnZXQgZnJhZ21lbnRJRFJlZ0V4cCgpIHsgcmV0dXJuIG5ldyBSZWdFeHAoL14oWzAtOUEtWlxcP1xcPVxcLFxcLlxcKlxcLVxcX1xcJ1xcXCJcXF5cXCVcXCRcXCNcXEBcXCFcXH5cXChcXClcXHtcXH1cXCZcXDxcXD5cXFxcXFwvXSkqJC8sICdnaScpIH1cbiAgcm91dGVGcmFnbWVudE5hbWVSZWdFeHAoZnJhZ21lbnQpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicuY29uY2F0KGZyYWdtZW50LCAnJCcpKVxuICB9XG4gIGVuYWJsZSgpIHtcbiAgICBpZihcbiAgICAgICF0aGlzLmVuYWJsZWRcbiAgICApIHtcbiAgICAgIHRoaXMuZW5hYmxlRW1pdHRlcnMoKVxuICAgICAgdGhpcy5lbmFibGVFdmVudHMoKVxuICAgICAgdGhpcy5lbmFibGVSb3V0ZXMoKVxuICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWVcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGlmKFxuICAgICAgdGhpcy5lbmFibGVkXG4gICAgKSB7XG4gICAgICB0aGlzLmRpc2FibGVFdmVudHMoKVxuICAgICAgdGhpcy5kaXNhYmxlUm91dGVzKClcbiAgICAgIHRoaXMuZGlzYWJsZUVtaXR0ZXJzKClcbiAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZVxuICAgIH1cbiAgfVxuICBlbmFibGVSb3V0ZXMoKSB7XG4gICAgaWYodGhpcy5zZXR0aW5ncy5jb250cm9sbGVyKSB0aGlzLl9jb250cm9sbGVyID0gdGhpcy5zZXR0aW5ncy5jb250cm9sbGVyXG4gICAgdGhpcy5fcm91dGVzID0gT2JqZWN0LmVudHJpZXModGhpcy5zZXR0aW5ncy5yb3V0ZXMpLnJlZHVjZShcbiAgICAgIChcbiAgICAgICAgX3JvdXRlcyxcbiAgICAgICAgW3JvdXRlUGF0aCwgcm91dGVTZXR0aW5nc10sXG4gICAgICAgIHJvdXRlSW5kZXgsXG4gICAgICAgIG9yaWdpbmFsUm91dGVzLFxuICAgICAgKSA9PiB7XG4gICAgICAgIF9yb3V0ZXNbcm91dGVQYXRoXSA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgcm91dGVTZXR0aW5ncyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjYWxsYmFjazogdGhpcy5jb250cm9sbGVyW3JvdXRlU2V0dGluZ3MuY2FsbGJhY2tdLmJpbmQodGhpcy5jb250cm9sbGVyKSxcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIF9yb3V0ZXNcbiAgICAgIH0sXG4gICAgICB7fVxuICAgIClcbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIGVuYWJsZUVtaXR0ZXJzKCkge1xuICAgIHRoaXMuX2VtaXR0ZXJzID0ge1xuICAgICAgbmF2aWdhdGVFbWl0dGVyOiBuZXcgTVZDLkVtaXR0ZXJzLk5hdmlnYXRlKCksXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgZGlzYWJsZUVtaXR0ZXJzKCkge1xuICAgIGRlbGV0ZSB0aGlzLl9lbWl0dGVycy5uYXZpZ2F0ZUVtaXR0ZXJcbiAgfVxuICBkaXNhYmxlUm91dGVzKCkge1xuICAgIGRlbGV0ZSB0aGlzLl9yb3V0ZXNcbiAgICBkZWxldGUgdGhpcy5fY29udHJvbGxlclxuICB9XG4gIGVuYWJsZUV2ZW50cygpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHRoaXMucm91dGVDaGFuZ2UuYmluZCh0aGlzKSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIGRpc2FibGVFdmVudHMoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aGlzLnJvdXRlQ2hhbmdlLmJpbmQodGhpcykpXG4gIH1cbiAgcm91dGVDaGFuZ2UoKSB7XG4gICAgdGhpcy5fY3VycmVudFVSTCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgbGV0IHJvdXRlRGF0YSA9IHRoaXMuX3JvdXRlRGF0YVxuICAgIGlmKHJvdXRlRGF0YS5jb250cm9sbGVyKSB7XG4gICAgICBsZXQgbmF2aWdhdGVFbWl0dGVyID0gdGhpcy5lbWl0dGVycy5uYXZpZ2F0ZUVtaXR0ZXJcbiAgICAgIGlmKHRoaXMucHJldmlvdXNVUkwpIHJvdXRlRGF0YS5wcmV2aW91c1VSTCA9IHRoaXMucHJldmlvdXNVUkxcbiAgICAgIG5hdmlnYXRlRW1pdHRlclxuICAgICAgICAudW5zZXQoKVxuICAgICAgICAuc2V0KHJvdXRlRGF0YSlcbiAgICAgIHRoaXMuZW1pdChcbiAgICAgICAgbmF2aWdhdGVFbWl0dGVyLm5hbWUsXG4gICAgICAgIG5hdmlnYXRlRW1pdHRlci5lbWlzc2lvbigpXG4gICAgICApXG4gICAgICByb3V0ZURhdGEuY29udHJvbGxlci5jYWxsYmFjayhcbiAgICAgICAgbmF2aWdhdGVFbWl0dGVyLmVtaXNzaW9uKClcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICBuYXZpZ2F0ZShwYXRoKSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwYXRoXG4gIH1cbn1cbiJdLCJmaWxlIjoiYnJvd3Nlci9tdmMtZnJhbWV3b3JrLW1pbi5qcyJ9
