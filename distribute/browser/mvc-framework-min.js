var MVC=MVC||{};MVC.Constants={},MVC.CONST=MVC.Constants,MVC.Constants.Events={},MVC.CONST.EV=MVC.Constants.Events,MVC.Templates={ObjectQueryStringFormatInvalidRoot:function(t){return['Object Query "string" property must be formatted to first include "[@]".'].join("\n")},DataSchemaMismatch:function(t){return["Data and Schema properties do not match."].join("\n")},DataFunctionInvalid:function(t){['Model Data property type "Function" is not valid.'].join("\n")},DataUndefined:function(t){["Model Data property undefined."].join("\n")},SchemaUndefined:function(t){['Model "Schema" undefined.'].join("\n")}},MVC.TMPL=MVC.Templates,MVC.Utils={},MVC.Utils.isArray=function(t){return Array.isArray(t)},MVC.Utils.isObject=function(t){return!Array.isArray(t)&&"object"==typeof t},MVC.Utils.isEqualType=function(t,e){return t===e},MVC.Utils.isHTMLElement=function(t){return t instanceof HTMLElement},MVC.Utils.typeOf=function(t){switch(typeof t){case"object":return MVC.Utils.isArray(t)?"array":MVC.Utils.isObject(t)?"object":null===t?"null":void 0;case"string":case"number":case"boolean":case"undefined":case"function":return typeof t}},MVC.Utils.addPropertiesToObject=function(){var t;switch(arguments.length){case 2:var e=arguments[0];for(var[s,i]of(t=arguments[1],Object.entries(e)))t[s]=i;break;case 3:var n=arguments[0],a=arguments[1];(t=arguments[2])[n]=a}return t},MVC.Utils.objectQuery=function(t,e){var s=MVC.Utils.objectQuery.parseNotation(t);return"@"===s[0]&&s.splice(0,1),s.length?(e=MVC.Utils.isObject(e)?Object.entries(e):e,s.reduce((t,e,s,i)=>{var n=[];for(var[a,r]of(e=MVC.Utils.objectQuery.parseFragment(e),t))a.match(e)&&(n=s===i.length-1?n.concat([[a,r]]):n.concat(Object.entries(r)));return t=n},e)):e},MVC.Utils.objectQuery.parseNotation=function(t){return t="["===t.charAt(0)&&"]"==t.charAt(t.length-1)?t.slice(1,-1).split("]["):t.split(".")},MVC.Utils.objectQuery.parseFragment=function(t){return"/"===t.charAt(0)&&"/"==t.charAt(t.length-1)&&(t=t.slice(1,-1),t=new RegExp(t)),t},MVC.Utils.toggleEventsForTargetObjects=function(t,e,s,i){for(var[n,a]of Object.entries(e)){var r=n.split(" "),l=r[0],h=r[1],o=MVC.Utils.objectQuery(l,s);for(var[c,d]of o){var u="on"===t?d instanceof NodeList||d instanceof HTMLElement?"addEventListener":"on":d instanceof NodeList||d instanceof HTMLElement?"removeEventListener":"off",v=MVC.Utils.objectQuery(a,i)[0][1];if(d instanceof NodeList)for(var b of d)b[u](h,v);else HTMLElement,d[u](h,v)}}},MVC.Utils.bindEventsToTargetObjects=function(){this.toggleEventsForTargetObjects("on",...arguments)},MVC.Utils.unbindEventsFromTargetObjects=function(){this.toggleEventsForTargetObjects("off",...arguments)},MVC.Utils.validateDataSchema=function(t,e){if(!e)throw MVC.TMPL;switch(MVC.Utils.typeOf(t)){case"array":var s=[];if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(s)))for(var[i,n]of(console.log(e.name),Object.entries(t)))s.push(this.validateDataSchema(n));return s;case"object":var a={};if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(a)))for(var[r,l]of(console.log(e.name),Object.entries(t)))a[r]=this.validateDataSchema(l,e[r]);return a;case"string":case"number":case"boolean":if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(t)))return console.log(e.name),t;throw MVC.TMPL;case"null":if(MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(t)))return t;break;case"undefined":case"function":throw MVC.TMPL}},MVC.Events=class{constructor(){}get _events(){return this.events=this.events?this.events:{},this.events}eventCallbacks(t){return this._events[t]||{}}eventCallbackName(t){return t.name.length?t.name:"anonymousFunction"}eventCallbackGroup(t,e){return t[e]||[]}on(t,e){var s=this.eventCallbacks(t),i=this.eventCallbackName(e),n=this.eventCallbackGroup(s,i);n.push(e),s[i]=n,this._events[t]=s}off(){switch(arguments.length){case 1:var t=arguments[0];delete this._events[t];break;case 2:t=arguments[0];var e=arguments[1],s=this.eventCallbackName(e);delete this._events[t][s]}}emit(t,e){var s=this.eventCallbacks(t);for(var[i,n]of Object.entries(s))for(var a of n){a(e,...Object.values(arguments).splice(2))}}},MVC.Channels=class{constructor(){}get _channels(){return this.channels=this.channels?this.channels:{},this.channels}channel(t){return this._channels[t]=this._channels[t]?this._channels[t]:new MVC.Channels.Channel,this._channels[t]}off(t){delete this._channels[t]}},MVC.Channels.Channel=class{constructor(){}get _responses(){return this.responses=this.responses?this.responses:{},this.responses}response(t,e){if(!e)return this._responses[response];this._responses[t]=e}request(t,e){if(this._responses[t])return this._responses[t](e)}off(t){if(t)delete this._responses[t];else for(var[e]of Object.keys(this._responses))delete this._responses[e]}},MVC.Base=class extends MVC.Events{constructor(t,e,s){super(),s&&(this._configuration=s),e&&(this._options=e),t&&(this._settings=t)}get _configuration(){return this.configuration=this.configuration?this.configuration:{},this.configuration}set _configuration(t){this.configuration=t}get _options(){return this.options=this.options?this.options:{},this.options}set _options(t){this.options=t}get _settings(){return this.settings=this.settings?this.settings:{},this.settings}set _settings(t){this.settings=t}},MVC.Observer=class extends MVC.Base{constructor(){super(...arguments),this.enable()}get _connected(){return this.connected||!1}set _connected(t){this.connected=t}get observer(){return this._observer=this._observer?this._observer:new MutationObserver(this.observerCallback.bind(this)),this._observer}get _target(){return this.target}set _target(t){this.target=t}get _options(){return this.options}set _options(t){this.options=t}get _mutations(){return this.mutations=this.mutations?this.mutations:[],this.mutations}set _mutations(t){for(var[e,s]of Object.entries(t.settings)){var i,n=e.split(" ");i={target:MVC.Utils.objectQuery(n[0],t.targets)[0][1],name:n[1],callback:s=MVC.Utils.objectQuery(s,t.callbacks)[0][1]},this._mutations.push(i)}}enable(){var t=this.settings;t&&!this.enabled&&(t.target&&(this._target=t.target instanceof NodeList?t.target[0]:t.target),t.options&&(this._options=t.options),t.mutations&&(this._mutations=t.mutations),this._enabled=!0)}disable(){this.settings&&this.enabled&&(this.target&&delete this.target,this.options&&delete this.options,this.mutations&&delete this.mutations,this.observeer&&delete this.observer,this._enabled=!1)}observerCallback(t,e){var s=this,i=function(t,e){switch(e.type){case"childList":var i=function(t){if(e[t].length){var i=function(i,n){s.mutations.forEach(s=>{if(t.match(new RegExp("^".concat(s.name))))if(s.target instanceof HTMLElement)s.target===n&&s.callback({mutation:s,mutationRecord:e});else if(s.target instanceof NodeList)for(var i of s.target)i===n&&i.callback({mutation:s,mutationRecord:e})})};for(var[n,a]of Object.entries(e[t]))i(0,a)}};for(var n of["addedNodes","removedNodes"])i(n);break;case"attributes":var a=s.mutations.filter(t=>t.name===e.type&&t.data===e.attributeName)[0];a&&a.callback({mutation:a,mutationRecord:e})}};for(var[n,a]of Object.entries(t))i(0,a)}connect(){!this.connected&&(this.target instanceof NodeList&&this.target.length||this.target instanceof Node)&&(this.observer.observe(this.target,this.options),this._connected=!0)}disconnect(){this.connected&&(this.observer.disconnect(),this._connected=!1)}},MVC.Service=class extends MVC.Base{constructor(){super(...arguments),this.enable()}get _defaults(){return this.defaults||{contentType:{"Content-Type":"application/json"},responseType:"json"}}get _responseTypes(){return["","arraybuffer","blob","document","json","text"]}get _responseType(){return this.responseType}set _responseType(t){this._xhr.responseType=this._responseTypes.find(e=>e===t)||this._defaults.responseType}get _type(){return this.type}set _type(t){this.type=t}get _url(){return this.url}set _url(t){this.url=t}get _headers(){return this.headers||[]}set _headers(t){for(var e of(this._headers.length=0,t))this._xhr.setRequestHeader({header:e}[0],{header:e}[1]),this._headers.push(e)}get _xhr(){return this.xhr=this.xhr?this.xhr:new XMLHttpRequest,this.xhr}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}newXHR(){return new Promise((t,e)=>{200===this._xhr.status&&this._xhr.abort(),this._xhr.open(this._type,this._url),this._xhr.onload=t,this._xhr.onerror=e,this._xhr.send(this._data)})}enable(){var t=this.settings;t&&!this.enabled&&(t.type&&(this._type=t.type),t.url&&(this._url=t.url),t.data&&(this._data=t.data||null),t.headers&&(this._headers=t.headers||[this._defaults.contentType]),this.settings.responseType&&(this._responseType=this._settings.responseType),this._enabled=!0)}disable(){Object.keys(this.settings).length&&(delete this.settings.type,delete this.settings.url,delete this.settings.data,delete this.settings.headers,delete this.settings.responseType,this._enabled=!0)}},MVC.Model=class extends MVC.Base{constructor(){super(...arguments),this.enable()}get _isSetting(){return this.isSetting}set _isSetting(t){this.isSetting=t}get _defaults(){return this._defaults}set _defaults(t){this.defaults=t,this.set(this.defaults)}get _schema(){return this._schema}set _schema(t){this.schema=t}get _histiogram(){return this.histiogram||{length:1}}set _histiogram(t){this.histiogram=Object.assign(this._histiogram,t)}get _history(){return this.history=this.history?this.history:[],this.history}set _history(t){Object.keys(t).length&&this._histiogram.length&&(this._history.unshift(this.parse(t)),this._history.splice(this._histiogram.length))}get _data(){return this.data=this.data?this.data:{},this.data}get _dataEvents(){return this.dataEvents=this.dataEvents?this.dataEvents:{},this.dataEvents}set _dataEvents(t){this.dataEvents=MVC.Utils.addPropertiesToObject(t,this._dataEvents)}get _dataCallbacks(){return this.dataCallbacks=this.dataCallbacks?this.dataCallbacks:{},this.dataCallbacks}set _dataCallbacks(t){this.dataCallbacks=MVC.Utils.addPropertiesToObject(t,this._dataCallbacks)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}addDataEvents(){MVC.Utils.bindEventsToTargetObjects(this.dataEvents,this,this.dataCallbacks)}get(){var t=arguments[0];return this._data["_".concat(t)]}set(){switch(this._history=this.parse(),arguments.length){case 1:var t=Object.entries(arguments[0]);t.forEach((e,s)=>{var[i,n]=e;0===s?this._isSetting=!0:s===t.length-1&&(this._isSetting=!1),this.setDataProperty(i,n)});break;case 2:var e=arguments[0],s=arguments[1];this.setDataProperty(e,s);break;case 3:e=arguments[0],s=arguments[1];var i=arguments[2];this.setDataProperty(e,s,i)}}unset(){switch(this._history=this.parse(),arguments.length){case 0:for(var t of Object.keys(this._data))this.unsetDataProperty(t);break;case 1:var e=arguments[0];this.unsetDataProperty(e)}}setDataProperty(t,e,s){if(!this._data["_".concat(t)]){var i=this;Object.defineProperties(this._data,{["_".concat(t)]:{configurable:!0,get(){return this[t]},set(e){if(this[t]=e,!s&&!i._isSetting){var n=["set",":",t].join("");i.emit(n,{name:n,data:{key:t,value:e}},i),i.emit("set",{name:"set",data:{key:t,value:e}},i)}}}})}this._data["_".concat(t)]=e}unsetDataProperty(t){var e=["unset",":",t].join(""),s=this._data[t];delete this._data["_".concat(t)],delete this._data[t],this.emit(e,{name:e,data:{key:t,value:s}}),this.emit("unset",{name:"unset",data:{key:t,value:s}})}parse(t){return t=t||this._data,JSON.parse(JSON.stringify(Object.assign({},t)))}enable(){this.settings&&!this.enabled&&(this.settings.histiogram&&(this._histiogram=this.settings.histiogram),this.settings.data&&this.set(this.settings.data),this.settings.dataCallbacks&&(this._dataCallbacks=this.settings.dataCallbacks),this.settings.dataEvents&&(this._dataEvents=this.settings.dataEvents),this.settings.schema&&(this._schema=this.settings.schema),this.settings.defaults&&(this._defaults=this.settings.defaults),this.dataEvents&&this.dataCallbacks&&this.addDataEvents(),this._enabled=!0)}disable(){this.settings&&!this.enabled&&(this.dataEvents&&this.dataCallbacks&&this.removeDataEvents(),delete this._histiogram,delete this._data,delete this._dataCallbacks,delete this._dataEvents,delete this._schema,delete this._defaults,this._enabled=!1)}},MVC.Emitter=class extends MVC.Model{constructor(){super(...arguments),this.settings&&this.settings.name&&(this._name=this.settings.name)}get _name(){return this.name}set _name(t){this.name=t}get emission(){return{name:this._name,data:this.parse()}}},MVC.View=class extends MVC.Base{constructor(){super(...arguments),this.enable()}get _elementName(){return this._element.tagName}set _elementName(t){this._element||(this._element=document.createElement(t))}get _element(){return this.element}set _element(t){t instanceof HTMLElement?this.element=t:"string"==typeof t&&(this.element=document.querySelector(t)),this.elementObserver.observe(this.element,{subtree:!0,childList:!0})}get _attributes(){return this._element.attributes}set _attributes(t){for(var[e,s]of Object.entries(t))void 0===s?this._element.removeAttribute(e):this._element.setAttribute(e,s)}get _ui(){return this.ui=this.ui?this.ui:{},this.ui}set _ui(t){for(var[e,s]of(this._ui.$element||(this._ui.$element=this.element),Object.entries(t)))s instanceof HTMLElement?this._ui[e]=s:"string"==typeof s&&(this._ui[e]=this._element.querySelectorAll(s))}get _uiEvents(){return this.uiEvents}set _uiEvents(t){this.uiEvents=t}get _uiCallbacks(){return this.uiCallbacks=this.uiCallbacks?this.uiCallbacks:{},this.uiCallbacks}set _uiCallbacks(t){this.uiCallbacks=MVC.Utils.addPropertiesToObject(t,this._uiCallbacks)}get _observerCallbacks(){return this.observerCallbacks=this.observerCallbacks?this.observerCallbacks:{},this.observerCallbacks}set _observerCallbacks(t){this.observerCallbacks=MVC.Utils.addPropertiesToObject(t,this._observerCallbacks)}get _uiEmitters(){return this.uiEmitters=this.uiEmitters?this.uiEmitters:{},this.uiEmitters}set _uiEmitters(t){var e={};t.forEach(t=>{var s=new t;e[s.name]=s}),this.uiEmitters=MVC.Utils.addPropertiesToObject(e,this._uiEmitters)}get elementObserver(){return this._elementObserver=this._elementObserver?this._elementObserver:new MutationObserver(this.elementObserve.bind(this)),this._elementObserver}elementObserve(t,e){for(var[s,i]of Object.entries(t))switch(i.type){case"childList":for(var n of["addedNodes","removedNodes"])i[n].length&&this.resetUI()}}get _insert(){return this.insert}set _insert(t){this.insert=t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _templates(){return this.templates=this.templates?this.templates:{},this.templates}set _templates(t){for(var[e,s]of Object.entries(t))this._templates[e]=s}autoInsert(){return document.querySelectorAll(this.insert.element).forEach(t=>{t.insertAdjacentElement(this.insert.method,this.element)})}autoRemove(){this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element)}addElement(t){(t=t||this.settings).elementName&&(this._elementName=t.elementName),t.element&&(this._element=t.element),t.attributes&&(this._attributes=t.attributes),t.templates&&(this._templates=t.templates),t.insert&&(this._insert=t.insert)}removeElement(t){t=t||this.settings,this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element),this.element&&delete this.element,this.attributes&&delete this.attributes,this.templates&&delete this.templates,this.insert&&delete this.insert}resetUI(){this.removeUI(),this.addUI()}addUI(t){(t=t||this.settings).ui&&(this._ui=t.ui),t.uiEmitters&&(this._uiEmitters=t.uiEmitters),t.uiCallbacks&&(this._uiCallbacks=t.uiCallbacks),t.uiEvents&&(this._uiEvents=t.uiEvents,this.addUIEvents())}removeUI(t){(t=t||this.settings).uiEvents&&(this.removeUIEvents(),delete this._uiEvents),delete this.uiEvents,delete this.ui,delete this.uiCallbacks}addUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.bindEventsToTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}removeUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.unbindEventsFromTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}enable(){var t=this.settings;t&&!this.enabled&&(this.addElement(t),this.addUI(t),this._enabled=!0)}disable(){var t=this.settings;t&&this.enabled&&(this.removeUI(t),this.removeElement(t),this._enabled=!1)}},MVC.Controller=class extends MVC.Base{constructor(){super(...arguments),this.enable()}get _emitters(){return this.emitters=this.emitters?this.emitters:{},this.emitters}set _emitters(t){this.emitters=MVC.Utils.addPropertiesToObject(t,this._emitters)}get _modelCallbacks(){return this.modelCallbacks=this.modelCallbacks?this.modelCallbacks:{},this.modelCallbacks}set _modelCallbacks(t){this.modelCallbacks=MVC.Utils.addPropertiesToObject(t,this._modelCallbacks)}get _viewCallbacks(){return this.viewCallbacks=this.viewCallbacks?this.viewCallbacks:{},this.viewCallbacks}set _viewCallbacks(t){this.viewCallbacks=MVC.Utils.addPropertiesToObject(t,this._viewCallbacks)}get _controllerCallbacks(){return this.controllerCallbacks=this.controllerCallbacks?this.controllerCallbacks:{},this.controllerCallbacks}set _controllerCallbacks(t){this.controllerCallbacks=MVC.Utils.addPropertiesToObject(t,this._controllerCallbacks)}get _routerCallbacks(){return this.routerCallbacks=this.routerCallbacks?this.routerCallbacks:{},this.routerCallbacks}set _routerCallbacks(t){this.routerCallbacks=MVC.Utils.addPropertiesToObject(t,this._routerCallbacks)}get _models(){return this.models=this.models?this.models:{},this.models}set _models(t){this.models=MVC.Utils.addPropertiesToObject(t,this._models)}get _views(){return this.views=this.views?this.views:{},this.views}set _views(t){this.views=MVC.Utils.addPropertiesToObject(t,this._views)}get _controllers(){return this.controllers=this.controllers?this.controllers:{},this.controllers}set _controllers(t){this.controllers=MVC.Utils.addPropertiesToObject(t,this._controllers)}get _routers(){return this.routers=this.routers?this.routers:{},this.routers}set _routers(t){this.routers=MVC.Utils.addPropertiesToObject(t,this._routers)}get _modelEvents(){return this.modelEvents=this.modelEvents?this.modelEvents:{},this.modelEvents}set _modelEvents(t){this.modelEvents=MVC.Utils.addPropertiesToObject(t,this._modelEvents)}get _viewEvents(){return this.viewEvents=this.viewEvents?this.viewEvents:{},this.viewEvents}set _viewEvents(t){this.viewEvents=MVC.Utils.addPropertiesToObject(t,this._viewEvents)}get _controllerEvents(){return this.controllerEvents=this.controllerEvents?this.controllerEvents:{},this.controllerEvents}set _controllerEvents(t){this.controllerEvents=MVC.Utils.addPropertiesToObject(t,this._controllerEvents)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}addModelEvents(){MVC.Utils.bindEventsToTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}removeModelEvents(){MVC.Utils.unbindEventsToTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}addViewEvents(){MVC.Utils.bindEventsToTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}removeViewEvents(){MVC.Utils.unbindEventsToTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}addControllerEvents(){MVC.Utils.bindEventsToTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}removeControllerEvents(){MVC.Utils.unbindEventsToTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}enable(){var t=this.settings;t&&!this.enabled&&(t.emitters&&(this._emitters=t.emitters),t.modelCallbacks&&(this._modelCallbacks=t.modelCallbacks),t.viewCallbacks&&(this._viewCallbacks=t.viewCallbacks),t.controllerCallbacks&&(this._controllerCallbacks=t.controllerCallbacks),t.routerCallbacks&&(this._routerCallbacks=t.routerCallbacks),t.models&&(this._models=t.models),t.views&&(this._views=t.views),t.controllers&&(this._controllers=t.controllers),t.routers&&(this._routers=t.routers),t.modelEvents&&(this._modelEvents=t.modelEvents),t.viewEvents&&(this._viewEvents=t.viewEvents),t.controllerEvents&&(this._controllerEvents=t.controllerEvents),this.modelEvents&&this.models&&this.modelCallbacks&&this.addModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.addViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.addControllerEvents(),this._enabled=!0)}disable(){this.settings&&this.enabled&&(this.modelEvents&&this.models&&this.modelCallbacks&&this.removeModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.removeViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.removeControllerEvents(),delete this._emitters,delete this._modelCallbacks,delete this._viewCallbacks,delete this._controllerCallbacks,delete this._routerCallbacks,delete this._models,delete this._views,delete this._controllers,delete this._routers,delete this._modelEvents,delete this._viewEvents,delete this._controllerEvents,this._enabled=!1)}},MVC.Router=class extends MVC.Base{constructor(){super(...arguments),this.addSettings(),this.setRoutes(this.routes,this.controllers),this.setEvents(),this.start(),"function"==typeof this.initialize&&this.initialize()}addSettings(){this._settings&&(this._settings.routes&&(this.routes=this._settings.routes),this._settings.controllers&&(this.controllers=this._settings.controllers))}start(){""===this.getRoute()?this.navigate("/"):window.dispatchEvent(new Event("hashchange"))}setRoutes(t,e){for(var s in t)this.routes[s]=e[t[s]]}setEvents(){window.addEventListener("hashchange",this.hashChange.bind(this))}getRoute(){return String(window.location.hash).split("#").pop()}hashChange(t){var e=this.getRoute();try{this.routes[e](t),this.emit("navigate",this)}catch(t){}}navigate(t){window.location.hash=t}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
