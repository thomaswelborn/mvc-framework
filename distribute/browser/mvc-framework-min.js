var MVC=MVC||{};MVC.Constants={},MVC.CONST=MVC.Constants,MVC.Constants.Events={},MVC.CONST.EV=MVC.Constants.Events,MVC.Templates={ObjectQueryStringFormatInvalidRoot:function(t){return['Object Query "string" property must be formatted to first include "[@]".'].join("\n")},DataSchemaMismatch:function(t){return["Data and Schema properties do not match."].join("\n")},DataFunctionInvalid:function(t){['Model Data property type "Function" is not valid.'].join("\n")},DataUndefined:function(t){["Model Data property undefined."].join("\n")},SchemaUndefined:function(t){['Model "Schema" undefined.'].join("\n")}},MVC.TMPL=MVC.Templates,MVC.Utils={},MVC.Utils.isArray=function(t){return Array.isArray(t)},MVC.Utils.isObject=function(t){return!Array.isArray(t)&&"object"==typeof t},MVC.Utils.isEqualType=function(t,e){return t===e},MVC.Utils.isHTMLElement=function(t){return t instanceof HTMLElement},MVC.Utils.typeOf=function(t){switch(typeof t){case"object":return MVC.Utils.isArray(t)?"array":MVC.Utils.isObject(t)?"object":null===t?"null":void 0;case"string":case"number":case"boolean":case"undefined":case"function":return typeof t}},MVC.Utils.addPropertiesToObject=function(){var t;switch(arguments.length){case 2:var e=arguments[0];for(var[s,i]of(t=arguments[1],Object.entries(e)))t[s]=i;break;case 3:var r=arguments[0],n=arguments[1];(t=arguments[2])[r]=n}return t},MVC.Utils.objectQuery=function(t,e){var s=MVC.Utils.objectQuery.parseNotation(t);return"@"===s[0]&&s.splice(0,1),s.length?(e=MVC.Utils.isObject(e)?Object.entries(e):e,s.reduce((t,e,s,i)=>{var r=[];for(var[n,a]of(e=MVC.Utils.objectQuery.parseFragment(e),t))n.match(e)&&(r=s===i.length-1?r.concat([[n,a]]):r.concat(Object.entries(a)));return t=r},e)):e},MVC.Utils.objectQuery.parseNotation=function(t){return t="["===t.charAt(0)&&"]"==t.charAt(t.length-1)?t.slice(1,-1).split("]["):t.split(".")},MVC.Utils.objectQuery.parseFragment=function(t){return"/"===t.charAt(0)&&"/"==t.charAt(t.length-1)&&(t=t.slice(1,-1),t=new RegExp("^".concat(t,"$"))),t},MVC.Utils.toggleEventsForTargetObjects=function(t,e,s,i){for(var[r,n]of Object.entries(e)){var a=r.split(" "),l=a[0],h=a[1],o=MVC.Utils.objectQuery(l,s);for(var[c,d]of o=MVC.Utils.isArray(o)?o:[["@",o]]){var v="on"===t?d instanceof NodeList||d instanceof HTMLElement||d instanceof Document?"addEventListener":"on":d instanceof NodeList||d instanceof HTMLElement||d instanceof Document?"removeEventListener":"off",b=MVC.Utils.objectQuery(n,i)[0][1];if(d instanceof NodeList)for(var u of d)u[v](h,b);else HTMLElement,d[v](h,b)}}},MVC.Utils.bindEventsToTargetObjects=function(){this.toggleEventsForTargetObjects("on",...arguments)},MVC.Utils.unbindEventsFromTargetObjects=function(){this.toggleEventsForTargetObjects("off",...arguments)},MVC.Utils.validateDataSchema=function(t,e){if(!e)throw MVC.TMPL;switch(MVC.Utils.typeOf(t)){case"array":var s=[];if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(s)))for(var[i,r]of(console.log(e.name),Object.entries(t)))s.push(this.validateDataSchema(r));return s;case"object":var n={};if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(n)))for(var[a,l]of(console.log(e.name),Object.entries(t)))n[a]=this.validateDataSchema(l,e[a]);return n;case"string":case"number":case"boolean":if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(t)))return console.log(e.name),t;throw MVC.TMPL;case"null":if(MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(t)))return t;break;case"undefined":case"function":throw MVC.TMPL}},MVC.Events=class{constructor(){}get _events(){return this.events=this.events?this.events:{},this.events}eventCallbacks(t){return this._events[t]||{}}eventCallbackName(t){return t.name.length?t.name:"anonymousFunction"}eventCallbackGroup(t,e){return t[e]||[]}on(t,e){var s=this.eventCallbacks(t),i=this.eventCallbackName(e),r=this.eventCallbackGroup(s,i);r.push(e),s[i]=r,this._events[t]=s}off(){switch(arguments.length){case 1:var t=arguments[0];delete this._events[t];break;case 2:t=arguments[0];var e=arguments[1],s=this.eventCallbackName(e);delete this._events[t][s]}}emit(t,e){var s=this.eventCallbacks(t);for(var[i,r]of Object.entries(s))for(var n of r){n(e,...Object.values(arguments).splice(2))}}},MVC.Channels=class{constructor(){}get _channels(){return this.channels=this.channels?this.channels:{},this.channels}channel(t){return this._channels[t]=this._channels[t]?this._channels[t]:new MVC.Channels.Channel,this._channels[t]}off(t){delete this._channels[t]}},MVC.Channels.Channel=class{constructor(){}get _responses(){return this.responses=this.responses?this.responses:{},this.responses}response(t,e){if(!e)return this._responses[response];this._responses[t]=e}request(t,e){if(this._responses[t])return this._responses[t](e)}off(t){if(t)delete this._responses[t];else for(var[e]of Object.keys(this._responses))delete this._responses[e]}},MVC.Base=class extends MVC.Events{constructor(t,e){super(),e&&(this._configuration=e),t&&(this._settings=t)}get _configuration(){return this.configuration=this.configuration?this.configuration:{},this.configuration}set _configuration(t){this.configuration=t}get _settings(){return this.settings=this.settings?this.settings:{},this.settings}set _settings(t){this.settings=MVC.Utils.addPropertiesToObject(t,this._settings)}get _emitters(){return this.emitters=this.emitters?this.emitters:{},this.emitters}set _emitters(t){this.emitters=MVC.Utils.addPropertiesToObject(t,this._emitters)}},MVC.Service=class extends MVC.Base{constructor(){super(...arguments)}get _defaults(){return this.defaults||{contentType:{"Content-Type":"application/json"},responseType:"json"}}get _responseTypes(){return["","arraybuffer","blob","document","json","text"]}get _responseType(){return this.responseType}set _responseType(t){this._xhr.responseType=this._responseTypes.find(e=>e===t)||this._defaults.responseType}get _type(){return this.type}set _type(t){this.type=t}get _url(){return this.url}set _url(t){this.url=t}get _headers(){return this.headers||[]}set _headers(t){for(var e of(this._headers.length=0,t))this._xhr.setRequestHeader({header:e}[0],{header:e}[1]),this._headers.push(e)}get _data(){return this.data}set _data(t){this.data=t}get _xhr(){return this.xhr=this.xhr?this.xhr:new XMLHttpRequest,this.xhr}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}request(t){return t=t||this.data||null,new Promise((e,s)=>{200===this._xhr.status&&this._xhr.abort(),this._xhr.open(this.type,this.url),this._headers=this.settings.headers||[this._defaults.contentType],this._xhr.onload=e,this._xhr.onerror=s,this._xhr.send(t)}).then(t=>(this.emit("xhr:resolve",{name:"xhr:resolve",data:t.currentTarget}),t))}enable(){var t=this.settings;!this.enabled&&Object.keys(t).length&&(t.type&&(this._type=t.type),t.url&&(this._url=t.url),t.data&&(this._data=t.data||null),this.settings.responseType&&(this._responseType=this._settings.responseType),this._enabled=!0)}disable(){var t=this.settings;this.enabled&&Object.keys(t).length&&(delete this._type,delete this._url,delete this._data,delete this._headers,delete this._responseType,this._enabled=!1)}},MVC.Model=class extends MVC.Base{constructor(){super(...arguments)}get _localStorage(){return this.localStorage}set _localStorage(t){this.localStorage=t}get _isSetting(){return this.isSetting}set _isSetting(t){this.isSetting=t}get _defaults(){return this._defaults}set _defaults(t){this.defaults=t,this.set(this.defaults)}get _schema(){return this._schema}set _schema(t){this.schema=t}get _histiogram(){return this.histiogram||{length:1}}set _histiogram(t){this.histiogram=Object.assign(this._histiogram,t)}get _history(){return this.history=this.history?this.history:[],this.history}set _history(t){Object.keys(t).length&&this._histiogram.length&&(this._history.unshift(this.parse(t)),this._history.splice(this._histiogram.length))}get _db(){var t=localStorage.getItem(this.localStorage.endpoint);return this.db=t||"{}",JSON.parse(this.db)}set _db(t){t=JSON.stringify(t),localStorage.setItem(this.localStorage.endpoint,t)}get _data(){return this.data=this.data?this.data:{},this.data}get _dataEvents(){return this.dataEvents=this.dataEvents?this.dataEvents:{},this.dataEvents}set _dataEvents(t){this.dataEvents=MVC.Utils.addPropertiesToObject(t,this._dataEvents)}get _dataCallbacks(){return this.dataCallbacks=this.dataCallbacks?this.dataCallbacks:{},this.dataCallbacks}set _dataCallbacks(t){this.dataCallbacks=MVC.Utils.addPropertiesToObject(t,this._dataCallbacks)}get _services(){return this.services=this.services?this.services:{},this.services}set _services(t){this.services=MVC.Utils.addPropertiesToObject(t,this._services)}get _serviceEvents(){return this.serviceEvents=this.serviceEvents?this.serviceEvents:{},this.serviceEvents}set _serviceEvents(t){this.serviceEvents=MVC.Utils.addPropertiesToObject(t,this._serviceEvents)}get _serviceCallbacks(){return this.serviceCallbacks=this.serviceCallbacks?this.serviceCallbacks:{},this.serviceCallbacks}set _serviceCallbacks(t){this.serviceCallbacks=MVC.Utils.addPropertiesToObject(t,this._serviceCallbacks)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}enableServiceEvents(){MVC.Utils.bindEventsToTargetObjects(this.serviceEvents,this.services,this.serviceCallbacks)}disableServiceEvents(){MVC.Utils.unbindEventsToTargetObjects(this.serviceEvents,this.services,this.serviceCallbacks)}enableDataEvents(){MVC.Utils.bindEventsToTargetObjects(this.dataEvents,this,this.dataCallbacks)}disableDataEvents(){MVC.Utils.unbindEventsToTargetObjects(this.dataEvents,this,this.dataCallbacks)}get(){var t=arguments[0];return this._data["_".concat(t)]}set(){switch(this._history=this.parse(),arguments.length){case 1:var t=Object.entries(arguments[0]);t.forEach((e,s)=>{var[i,r]=e;0===s?this._isSetting=!0:s===t.length-1&&(this._isSetting=!1),this.setDataProperty(i,r),this.localStorage&&this.setDB(i,r)});break;case 2:var e=arguments[0],s=arguments[1];this.setDataProperty(e,s),this.localStorage&&this.setDB(e,s);break;case 3:e=arguments[0],s=arguments[1];var i=arguments[2];this.setDataProperty(e,s,i),this.localStorage&&this.setDB(e,s)}}unset(){switch(this._history=this.parse(),arguments.length){case 0:for(var t of Object.keys(this._data))this.unsetDataProperty(t);break;case 1:var e=arguments[0];this.unsetDataProperty(e)}}setDB(){var t=this._db;switch(arguments.length){case 1:Object.entries(arguments[0]).forEach(e=>{var[s,i]=e;t[s]=i});break;case 2:var e=arguments[0],s=arguments[1];t[e]=s}this._db=t}unsetDB(){switch(arguments.length){case 0:delete this._db;break;case 1:var t=this._db;delete t[arguments[0]],this._db=t}}setDataProperty(t,e,s){if(!this._data["_".concat(t)]){var i=this;Object.defineProperties(this._data,{["_".concat(t)]:{configurable:!0,get(){return this[t]},set(e){if(this[t]=e,!s&&!i._isSetting){var r=["set",":",t].join("");i.emit(r,{name:r,data:{key:t,value:e}},i),i.emit("set",{name:"set",data:{key:t,value:e}},i)}}}})}this._data["_".concat(t)]=e}unsetDataProperty(t){var e=["unset",":",t].join(""),s=this._data[t];delete this._data["_".concat(t)],delete this._data[t],this.emit(e,{name:e,data:{key:t,value:s}}),this.emit("unset",{name:"unset",data:{key:t,value:s}})}parse(t){return t=t||this._data,JSON.parse(JSON.stringify(Object.assign({},t)))}enable(){this.settings&&!this.enabled&&(this.settings.localStorage&&(this.localStorage=this.settings.localStorage),this.settings.histiogram&&(this._histiogram=this.settings.histiogram),this.settings.emitters&&(this._emitters=this.settings.emitters),this.settings.services&&(this._services=this.settings.services),this.settings.serviceCallbacks&&(this._serviceCallbacks=this.settings.serviceCallbacks),this.settings.serviceEvents&&(this._serviceEvents=this.settings.serviceEvents),this.settings.data&&this.set(this.settings.data),this.settings.dataCallbacks&&(this._dataCallbacks=this.settings.dataCallbacks),this.settings.dataEvents&&(this._dataEvents=this.settings.dataEvents),this.settings.schema&&(this._schema=this.settings.schema),this.settings.defaults&&(this._defaults=this.settings.defaults),this.services&&this.serviceEvents&&this.serviceCallbacks&&this.enableServiceEvents(),this.dataEvents&&this.dataCallbacks&&this.enableDataEvents(),this._enabled=!0)}disable(){this.settings&&!this.enabled&&(this.services&&this.serviceEvents&&this.serviceCallbacks&&this.disableServiceEvents(),this.dataEvents&&this.dataCallbacks&&this.disableDataEvents(),delete this.localStorage,delete this._histiogram,delete this._services,delete this._serviceCallbacks,delete this._serviceEvents,delete this._data,delete this._dataCallbacks,delete this._dataEvents,delete this._schema,delete this._emitters)}},MVC.Emitter=class extends MVC.Model{constructor(){super(...arguments),this.settings&&this.settings.name&&(this._name=this.settings.name)}get _name(){return this.name}set _name(t){this.name=t}emission(){var t={name:this.name,data:this.data};return this.emit(this.name,t),t}},MVC.Emitters={},MVC.Emitters.NavigateEmitter=class extends MVC.Emitter{constructor(){super(...arguments),this.addSettings(),this.enable()}addSettings(){this._name="navigate",this._schema={oldURL:String,newURL:String,currentRoute:String,currentController:String}}},MVC.View=class extends MVC.Base{constructor(){super(...arguments)}get _elementName(){return this._element.tagName}set _elementName(t){this._element||(this._element=document.createElement(t))}get _element(){return this.element}set _element(t){t instanceof HTMLElement||t instanceof Document?this.element=t:"string"==typeof t&&(this.element=document.querySelector(t)),this.elementObserver.observe(this.element,{subtree:!0,childList:!0})}get _attributes(){return this._element.attributes}set _attributes(t){for(var[e,s]of Object.entries(t))void 0===s?this._element.removeAttribute(e):this._element.setAttribute(e,s)}get _ui(){return this.ui=this.ui?this.ui:{},this.ui}set _ui(t){for(var[e,s]of(this._ui.$element||(this._ui.$element=this.element),Object.entries(t)))"string"==typeof s?this._ui[e]=this._element.querySelectorAll(s):(s instanceof HTMLElement||s instanceof Document)&&(this._ui[e]=s)}get _uiEvents(){return this.uiEvents}set _uiEvents(t){this.uiEvents=t}get _uiCallbacks(){return this.uiCallbacks=this.uiCallbacks?this.uiCallbacks:{},this.uiCallbacks}set _uiCallbacks(t){this.uiCallbacks=MVC.Utils.addPropertiesToObject(t,this._uiCallbacks)}get _observerCallbacks(){return this.observerCallbacks=this.observerCallbacks?this.observerCallbacks:{},this.observerCallbacks}set _observerCallbacks(t){this.observerCallbacks=MVC.Utils.addPropertiesToObject(t,this._observerCallbacks)}get elementObserver(){return this._elementObserver=this._elementObserver?this._elementObserver:new MutationObserver(this.elementObserve.bind(this)),this._elementObserver}get _insert(){return this.insert}set _insert(t){this.insert=t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _templates(){return this.templates=this.templates?this.templates:{},this.templates}set _templates(t){this.templates=MVC.Utils.addPropertiesToObject(t,this._templates)}elementObserve(t,e){for(var[s,i]of Object.entries(t))switch(i.type){case"childList":for(var r of["addedNodes","removedNodes"])i[r].length&&this.resetUI()}}autoInsert(){this.insert&&document.querySelectorAll(this.insert.element).forEach(t=>{t.insertAdjacentElement(this.insert.method,this.element)})}autoRemove(){this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element)}enableElement(t){(t=t||this.settings).elementName&&(this._elementName=t.elementName),t.element&&(this._element=t.element),t.attributes&&(this._attributes=t.attributes),t.templates&&(this._templates=t.templates),t.insert&&(this._insert=t.insert)}disableElement(t){t=t||this.settings,this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element),this.element&&delete this.element,this.attributes&&delete this.attributes,this.templates&&delete this.templates,this.insert&&delete this.insert}resetUI(){this.disableUI(),this.enableUI()}enableUI(t){(t=t||this.settings).ui&&(this._ui=t.ui),t.uiCallbacks&&(this._uiCallbacks=t.uiCallbacks),t.uiEvents&&(this._uiEvents=t.uiEvents,this.enableUIEvents())}disableUI(t){(t=t||this.settings).uiEvents&&(this.disableUIEvents(),delete this._uiEvents),delete this.uiEvents,delete this.ui,delete this.uiCallbacks}enableUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.bindEventsToTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}disableUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.unbindEventsFromTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}enableEmitters(){this.settings.emitters&&(this._emitters=this.settings.emitters)}disableEmitters(){this._emitters&&delete this._emitters}enable(){var t=this.settings;if(t&&!this._enabled)return this.enableEmitters(),this.enableElement(t),this.enableUI(t),this._enabled=!0,this}disable(){var t=this.settings;if(t&&this._enabled)return this.disableUI(t),this.disableElement(t),this.disableEmitters(),this._enabled=!1,thiss}},MVC.Controller=class extends MVC.Base{constructor(){super(...arguments)}get _emitterCallbacks(){return this.emitterCallbacks=this.emitterCallbacks?this.emitterCallbacks:{},this.emitterCallbacks}set _emitterCallbacks(t){this.emitterCallbacks=MVC.Utils.addPropertiesToObject(t,this._emitterCallbacks)}get _modelCallbacks(){return this.modelCallbacks=this.modelCallbacks?this.modelCallbacks:{},this.modelCallbacks}set _modelCallbacks(t){this.modelCallbacks=MVC.Utils.addPropertiesToObject(t,this._modelCallbacks)}get _viewCallbacks(){return this.viewCallbacks=this.viewCallbacks?this.viewCallbacks:{},this.viewCallbacks}set _viewCallbacks(t){this.viewCallbacks=MVC.Utils.addPropertiesToObject(t,this._viewCallbacks)}get _controllerCallbacks(){return this.controllerCallbacks=this.controllerCallbacks?this.controllerCallbacks:{},this.controllerCallbacks}set _controllerCallbacks(t){this.controllerCallbacks=MVC.Utils.addPropertiesToObject(t,this._controllerCallbacks)}get _models(){return this.models=this.models?this.models:{},this.models}set _models(t){this.models=MVC.Utils.addPropertiesToObject(t,this._models)}get _views(){return this.views=this.views?this.views:{},this.views}set _views(t){this.views=MVC.Utils.addPropertiesToObject(t,this._views)}get _controllers(){return this.controllers=this.controllers?this.controllers:{},this.controllers}set _controllers(t){this.controllers=MVC.Utils.addPropertiesToObject(t,this._controllers)}get _routers(){return this.routers=this.routers?this.routers:{},this.routers}set _routers(t){this.routers=MVC.Utils.addPropertiesToObject(t,this._routers)}get _routerEvents(){return this.routerEvents=this.routerEvents?this.routerEvents:{},this.routerEvents}set _routerEvents(t){this.routerEvents=MVC.Utils.addPropertiesToObject(t,this._routerEvents)}get _routerCallbacks(){return this.routerCallbacks=this.routerCallbacks?this.routerCallbacks:{},this.routerCallbacks}set _routerCallbacks(t){this.routerCallbacks=MVC.Utils.addPropertiesToObject(t,this._routerCallbacks)}get _emitterEvents(){return this.emitterEvents=this.emitterEvents?this.emitterEvents:{},this.emitterEvents}set _emitterEvents(t){this.emitterEvents=MVC.Utils.addPropertiesToObject(t,this._emitterEvents)}get _modelEvents(){return this.modelEvents=this.modelEvents?this.modelEvents:{},this.modelEvents}set _modelEvents(t){this.modelEvents=MVC.Utils.addPropertiesToObject(t,this._modelEvents)}get _viewEvents(){return this.viewEvents=this.viewEvents?this.viewEvents:{},this.viewEvents}set _viewEvents(t){this.viewEvents=MVC.Utils.addPropertiesToObject(t,this._viewEvents)}get _controllerEvents(){return this.controllerEvents=this.controllerEvents?this.controllerEvents:{},this.controllerEvents}set _controllerEvents(t){this.controllerEvents=MVC.Utils.addPropertiesToObject(t,this._controllerEvents)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}enableModelEvents(){MVC.Utils.bindEventsToTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}disableModelEvents(){MVC.Utils.unbindEventsToTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}enableViewEvents(){MVC.Utils.bindEventsToTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}disableViewEvents(){MVC.Utils.unbindEventsToTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}enableControllerEvents(){MVC.Utils.bindEventsToTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}disableControllerEvents(){MVC.Utils.unbindEventsToTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}enableEmitterEvents(){MVC.Utils.bindEventsToTargetObjects(this.emitterEvents,this.emitters,this.emitterCallbacks)}disableEmitterEvents(){MVC.Utils.unbindEventsToTargetObjects(this.emitterEvents,this.emitters,this.emitterCallbacks)}enableRouterEvents(){MVC.Utils.bindEventsToTargetObjects(this.routerEvents,this.routers,this.routerCallbacks)}disableRouterEvents(){MVC.Utils.unbindEventsToTargetObjects(this.routerEvents,this.routers,this.routerCallbacks)}enable(){var t=this.settings;t&&!this.enabled&&(t.emitterCallbacks&&(this._emitterCallbacks=t.emitterCallbacks),t.modelCallbacks&&(this._modelCallbacks=t.modelCallbacks),t.viewCallbacks&&(this._viewCallbacks=t.viewCallbacks),t.controllerCallbacks&&(this._controllerCallbacks=t.controllerCallbacks),t.routerCallbacks&&(this._routerCallbacks=t.routerCallbacks),t.emitters&&(this._emitters=t.emitters),t.models&&(this._models=t.models),t.views&&(this._views=t.views),t.controllers&&(this._controllers=t.controllers),t.routers&&(this._routers=t.routers),t.routerEvents&&(this._routerEvents=t.routerEvents),t.emitterEvents&&(this._emitterEvents=t.emitterEvents),t.modelEvents&&(this._modelEvents=t.modelEvents),t.viewEvents&&(this._viewEvents=t.viewEvents),t.controllerEvents&&(this._controllerEvents=t.controllerEvents),this.emitterEvents&&this.emitters&&this.emitterCallbacks&&this.enableEmitterEvents(),this.routerEvents&&this.routers&&this.routerCallbacks&&this.enableRouterEvents(),this.modelEvents&&this.models&&this.modelCallbacks&&this.enableModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.enableViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.enableControllerEvents(),this._enabled=!0)}disable(){this.settings&&this.enabled&&(this.emitterEvents&&this.emitters&&this.emitterCallbacks&&this.disableEmitterEvents(),this.routerEvents&&this.routers&&this.routerCallbacks&&this.disableRouterEvents(),this.modelEvents&&this.models&&this.modelCallbacks&&this.disableModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.disableViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.disableControllerEvents(),delete this._emitters,delete this._modelCallbacks,delete this._viewCallbacks,delete this._controllerCallbacks,delete this._routerCallbacks,delete this._models,delete this._views,delete this._controllers,delete this._routers,delete this._modelEvents,delete this._viewEvents,delete this._controllerEvents,this._enabled=!1)}},MVC.Router=class extends MVC.Base{constructor(){super(...arguments)}get route(){return this._hash?String(window.location.hash).split("#").pop():String(window.location.pathname)}get _hash(){return this.hash}set _hash(t){this.hash=t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _routes(){return this.routes=this.routes?this.routes:{},this.routes}set _routes(t){this.routes=MVC.Utils.addPropertiesToObject(t,this._routes)}get _controller(){return this.controller}set _controller(t){this.controller=t}get _previousURL(){return this.previousURL}set _previousURL(t){this.previousURL=t}get _currentURL(){return this.currentURL}set _currentURL(t){this.currentURL=t}get fragmentIDRegExp(){return new RegExp(/^([0-9A-Z\?\=\,\.\*\-\_\'\"\^\%\$\#\@\!\~\(\)\{\}\&\<\>\\\/])*$/,"gi")}fragmentNameRegExp(t){return new RegExp("^".concat(t,"$"))}enable(){this.settings&&!this.enabled&&(this._hash="boolean"!=typeof this.settings.hash||this.settings.hash,this.enableEmitters(),this.enableEvents(),this.enableRoutes(),this.routeChange(),this._enabled=!0)}disable(){this.settings&&this.enabled&&(delete this._hash,this.disableEvents(),this.disableRoutes(),this.disableEmitters(),this._enabled=!1)}enableRoutes(){this.settings.controller&&(this._controller=this.settings.controller),this._routes=Object.entries(this.settings.routes).reduce((t,e,s,i)=>{var[r,n]=e;return t[r]=this.controller[n],t},{})}enableEmitters(){this._emitters={navigateEmitter:new MVC.Emitters.NavigateEmitter}}disableEmitters(){delete this._emitters.navigateEmitter}disableRoutes(){delete this._routes,delete this._controller}enableEvents(){window.addEventListener("hashchange",this.routeChange.bind(this))}disableEvents(){window.removeEventListener("hashchange",this.routeChange.bind(this))}routeChange(){var t=this.route.split("/").filter(t=>t.length);t=t.length?t:["/"];var e=Object.entries(this.routes).filter(e=>{var s,[i,r]=e;if(i=(i=i.split("/").filter(t=>t.length)).length?i:["/"],t.length&&t.length===i.length)return i.filter((e,i)=>{if((void 0===s||!0===s)&&(":"===e[0]?e=this.fragmentIDRegExp:(e=e.replace(new RegExp("/","gi"),"\\/"),e=this.fragmentNameRegExp(e)),!0===(s=e.test(t[i]))&&i===t.length-1))return r})[0]})[0];try{this.currentURL&&(this._previousURL=this.currentURL),this._currentURL=window.location.href;e[0];var s=e[1],i=this.emitters.navigateEmitter,r={currentURL:this.currentURL,previousURL:this.previousURL,currentRoute:this.route,currentController:s.name};i.set(r),this.emit(i.name,i.emission()),s(i.emission())}catch(t){throw"Route Definition Error"}}navigate(t){window.location.hash=t}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
