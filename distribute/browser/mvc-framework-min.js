var MVC=MVC||{};MVC.Constants={},MVC.CONST=MVC.Constants,MVC.Constants.Events={},MVC.CONST.EV=MVC.Constants.Events,MVC.Utils={},MVC.Utils.addPropertiesToObject=function(){var t;switch(arguments.length){case 2:var e=arguments[0];for(var[s,i]of(t=arguments[1],Object.entries(e)))t[s]=i;break;case 3:var r=arguments[0],a=arguments[1];(t=arguments[2])[r]=a}return t},MVC.Utils.isArray=function(t){return Array.isArray(t)},MVC.Utils.isObject=function(t){return!Array.isArray(t)&&"object"==typeof t},MVC.Utils.isEqualType=function(t,e){return t===e},MVC.Utils.isHTMLElement=function(t){return t instanceof HTMLElement},MVC.Utils.objectQuery=function(t,e){var s=MVC.Utils.objectQuery.parseNotation(t);return"@"===s[0]&&s.splice(0,1),s.length?(e=MVC.Utils.isObject(e)?Object.entries(e):e,s.reduce((t,e,s,i)=>{var r=[];for(var[a,n]of(e=MVC.Utils.objectQuery.parseFragment(e),t))a.match(e)&&(r=s===i.length-1?r.concat([[a,n]]):r.concat(Object.entries(n)));return t=r},e)):e},MVC.Utils.objectQuery.parseNotation=function(t){return t="["===t.charAt(0)&&"]"==t.charAt(t.length-1)?t.slice(1,-1).split("]["):t.split(".")},MVC.Utils.objectQuery.parseFragment=function(t){return"/"===t.charAt(0)&&"/"==t.charAt(t.length-1)&&(t=t.slice(1,-1),t=new RegExp("^".concat(t,"$"))),t},MVC.Utils.paramsToObject=function(t){t=t.split("&");var e={};return t.forEach(t=>{t=t.split("="),e[t[0]]=decodeURIComponent(t[1]||"")}),JSON.parse(JSON.stringify(e))},MVC.Utils.toggleEventsForTargetObjects=function(t,e,s,i){for(var[r,a]of Object.entries(e)){var n=r.split(" "),l=n[0],h=n[1],o=MVC.Utils.objectQuery(l,s);for(var[c,b]of o=MVC.Utils.isArray(o)?o:[["@",o]]){var v="on"===t?b instanceof NodeList||b instanceof HTMLElement||b instanceof Document?"addEventListener":"on":b instanceof NodeList||b instanceof HTMLElement||b instanceof Document?"removeEventListener":"off",d=MVC.Utils.objectQuery(a,i)[0][1];if(b instanceof NodeList)for(var u of b)u[v](h,d);else HTMLElement,b[v](h,d)}}},MVC.Utils.bindEventsToTargetObjects=function(){this.toggleEventsForTargetObjects("on",...arguments)},MVC.Utils.unbindEventsFromTargetObjects=function(){this.toggleEventsForTargetObjects("off",...arguments)},MVC.Utils.typeOf=function(t){switch(typeof t){case"object":return MVC.Utils.isArray(t)?"array":MVC.Utils.isObject(t)?"object":null===t?"null":void 0;case"string":case"number":case"boolean":case"undefined":case"function":return typeof t}},MVC.Utils.validateDataSchema=function(t,e){if(!e)throw MVC.TMPL;switch(MVC.Utils.typeOf(t)){case"array":var s=[];if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(s)))for(var[i,r]of(console.log(e.name),Object.entries(t)))s.push(this.validateDataSchema(r));return s;case"object":var a={};if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(a)))for(var[n,l]of(console.log(e.name),Object.entries(t)))a[n]=this.validateDataSchema(l,e[n]);return a;case"string":case"number":case"boolean":if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(t)))return console.log(e.name),t;throw MVC.TMPL;case"null":if(MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(t)))return t;break;case"undefined":case"function":throw MVC.TMPL}},MVC.Events=class{constructor(){}get _events(){return this.events=this.events?this.events:{},this.events}eventCallbacks(t){return this._events[t]||{}}eventCallbackName(t){return t.name.length?t.name:"anonymousFunction"}eventCallbackGroup(t,e){return t[e]||[]}on(t,e){var s=this.eventCallbacks(t),i=this.eventCallbackName(e),r=this.eventCallbackGroup(s,i);r.push(e),s[i]=r,this._events[t]=s}off(){switch(arguments.length){case 1:var t=arguments[0];delete this._events[t];break;case 2:t=arguments[0];var e=arguments[1],s=this.eventCallbackName(e);delete this._events[t][s]}}emit(t,e){var s=this.eventCallbacks(t);for(var[i,r]of Object.entries(s))for(var a of r){a(e,...Object.values(arguments).splice(2)||[])}}},MVC.Channels=class{constructor(){}get _channels(){return this.channels=this.channels?this.channels:{},this.channels}channel(t){return this._channels[t]=this._channels[t]?this._channels[t]:new MVC.Channels.Channel,this._channels[t]}off(t){delete this._channels[t]}},MVC.Channels.Channel=class{constructor(){}get _responses(){return this.responses=this.responses?this.responses:{},this.responses}response(t,e){if(!e)return this._responses[response];this._responses[t]=e}request(t,e){if(this._responses[t])return this._responses[t](e)}off(t){if(t)delete this._responses[t];else for(var[e]of Object.keys(this._responses))delete this._responses[e]}},MVC.Base=class extends MVC.Events{constructor(t,e){super(),e&&(this._configuration=e),t&&(this._settings=t)}get _configuration(){return this.configuration=this.configuration?this.configuration:{},this.configuration}set _configuration(t){this.configuration=t}get _settings(){return this.settings=this.settings?this.settings:{},this.settings}set _settings(t){this.settings=MVC.Utils.addPropertiesToObject(t,this._settings)}get _emitters(){return this.emitters=this.emitters?this.emitters:{},this.emitters}set _emitters(t){this.emitters=MVC.Utils.addPropertiesToObject(t,this._emitters)}},MVC.Service=class extends MVC.Base{constructor(){super(...arguments)}get _defaults(){return this.defaults||{contentType:{"Content-Type":"application/json"},responseType:"json"}}get _responseTypes(){return["","arraybuffer","blob","document","json","text"]}get _responseType(){return this.responseType}set _responseType(t){this._xhr.responseType=this._responseTypes.find(e=>e===t)||this._defaults.responseType}get _type(){return this.type}set _type(t){this.type=t}get _url(){return this.url}set _url(t){this.url=t}get _headers(){return this.headers||[]}set _headers(t){this._headers.length=0,t.forEach(t=>{this._headers.push(t),t=Object.entries(t)[0],this._xhr.setRequestHeader(t[0],t[1])})}get _data(){return this.data}set _data(t){this.data=t}get _xhr(){return this.xhr=this.xhr?this.xhr:new XMLHttpRequest,this.xhr}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}request(t){return t=t||this.data||null,new Promise((e,s)=>{200===this._xhr.status&&this._xhr.abort(),this._xhr.open(this.type,this.url),this._headers=this.settings.headers||[this._defaults.contentType],this._xhr.onload=e,this._xhr.onerror=s,this._xhr.send(t)}).then(t=>(this.emit("xhr:resolve",{name:"xhr:resolve",data:t.currentTarget}),t))}enable(){var t=this.settings;return!this.enabled&&Object.keys(t).length&&(t.type&&(this._type=t.type),t.url&&(this._url=t.url),t.data&&(this._data=t.data||null),this.settings.responseType&&(this._responseType=this._settings.responseType),this._enabled=!0),this}disable(){var t=this.settings;return this.enabled&&Object.keys(t).length&&(delete this._type,delete this._url,delete this._data,delete this._headers,delete this._responseType,this._enabled=!1),this}},MVC.Model=class extends MVC.Base{constructor(){super(...arguments)}get _localStorage(){return this.localStorage}set _localStorage(t){this.localStorage=t}get _defaults(){return this.defaults}set _defaults(t){this.defaults=t}get _schema(){return this._schema}set _schema(t){this.schema=t}get _histiogram(){return this.histiogram||{length:1}}set _histiogram(t){this.histiogram=Object.assign(this._histiogram,t)}get _history(){return this.history=this.history?this.history:[],this.history}set _history(t){Object.keys(t).length&&this._histiogram.length&&(this._history.unshift(this.parse(t)),this._history.splice(this._histiogram.length))}get _db(){var t=localStorage.getItem(this.localStorage.endpoint);return this.db=t||"{}",JSON.parse(this.db)}set _db(t){t=JSON.stringify(t),localStorage.setItem(this.localStorage.endpoint,t)}get _data(){return this.data=this.data?this.data:{},this.data}get _dataEvents(){return this.dataEvents=this.dataEvents?this.dataEvents:{},this.dataEvents}set _dataEvents(t){this.dataEvents=MVC.Utils.addPropertiesToObject(t,this._dataEvents)}get _dataCallbacks(){return this.dataCallbacks=this.dataCallbacks?this.dataCallbacks:{},this.dataCallbacks}set _dataCallbacks(t){this.dataCallbacks=MVC.Utils.addPropertiesToObject(t,this._dataCallbacks)}get _services(){return this.services=this.services?this.services:{},this.services}set _services(t){this.services=MVC.Utils.addPropertiesToObject(t,this._services)}get _serviceEvents(){return this.serviceEvents=this.serviceEvents?this.serviceEvents:{},this.serviceEvents}set _serviceEvents(t){this.serviceEvents=MVC.Utils.addPropertiesToObject(t,this._serviceEvents)}get _serviceCallbacks(){return this.serviceCallbacks=this.serviceCallbacks?this.serviceCallbacks:{},this.serviceCallbacks}set _serviceCallbacks(t){this.serviceCallbacks=MVC.Utils.addPropertiesToObject(t,this._serviceCallbacks)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}enableServiceEvents(){MVC.Utils.bindEventsToTargetObjects(this.serviceEvents,this.services,this.serviceCallbacks)}disableServiceEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.serviceEvents,this.services,this.serviceCallbacks)}enableDataEvents(){MVC.Utils.bindEventsToTargetObjects(this.dataEvents,this,this.dataCallbacks)}disableDataEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.dataEvents,this,this.dataCallbacks)}setDefaults(){var t={};this.defaults&&Object.assign(t,this.defaults),this.localStorage&&Object.assign(t,this._db),Object.keys(t)&&this.set(t)}get(){var t=arguments[0];return this._data["_".concat(t)]}set(){switch(this._history=this.parse(),arguments.length){case 1:Object.entries(arguments[0]).forEach((t,e)=>{var[s,i]=t;this.setDataProperty(s,i),this.localStorage&&this.setDB(s,i)});break;case 2:var t=arguments[0],e=arguments[1];this.setDataProperty(t,e),this.localStorage&&this.setDB(t,e)}return this}unset(){switch(this._history=this.parse(),arguments.length){case 0:for(var t of Object.keys(this._data))this.unsetDataProperty(t);break;case 1:var e=arguments[0];this.unsetDataProperty(e)}return this}setDB(){var t=this._db;switch(arguments.length){case 1:Object.entries(arguments[0]).forEach(e=>{var[s,i]=e;t[s]=i});break;case 2:var e=arguments[0],s=arguments[1];t[e]=s}this._db=t}unsetDB(){switch(arguments.length){case 0:delete this._db;break;case 1:var t=this._db;delete t[arguments[0]],this._db=t}}setDataProperty(t,e){if(!this._data["_".concat(t)]){var s=this;Object.defineProperties(this._data,{["_".concat(t)]:{configurable:!0,get(){return this[t]},set(e){this[t]=e;var i=["set",":",t].join("");s.emit(i,{name:i,data:{key:t,value:e}},s),s.emit("set",{name:"set",data:{key:t,value:e}},s)}}})}this._data["_".concat(t)]=e}unsetDataProperty(t){var e=["unset",":",t].join(""),s=this._data[t];delete this._data["_".concat(t)],delete this._data[t],this.emit(e,{name:e,data:{key:t,value:s}}),this.emit("unset",{name:"unset",data:{key:t,value:s}})}parse(t){return t=t||this._data,JSON.parse(JSON.stringify(Object.assign({},t)))}enable(){this.settings&&!this.enabled&&(this.settings.localStorage&&(this._localStorage=this.settings.localStorage),this.settings.histiogram&&(this._histiogram=this.settings.histiogram),this.settings.emitters&&(this._emitters=this.settings.emitters),this.settings.services&&(this._services=this.settings.services),this.settings.serviceCallbacks&&(this._serviceCallbacks=this.settings.serviceCallbacks),this.settings.serviceEvents&&(this._serviceEvents=this.settings.serviceEvents),this.settings.data&&this.set(this.settings.data),this.settings.dataCallbacks&&(this._dataCallbacks=this.settings.dataCallbacks),this.settings.dataEvents&&(this._dataEvents=this.settings.dataEvents),this.settings.schema&&(this._schema=this.settings.schema),this.settings.defaults&&(this._defaults=this.settings.defaults),this.services&&this.serviceEvents&&this.serviceCallbacks&&this.enableServiceEvents(),this.dataEvents&&this.dataCallbacks&&this.enableDataEvents(),this._enabled=!0)}disable(){this.settings&&!this.enabled&&(this.services&&this.serviceEvents&&this.serviceCallbacks&&this.disableServiceEvents(),this.dataEvents&&this.dataCallbacks&&this.disableDataEvents(),delete this._localStorage,delete this._histiogram,delete this._services,delete this._serviceCallbacks,delete this._serviceEvents,delete this._data,delete this._dataCallbacks,delete this._dataEvents,delete this._schema,delete this._emitters,this._enabled=!1)}},MVC.Emitter=class extends MVC.Model{constructor(){super(...arguments),this.settings&&this.settings.name&&(this._name=this.settings.name)}get _name(){return this.name}set _name(t){this.name=t}emission(){var t={name:this.name,data:this.data};return this.emit(this.name,t),t}},MVC.View=class extends MVC.Base{constructor(){super(...arguments)}get _elementName(){return this._element.tagName}set _elementName(t){this._element||(this._element=document.createElement(t))}get _element(){return this.element}set _element(t){t instanceof HTMLElement||t instanceof Document?this.element=t:"string"==typeof t&&(this.element=document.querySelector(t)),this.elementObserver.observe(this.element,{subtree:!0,childList:!0})}get _attributes(){return this._element.attributes}set _attributes(t){for(var[e,s]of Object.entries(t))void 0===s?this._element.removeAttribute(e):this._element.setAttribute(e,s)}get _ui(){return this.ui=this.ui?this.ui:{},this.ui}set _ui(t){for(var[e,s]of(this._ui.$element||(this._ui.$element=this.element),Object.entries(t)))"string"==typeof s?this._ui[e]=this._element.querySelectorAll(s):(s instanceof HTMLElement||s instanceof Document)&&(this._ui[e]=s)}get _uiEvents(){return this.uiEvents}set _uiEvents(t){this.uiEvents=t}get _uiCallbacks(){return this.uiCallbacks=this.uiCallbacks?this.uiCallbacks:{},this.uiCallbacks}set _uiCallbacks(t){this.uiCallbacks=MVC.Utils.addPropertiesToObject(t,this._uiCallbacks)}get _observerCallbacks(){return this.observerCallbacks=this.observerCallbacks?this.observerCallbacks:{},this.observerCallbacks}set _observerCallbacks(t){this.observerCallbacks=MVC.Utils.addPropertiesToObject(t,this._observerCallbacks)}get elementObserver(){return this._elementObserver=this._elementObserver?this._elementObserver:new MutationObserver(this.elementObserve.bind(this)),this._elementObserver}get _insert(){return this.insert}set _insert(t){this.insert=t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _templates(){return this.templates=this.templates?this.templates:{},this.templates}set _templates(t){this.templates=MVC.Utils.addPropertiesToObject(t,this._templates)}elementObserve(t,e){for(var[s,i]of Object.entries(t))switch(i.type){case"childList":for(var r of["addedNodes","removedNodes"])i[r].length&&this.resetUI()}}autoInsert(){this.insert&&document.querySelectorAll(this.insert.element).forEach(t=>{t.insertAdjacentElement(this.insert.method,this.element)})}autoRemove(){this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element)}enableElement(t){(t=t||this.settings).elementName&&(this._elementName=t.elementName),t.element&&(this._element=t.element),t.attributes&&(this._attributes=t.attributes),t.templates&&(this._templates=t.templates),t.insert&&(this._insert=t.insert)}disableElement(t){t=t||this.settings,this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element),this.element&&delete this.element,this.attributes&&delete this.attributes,this.templates&&delete this.templates,this.insert&&delete this.insert}resetUI(){this.disableUI(),this.enableUI()}enableUI(t){(t=t||this.settings).ui&&(this._ui=t.ui),t.uiCallbacks&&(this._uiCallbacks=t.uiCallbacks),t.uiEvents&&(this._uiEvents=t.uiEvents,this.enableUIEvents())}disableUI(t){(t=t||this.settings).uiEvents&&(this.disableUIEvents(),delete this._uiEvents),delete this.uiEvents,delete this.ui,delete this.uiCallbacks}enableUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.bindEventsToTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}disableUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.unbindEventsFromTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}enableEmitters(){this.settings.emitters&&(this._emitters=this.settings.emitters)}disableEmitters(){this._emitters&&delete this._emitters}enable(){var t=this.settings;if(t&&!this._enabled)return this.enableEmitters(),this.enableElement(t),this.enableUI(t),this._enabled=!0,this}disable(){var t=this.settings;if(t&&this._enabled)return this.disableUI(t),this.disableElement(t),this.disableEmitters(),this._enabled=!1,thiss}},MVC.Controller=class extends MVC.Base{constructor(){super(...arguments)}get _emitterCallbacks(){return this.emitterCallbacks=this.emitterCallbacks?this.emitterCallbacks:{},this.emitterCallbacks}set _emitterCallbacks(t){this.emitterCallbacks=MVC.Utils.addPropertiesToObject(t,this._emitterCallbacks)}get _modelCallbacks(){return this.modelCallbacks=this.modelCallbacks?this.modelCallbacks:{},this.modelCallbacks}set _modelCallbacks(t){this.modelCallbacks=MVC.Utils.addPropertiesToObject(t,this._modelCallbacks)}get _viewCallbacks(){return this.viewCallbacks=this.viewCallbacks?this.viewCallbacks:{},this.viewCallbacks}set _viewCallbacks(t){this.viewCallbacks=MVC.Utils.addPropertiesToObject(t,this._viewCallbacks)}get _controllerCallbacks(){return this.controllerCallbacks=this.controllerCallbacks?this.controllerCallbacks:{},this.controllerCallbacks}set _controllerCallbacks(t){this.controllerCallbacks=MVC.Utils.addPropertiesToObject(t,this._controllerCallbacks)}get _models(){return this.models=this.models?this.models:{},this.models}set _models(t){this.models=MVC.Utils.addPropertiesToObject(t,this._models)}get _views(){return this.views=this.views?this.views:{},this.views}set _views(t){this.views=MVC.Utils.addPropertiesToObject(t,this._views)}get _controllers(){return this.controllers=this.controllers?this.controllers:{},this.controllers}set _controllers(t){this.controllers=MVC.Utils.addPropertiesToObject(t,this._controllers)}get _routers(){return this.routers=this.routers?this.routers:{},this.routers}set _routers(t){this.routers=MVC.Utils.addPropertiesToObject(t,this._routers)}get _routerEvents(){return this.routerEvents=this.routerEvents?this.routerEvents:{},this.routerEvents}set _routerEvents(t){this.routerEvents=MVC.Utils.addPropertiesToObject(t,this._routerEvents)}get _routerCallbacks(){return this.routerCallbacks=this.routerCallbacks?this.routerCallbacks:{},this.routerCallbacks}set _routerCallbacks(t){this.routerCallbacks=MVC.Utils.addPropertiesToObject(t,this._routerCallbacks)}get _emitterEvents(){return this.emitterEvents=this.emitterEvents?this.emitterEvents:{},this.emitterEvents}set _emitterEvents(t){this.emitterEvents=MVC.Utils.addPropertiesToObject(t,this._emitterEvents)}get _modelEvents(){return this.modelEvents=this.modelEvents?this.modelEvents:{},this.modelEvents}set _modelEvents(t){this.modelEvents=MVC.Utils.addPropertiesToObject(t,this._modelEvents)}get _viewEvents(){return this.viewEvents=this.viewEvents?this.viewEvents:{},this.viewEvents}set _viewEvents(t){this.viewEvents=MVC.Utils.addPropertiesToObject(t,this._viewEvents)}get _controllerEvents(){return this.controllerEvents=this.controllerEvents?this.controllerEvents:{},this.controllerEvents}set _controllerEvents(t){this.controllerEvents=MVC.Utils.addPropertiesToObject(t,this._controllerEvents)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}enableModelEvents(){MVC.Utils.bindEventsToTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}disableModelEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}enableViewEvents(){MVC.Utils.bindEventsToTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}disableViewEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}enableControllerEvents(){MVC.Utils.bindEventsToTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}disableControllerEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}enableEmitterEvents(){MVC.Utils.bindEventsToTargetObjects(this.emitterEvents,this.emitters,this.emitterCallbacks)}disableEmitterEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.emitterEvents,this.emitters,this.emitterCallbacks)}enableRouterEvents(){MVC.Utils.bindEventsToTargetObjects(this.routerEvents,this.routers,this.routerCallbacks)}disableRouterEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.routerEvents,this.routers,this.routerCallbacks)}enable(){var t=this.settings;t&&!this.enabled&&(t.modelCallbacks&&(this._modelCallbacks=t.modelCallbacks),t.viewCallbacks&&(this._viewCallbacks=t.viewCallbacks),t.controllerCallbacks&&(this._controllerCallbacks=t.controllerCallbacks),t.emitterCallbacks&&(this._emitterCallbacks=t.emitterCallbacks),t.routerCallbacks&&(this._routerCallbacks=t.routerCallbacks),t.models&&(this._models=t.models),t.views&&(this._views=t.views),t.controllers&&(this._controllers=t.controllers),t.emitters&&(this._emitters=t.emitters),t.routers&&(this._routers=t.routers),t.modelEvents&&(this._modelEvents=t.modelEvents),t.viewEvents&&(this._viewEvents=t.viewEvents),t.controllerEvents&&(this._controllerEvents=t.controllerEvents),t.emitterEvents&&(this._emitterEvents=t.emitterEvents),t.routerEvents&&(this._routerEvents=t.routerEvents),this.modelEvents&&this.models&&this.modelCallbacks&&this.enableModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.enableViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.enableControllerEvents(),this.routerEvents&&this.routers&&this.routerCallbacks&&this.enableRouterEvents(),this.emitterEvents&&this.emitters&&this.emitterCallbacks&&this.enableEmitterEvents(),this._enabled=!0)}reset(){this.disable(),this.enable()}disable(){this.settings&&this.enabled&&(this.modelEvents&&this.models&&this.modelCallbacks&&this.disableModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.disableViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.disableControllerEvents()),this.routerEvents&&this.routers&&this.routerCallbacks&&this.disableRouterEvents(),this.emitterEvents&&this.emitters&&this.emitterCallbacks&&(this.disableEmitterEvents(),delete this._modelCallbacks,delete this._viewCallbacks,delete this._controllerCallbacks,delete this._emitterCallbacks,delete this._routerCallbacks,delete this._models,delete this._views,delete this._controllers,delete this._emitters,delete this._routers,delete this._routerEvents,delete this._modelEvents,delete this._viewEvents,delete this._controllerEvents,delete this._emitterEvents,this._enabled=!1)}},MVC.Emitters={},MVC.Emitters.Navigate=class extends MVC.Emitter{constructor(){super(...arguments),this.addSettings(),this.enable()}addSettings(){this._name="navigate",this._schema={oldURL:String,newURL:String,currentRoute:String,currentController:String}}},MVC.Router=class extends MVC.Base{constructor(){super(...arguments)}get protocol(){return window.location.protocol}get hostname(){return window.location.hostname}get port(){return window.location.port}get path(){return window.location.pathname}get hash(){var t=window.location.href,e=t.indexOf("#");if(e>-1){var s,i=t.indexOf("?"),r=e+1;return s=i>-1?e>i?t.length:i:t.length,(t=t.slice(r,s)).length?t:null}return null}get params(){var t=window.location.href,e=t.indexOf("?");if(e>-1){var s,i=t.indexOf("#"),r=e+1;return s=i>-1?e>i?t.length:i:t.length,(t=t.slice(r,s)).length?t:null}return null}get _routeData(){var t={},e=this.path.split("/").filter(t=>t.length);e=e.length?e:["/"];var s=this.hash,i=s?s.split("/").filter(t=>t.length):null,r=this.params,a=r?MVC.Utils.paramsToObject(r):null;return this.protocol&&(t.protocol=this.protocol),this.hostname&&(t.hostname=this.hostname),this.port&&(t.port=this.port),this.path&&(t.path=this.path),s&&i&&(i=i.length?i:["/"],t.hash={path:s,fragments:i}),r&&a&&(t.params={path:r,data:a}),t.path={name:this.path,fragments:e},t.currentURL=this.currentURL,t=Object.assign(t,this._routeControllerData),this.routeData=t,this.routeData}get _routeControllerData(){var t={};return Object.entries(this.routes).forEach(e=>{var[s,i]=e,r=this.path.split("/").filter(t=>t.length);r=r.length?r:["/"];var a,n=s.split("/").filter((t,e)=>t.length);if(n=n.length?n:["/"],r.length&&r.length===n.length)return n.filter((e,l)=>{if((void 0===a||!0===a)&&(":"===e[0]?(t[e.replace(":","")]=r[l],e=this.fragmentIDRegExp):(e=e.replace(new RegExp("/","gi"),"\\/"),e=this.routeFragmentNameRegExp(e)),!0===(a=e.test(r[l]))&&l===r.length-1))return t.route={name:s,fragments:n},t.controller=i,i})[0]}),t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _routes(){return this.routes=this.routes?this.routes:{},this.routes}set _routes(t){this.routes=MVC.Utils.addPropertiesToObject(t,this._routes)}get _controller(){return this.controller}set _controller(t){this.controller=t}get _previousURL(){return this.previousURL}set _previousURL(t){this.previousURL=t}get _currentURL(){return this.currentURL}set _currentURL(t){this.currentURL&&(this._previousURL=this.currentURL),this.currentURL=t}get fragmentIDRegExp(){return new RegExp(/^([0-9A-Z\?\=\,\.\*\-\_\'\"\^\%\$\#\@\!\~\(\)\{\}\&\<\>\\\/])*$/,"gi")}routeFragmentNameRegExp(t){return new RegExp("^".concat(t,"$"))}enable(){this.settings&&!this.enabled&&(this.enableEmitters(),this.enableEvents(),this.enableRoutes(),this.routeChange(),this._enabled=!0)}disable(){this.settings&&this.enabled&&(this.disableEvents(),this.disableRoutes(),this.disableEmitters(),this._enabled=!1)}enableRoutes(){this.settings.controller&&(this._controller=this.settings.controller),this._routes=Object.entries(this.settings.routes).reduce((t,e,s,i)=>{var[r,a]=e;return t[r]=Object.assign(a,{callback:this.controller[a.callback].bind(this.controller)}),t},{})}enableEmitters(){this._emitters={navigateEmitter:new MVC.Emitters.Navigate}}disableEmitters(){delete this._emitters.navigateEmitter}disableRoutes(){delete this._routes,delete this._controller}enableEvents(){window.addEventListener("hashchange",this.routeChange.bind(this))}disableEvents(){window.removeEventListener("hashchange",this.routeChange.bind(this))}routeChange(){this._currentURL=window.location.href;var t=this._routeData;if(t.controller){var e=this.emitters.navigateEmitter;this.previousURL&&(t.previousURL=this.previousURL),e.unset().set(t),this.emit(e.name,e.emission()),t.controller.callback(e.emission())}}navigate(t){window.location.hash=t}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
