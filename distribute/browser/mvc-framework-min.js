var MVC=MVC||{};MVC.Constants={},MVC.CONST=MVC.Constants,MVC.Constants.Events={},MVC.CONST.EV=MVC.Constants.Events,MVC.Templates={ObjectQueryStringFormatInvalidRoot:function(t){return['Object Query "string" property must be formatted to first include "[@]".'].join("\n")},DataSchemaMismatch:function(t){return["Data and Schema properties do not match."].join("\n")},DataFunctionInvalid:function(t){['Model Data property type "Function" is not valid.'].join("\n")},DataUndefined:function(t){["Model Data property undefined."].join("\n")},SchemaUndefined:function(t){['Model "Schema" undefined.'].join("\n")}},MVC.TMPL=MVC.Templates,MVC.Utils={},MVC.Utils.isArray=function(t){return Array.isArray(t)},MVC.Utils.isObject=function(t){return!Array.isArray(t)&&"object"==typeof t},MVC.Utils.isEqualType=function(t,e){return t===e},MVC.Utils.isHTMLElement=function(t){return t instanceof HTMLElement},MVC.Utils.typeOf=function(t){switch(typeof t){case"object":return MVC.Utils.isArray(t)?"array":MVC.Utils.isObject(t)?"object":null===t?"null":void 0;case"string":case"number":case"boolean":case"undefined":case"function":return typeof t}},MVC.Utils.addPropertiesToObject=function(){var t;switch(arguments.length){case 2:var e=arguments[0];for(var[s,i]of(t=arguments[1],Object.entries(e)))t[s]=i;break;case 3:var r=arguments[0],a=arguments[1];(t=arguments[2])[r]=a}return t},MVC.Utils.objectQuery=function(t,e){var s=MVC.Utils.objectQuery.parseNotation(t);return"@"===s[0]&&s.splice(0,1),s.length?(e=MVC.Utils.isObject(e)?Object.entries(e):e,s.reduce((t,e,s,i)=>{var r=[];for(var[a,n]of(e=MVC.Utils.objectQuery.parseFragment(e),t))a.match(e)&&(r=s===i.length-1?r.concat([[a,n]]):r.concat(Object.entries(n)));return t=r},e)):e},MVC.Utils.objectQuery.parseNotation=function(t){return t="["===t.charAt(0)&&"]"==t.charAt(t.length-1)?t.slice(1,-1).split("]["):t.split(".")},MVC.Utils.objectQuery.parseFragment=function(t){return"/"===t.charAt(0)&&"/"==t.charAt(t.length-1)&&(t=t.slice(1,-1),t=new RegExp("^".concat(t,"$"))),t},MVC.Utils.toggleEventsForTargetObjects=function(t,e,s,i){for(var[r,a]of Object.entries(e)){var n=r.split(" "),l=n[0],h=n[1],o=MVC.Utils.objectQuery(l,s);for(var[c,d]of o=MVC.Utils.isArray(o)?o:[["@",o]]){var b="on"===t?d instanceof NodeList||d instanceof HTMLElement||d instanceof Document?"addEventListener":"on":d instanceof NodeList||d instanceof HTMLElement||d instanceof Document?"removeEventListener":"off",v=MVC.Utils.objectQuery(a,i)[0][1];if(d instanceof NodeList)for(var u of d)u[b](h,v);else HTMLElement,d[b](h,v)}}},MVC.Utils.bindEventsToTargetObjects=function(){this.toggleEventsForTargetObjects("on",...arguments)},MVC.Utils.unbindEventsFromTargetObjects=function(){this.toggleEventsForTargetObjects("off",...arguments)},MVC.Utils.validateDataSchema=function(t,e){if(!e)throw MVC.TMPL;switch(MVC.Utils.typeOf(t)){case"array":var s=[];if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(s)))for(var[i,r]of(console.log(e.name),Object.entries(t)))s.push(this.validateDataSchema(r));return s;case"object":var a={};if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(a)))for(var[n,l]of(console.log(e.name),Object.entries(t)))a[n]=this.validateDataSchema(l,e[n]);return a;case"string":case"number":case"boolean":if(e="function"===MVC.Utils.typeOf(e)?e():e,MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(t)))return console.log(e.name),t;throw MVC.TMPL;case"null":if(MVC.Utils.isEqualType(MVC.Utils.typeOf(e),MVC.Utils.typeOf(t)))return t;break;case"undefined":case"function":throw MVC.TMPL}},MVC.Events=class{constructor(){}get _events(){return this.events=this.events?this.events:{},this.events}eventCallbacks(t){return this._events[t]||{}}eventCallbackName(t){return t.name.length?t.name:"anonymousFunction"}eventCallbackGroup(t,e){return t[e]||[]}on(t,e){var s=this.eventCallbacks(t),i=this.eventCallbackName(e),r=this.eventCallbackGroup(s,i);r.push(e),s[i]=r,this._events[t]=s}off(){switch(arguments.length){case 1:var t=arguments[0];delete this._events[t];break;case 2:t=arguments[0];var e=arguments[1],s=this.eventCallbackName(e);delete this._events[t][s]}}emit(t,e){var s=this.eventCallbacks(t);for(var[i,r]of Object.entries(s))for(var a of r){a(e,...Object.values(arguments).splice(2)||[])}}},MVC.Channels=class{constructor(){}get _channels(){return this.channels=this.channels?this.channels:{},this.channels}channel(t){return this._channels[t]=this._channels[t]?this._channels[t]:new MVC.Channels.Channel,this._channels[t]}off(t){delete this._channels[t]}},MVC.Channels.Channel=class{constructor(){}get _responses(){return this.responses=this.responses?this.responses:{},this.responses}response(t,e){if(!e)return this._responses[response];this._responses[t]=e}request(t,e){if(this._responses[t])return this._responses[t](e)}off(t){if(t)delete this._responses[t];else for(var[e]of Object.keys(this._responses))delete this._responses[e]}},MVC.Base=class extends MVC.Events{constructor(t,e){super(),e&&(this._configuration=e),t&&(this._settings=t)}get _configuration(){return this.configuration=this.configuration?this.configuration:{},this.configuration}set _configuration(t){this.configuration=t}get _settings(){return this.settings=this.settings?this.settings:{},this.settings}set _settings(t){this.settings=MVC.Utils.addPropertiesToObject(t,this._settings)}get _emitters(){return this.emitters=this.emitters?this.emitters:{},this.emitters}set _emitters(t){this.emitters=MVC.Utils.addPropertiesToObject(t,this._emitters)}},MVC.Service=class extends MVC.Base{constructor(){super(...arguments)}get _defaults(){return this.defaults||{contentType:{"Content-Type":"application/json"},responseType:"json"}}get _responseTypes(){return["","arraybuffer","blob","document","json","text"]}get _responseType(){return this.responseType}set _responseType(t){this._xhr.responseType=this._responseTypes.find(e=>e===t)||this._defaults.responseType}get _type(){return this.type}set _type(t){this.type=t}get _url(){return this.url}set _url(t){this.url=t}get _headers(){return this.headers||[]}set _headers(t){for(var e of(this._headers.length=0,t))this._xhr.setRequestHeader({header:e}[0],{header:e}[1]),this._headers.push(e)}get _data(){return this.data}set _data(t){this.data=t}get _xhr(){return this.xhr=this.xhr?this.xhr:new XMLHttpRequest,this.xhr}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}request(t){return t=t||this.data||null,new Promise((e,s)=>{200===this._xhr.status&&this._xhr.abort(),this._xhr.open(this.type,this.url),this._headers=this.settings.headers||[this._defaults.contentType],this._xhr.onload=e,this._xhr.onerror=s,this._xhr.send(t)}).then(t=>(this.emit("xhr:resolve",{name:"xhr:resolve",data:t.currentTarget}),t))}enable(){var t=this.settings;!this.enabled&&Object.keys(t).length&&(t.type&&(this._type=t.type),t.url&&(this._url=t.url),t.data&&(this._data=t.data||null),this.settings.responseType&&(this._responseType=this._settings.responseType),this._enabled=!0)}disable(){var t=this.settings;this.enabled&&Object.keys(t).length&&(delete this._type,delete this._url,delete this._data,delete this._headers,delete this._responseType,this._enabled=!1)}},MVC.Model=class extends MVC.Base{constructor(){super(...arguments)}get _localStorage(){return this.localStorage}set _localStorage(t){this.localStorage=t}get _defaults(){return this.defaults}set _defaults(t){this.defaults=t}get _schema(){return this._schema}set _schema(t){this.schema=t}get _histiogram(){return this.histiogram||{length:1}}set _histiogram(t){this.histiogram=Object.assign(this._histiogram,t)}get _history(){return this.history=this.history?this.history:[],this.history}set _history(t){Object.keys(t).length&&this._histiogram.length&&(this._history.unshift(this.parse(t)),this._history.splice(this._histiogram.length))}get _db(){var t=localStorage.getItem(this.localStorage.endpoint);return this.db=t||"{}",JSON.parse(this.db)}set _db(t){t=JSON.stringify(t),localStorage.setItem(this.localStorage.endpoint,t)}get _data(){return this.data=this.data?this.data:{},this.data}get _dataEvents(){return this.dataEvents=this.dataEvents?this.dataEvents:{},this.dataEvents}set _dataEvents(t){this.dataEvents=MVC.Utils.addPropertiesToObject(t,this._dataEvents)}get _dataCallbacks(){return this.dataCallbacks=this.dataCallbacks?this.dataCallbacks:{},this.dataCallbacks}set _dataCallbacks(t){this.dataCallbacks=MVC.Utils.addPropertiesToObject(t,this._dataCallbacks)}get _services(){return this.services=this.services?this.services:{},this.services}set _services(t){this.services=MVC.Utils.addPropertiesToObject(t,this._services)}get _serviceEvents(){return this.serviceEvents=this.serviceEvents?this.serviceEvents:{},this.serviceEvents}set _serviceEvents(t){this.serviceEvents=MVC.Utils.addPropertiesToObject(t,this._serviceEvents)}get _serviceCallbacks(){return this.serviceCallbacks=this.serviceCallbacks?this.serviceCallbacks:{},this.serviceCallbacks}set _serviceCallbacks(t){this.serviceCallbacks=MVC.Utils.addPropertiesToObject(t,this._serviceCallbacks)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}enableServiceEvents(){MVC.Utils.bindEventsToTargetObjects(this.serviceEvents,this.services,this.serviceCallbacks)}disableServiceEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.serviceEvents,this.services,this.serviceCallbacks)}enableDataEvents(){MVC.Utils.bindEventsToTargetObjects(this.dataEvents,this,this.dataCallbacks)}disableDataEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.dataEvents,this,this.dataCallbacks)}setDefaults(){var t={};this.defaults&&Object.assign(t,this.defaults),this.localStorage&&Object.assign(t,this._db),Object.keys(t)&&this.set(t)}get(){var t=arguments[0];return this._data["_".concat(t)]}set(){switch(this._history=this.parse(),arguments.length){case 1:Object.entries(arguments[0]).forEach((t,e)=>{var[s,i]=t;this.setDataProperty(s,i),this.localStorage&&this.setDB(s,i)});break;case 2:var t=arguments[0],e=arguments[1];this.setDataProperty(t,e),this.localStorage&&this.setDB(t,e)}}unset(){switch(this._history=this.parse(),arguments.length){case 0:for(var t of Object.keys(this._data))this.unsetDataProperty(t);break;case 1:var e=arguments[0];this.unsetDataProperty(e)}}setDB(){var t=this._db;switch(arguments.length){case 1:Object.entries(arguments[0]).forEach(e=>{var[s,i]=e;t[s]=i});break;case 2:var e=arguments[0],s=arguments[1];t[e]=s}this._db=t}unsetDB(){switch(arguments.length){case 0:delete this._db;break;case 1:var t=this._db;delete t[arguments[0]],this._db=t}}setDataProperty(t,e){if(!this._data["_".concat(t)]){var s=this;Object.defineProperties(this._data,{["_".concat(t)]:{configurable:!0,get(){return this[t]},set(e){this[t]=e;var i=["set",":",t].join("");s.emit(i,{name:i,data:{key:t,value:e}},s),s.emit("set",{name:"set",data:{key:t,value:e}},s)}}})}this._data["_".concat(t)]=e}unsetDataProperty(t){var e=["unset",":",t].join(""),s=this._data[t];delete this._data["_".concat(t)],delete this._data[t],this.emit(e,{name:e,data:{key:t,value:s}}),this.emit("unset",{name:"unset",data:{key:t,value:s}})}parse(t){return t=t||this._data,JSON.parse(JSON.stringify(Object.assign({},t)))}enable(){this.settings&&!this.enabled&&(this.settings.localStorage&&(this._localStorage=this.settings.localStorage),this.settings.histiogram&&(this._histiogram=this.settings.histiogram),this.settings.emitters&&(this._emitters=this.settings.emitters),this.settings.services&&(this._services=this.settings.services),this.settings.serviceCallbacks&&(this._serviceCallbacks=this.settings.serviceCallbacks),this.settings.serviceEvents&&(this._serviceEvents=this.settings.serviceEvents),this.settings.data&&this.set(this.settings.data),this.settings.dataCallbacks&&(this._dataCallbacks=this.settings.dataCallbacks),this.settings.dataEvents&&(this._dataEvents=this.settings.dataEvents),this.settings.schema&&(this._schema=this.settings.schema),this.settings.defaults&&(this._defaults=this.settings.defaults),this.services&&this.serviceEvents&&this.serviceCallbacks&&this.enableServiceEvents(),this.dataEvents&&this.dataCallbacks&&this.enableDataEvents(),this._enabled=!0)}disable(){this.settings&&!this.enabled&&(this.services&&this.serviceEvents&&this.serviceCallbacks&&this.disableServiceEvents(),this.dataEvents&&this.dataCallbacks&&this.disableDataEvents(),delete this._localStorage,delete this._histiogram,delete this._services,delete this._serviceCallbacks,delete this._serviceEvents,delete this._data,delete this._dataCallbacks,delete this._dataEvents,delete this._schema,delete this._emitters)}},MVC.Emitter=class extends MVC.Model{constructor(){super(...arguments),this.settings&&this.settings.name&&(this._name=this.settings.name)}get _name(){return this.name}set _name(t){this.name=t}emission(){var t={name:this.name,data:this.data};return this.emit(this.name,t),t}},MVC.Emitters={},MVC.Emitters.NavigateEmitter=class extends MVC.Emitter{constructor(){super(...arguments),this.addSettings(),this.enable()}addSettings(){this._name="navigate",this._schema={oldURL:String,newURL:String,currentRoute:String,currentController:String}}},MVC.View=class extends MVC.Base{constructor(){super(...arguments)}get _elementName(){return this._element.tagName}set _elementName(t){this._element||(this._element=document.createElement(t))}get _element(){return this.element}set _element(t){t instanceof HTMLElement||t instanceof Document?this.element=t:"string"==typeof t&&(this.element=document.querySelector(t)),this.elementObserver.observe(this.element,{subtree:!0,childList:!0})}get _attributes(){return this._element.attributes}set _attributes(t){for(var[e,s]of Object.entries(t))void 0===s?this._element.removeAttribute(e):this._element.setAttribute(e,s)}get _ui(){return this.ui=this.ui?this.ui:{},this.ui}set _ui(t){for(var[e,s]of(this._ui.$element||(this._ui.$element=this.element),Object.entries(t)))"string"==typeof s?this._ui[e]=this._element.querySelectorAll(s):(s instanceof HTMLElement||s instanceof Document)&&(this._ui[e]=s)}get _uiEvents(){return this.uiEvents}set _uiEvents(t){this.uiEvents=t}get _uiCallbacks(){return this.uiCallbacks=this.uiCallbacks?this.uiCallbacks:{},this.uiCallbacks}set _uiCallbacks(t){this.uiCallbacks=MVC.Utils.addPropertiesToObject(t,this._uiCallbacks)}get _observerCallbacks(){return this.observerCallbacks=this.observerCallbacks?this.observerCallbacks:{},this.observerCallbacks}set _observerCallbacks(t){this.observerCallbacks=MVC.Utils.addPropertiesToObject(t,this._observerCallbacks)}get elementObserver(){return this._elementObserver=this._elementObserver?this._elementObserver:new MutationObserver(this.elementObserve.bind(this)),this._elementObserver}get _insert(){return this.insert}set _insert(t){this.insert=t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _templates(){return this.templates=this.templates?this.templates:{},this.templates}set _templates(t){this.templates=MVC.Utils.addPropertiesToObject(t,this._templates)}elementObserve(t,e){for(var[s,i]of Object.entries(t))switch(i.type){case"childList":for(var r of["addedNodes","removedNodes"])i[r].length&&this.resetUI()}}autoInsert(){this.insert&&document.querySelectorAll(this.insert.element).forEach(t=>{t.insertAdjacentElement(this.insert.method,this.element)})}autoRemove(){this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element)}enableElement(t){(t=t||this.settings).elementName&&(this._elementName=t.elementName),t.element&&(this._element=t.element),t.attributes&&(this._attributes=t.attributes),t.templates&&(this._templates=t.templates),t.insert&&(this._insert=t.insert)}disableElement(t){t=t||this.settings,this.element&&this.element.parentElement&&this.element.parentElement.removeChild(this.element),this.element&&delete this.element,this.attributes&&delete this.attributes,this.templates&&delete this.templates,this.insert&&delete this.insert}resetUI(){this.disableUI(),this.enableUI()}enableUI(t){(t=t||this.settings).ui&&(this._ui=t.ui),t.uiCallbacks&&(this._uiCallbacks=t.uiCallbacks),t.uiEvents&&(this._uiEvents=t.uiEvents,this.enableUIEvents())}disableUI(t){(t=t||this.settings).uiEvents&&(this.disableUIEvents(),delete this._uiEvents),delete this.uiEvents,delete this.ui,delete this.uiCallbacks}enableUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.bindEventsToTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}disableUIEvents(){this.uiEvents&&this.ui&&this.uiCallbacks&&MVC.Utils.unbindEventsFromTargetObjects(this.uiEvents,this.ui,this.uiCallbacks)}enableEmitters(){this.settings.emitters&&(this._emitters=this.settings.emitters)}disableEmitters(){this._emitters&&delete this._emitters}enable(){var t=this.settings;if(t&&!this._enabled)return this.enableEmitters(),this.enableElement(t),this.enableUI(t),this._enabled=!0,this}disable(){var t=this.settings;if(t&&this._enabled)return this.disableUI(t),this.disableElement(t),this.disableEmitters(),this._enabled=!1,thiss}},MVC.Controller=class extends MVC.Base{constructor(){super(...arguments)}get _emitterCallbacks(){return this.emitterCallbacks=this.emitterCallbacks?this.emitterCallbacks:{},this.emitterCallbacks}set _emitterCallbacks(t){this.emitterCallbacks=MVC.Utils.addPropertiesToObject(t,this._emitterCallbacks)}get _modelCallbacks(){return this.modelCallbacks=this.modelCallbacks?this.modelCallbacks:{},this.modelCallbacks}set _modelCallbacks(t){this.modelCallbacks=MVC.Utils.addPropertiesToObject(t,this._modelCallbacks)}get _viewCallbacks(){return this.viewCallbacks=this.viewCallbacks?this.viewCallbacks:{},this.viewCallbacks}set _viewCallbacks(t){this.viewCallbacks=MVC.Utils.addPropertiesToObject(t,this._viewCallbacks)}get _controllerCallbacks(){return this.controllerCallbacks=this.controllerCallbacks?this.controllerCallbacks:{},this.controllerCallbacks}set _controllerCallbacks(t){this.controllerCallbacks=MVC.Utils.addPropertiesToObject(t,this._controllerCallbacks)}get _models(){return this.models=this.models?this.models:{},this.models}set _models(t){this.models=MVC.Utils.addPropertiesToObject(t,this._models)}get _views(){return this.views=this.views?this.views:{},this.views}set _views(t){this.views=MVC.Utils.addPropertiesToObject(t,this._views)}get _controllers(){return this.controllers=this.controllers?this.controllers:{},this.controllers}set _controllers(t){this.controllers=MVC.Utils.addPropertiesToObject(t,this._controllers)}get _routers(){return this.routers=this.routers?this.routers:{},this.routers}set _routers(t){this.routers=MVC.Utils.addPropertiesToObject(t,this._routers)}get _routerEvents(){return this.routerEvents=this.routerEvents?this.routerEvents:{},this.routerEvents}set _routerEvents(t){this.routerEvents=MVC.Utils.addPropertiesToObject(t,this._routerEvents)}get _routerCallbacks(){return this.routerCallbacks=this.routerCallbacks?this.routerCallbacks:{},this.routerCallbacks}set _routerCallbacks(t){this.routerCallbacks=MVC.Utils.addPropertiesToObject(t,this._routerCallbacks)}get _emitterEvents(){return this.emitterEvents=this.emitterEvents?this.emitterEvents:{},this.emitterEvents}set _emitterEvents(t){this.emitterEvents=MVC.Utils.addPropertiesToObject(t,this._emitterEvents)}get _modelEvents(){return this.modelEvents=this.modelEvents?this.modelEvents:{},this.modelEvents}set _modelEvents(t){this.modelEvents=MVC.Utils.addPropertiesToObject(t,this._modelEvents)}get _viewEvents(){return this.viewEvents=this.viewEvents?this.viewEvents:{},this.viewEvents}set _viewEvents(t){this.viewEvents=MVC.Utils.addPropertiesToObject(t,this._viewEvents)}get _controllerEvents(){return this.controllerEvents=this.controllerEvents?this.controllerEvents:{},this.controllerEvents}set _controllerEvents(t){this.controllerEvents=MVC.Utils.addPropertiesToObject(t,this._controllerEvents)}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}enableModelEvents(){MVC.Utils.bindEventsToTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}disableModelEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.modelEvents,this.models,this.modelCallbacks)}enableViewEvents(){MVC.Utils.bindEventsToTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}disableViewEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.viewEvents,this.views,this.viewCallbacks)}enableControllerEvents(){MVC.Utils.bindEventsToTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}disableControllerEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.controllerEvents,this.controllers,this.controllerCallbacks)}enableEmitterEvents(){MVC.Utils.bindEventsToTargetObjects(this.emitterEvents,this.emitters,this.emitterCallbacks)}disableEmitterEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.emitterEvents,this.emitters,this.emitterCallbacks)}enableRouterEvents(){MVC.Utils.bindEventsToTargetObjects(this.routerEvents,this.routers,this.routerCallbacks)}disableRouterEvents(){MVC.Utils.unbindEventsFromTargetObjects(this.routerEvents,this.routers,this.routerCallbacks)}enable(){var t=this.settings;t&&!this.enabled&&(t.modelCallbacks&&(this._modelCallbacks=t.modelCallbacks),t.viewCallbacks&&(this._viewCallbacks=t.viewCallbacks),t.controllerCallbacks&&(this._controllerCallbacks=t.controllerCallbacks),t.emitterCallbacks&&(this._emitterCallbacks=t.emitterCallbacks),t.routerCallbacks&&(this._routerCallbacks=t.routerCallbacks),t.models&&(this._models=t.models),t.views&&(this._views=t.views),t.controllers&&(this._controllers=t.controllers),t.emitters&&(this._emitters=t.emitters),t.routers&&(this._routers=t.routers),t.routerEvents&&(this._routerEvents=t.routerEvents),t.modelEvents&&(this._modelEvents=t.modelEvents),t.viewEvents&&(this._viewEvents=t.viewEvents),t.controllerEvents&&(this._controllerEvents=t.controllerEvents),t.emitterEvents&&(this._emitterEvents=t.emitterEvents),this.modelEvents&&this.models&&this.modelCallbacks&&this.enableModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.enableViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.enableControllerEvents(),this.routerEvents&&this.routers&&this.routerCallbacks&&this.enableRouterEvents(),this.emitterEvents&&this.emitters&&this.emitterCallbacks&&this.enableEmitterEvents(),this._enabled=!0)}reset(){this.disable(),this.enable()}disable(){this.settings&&this.enabled&&(this.modelEvents&&this.models&&this.modelCallbacks&&this.disableModelEvents(),this.viewEvents&&this.views&&this.viewCallbacks&&this.disableViewEvents(),this.controllerEvents&&this.controllers&&this.controllerCallbacks&&this.disableControllerEvents()),this.routerEvents&&this.routers&&this.routerCallbacks&&this.disableRouterEvents(),this.emitterEvents&&this.emitters&&this.emitterCallbacks&&(this.disableEmitterEvents(),delete this._modelCallbacks,delete this._viewCallbacks,delete this._controllerCallbacks,delete this._emitterCallbacks,delete this._routerCallbacks,delete this._models,delete this._views,delete this._controllers,delete this._emitters,delete this._routers,delete this._routerEvents,delete this._modelEvents,delete this._viewEvents,delete this._controllerEvents,delete this._emitterEvents,this._enabled=!1)}},MVC.Router=class extends MVC.Base{constructor(){super(...arguments)}get route(){return this._hash?String(window.location.hash).split("#").pop():String(window.location.pathname)}get _hash(){return this.hash}set _hash(t){this.hash=t}get _enabled(){return this.enabled||!1}set _enabled(t){this.enabled=t}get _routes(){return this.routes=this.routes?this.routes:{},this.routes}set _routes(t){this.routes=MVC.Utils.addPropertiesToObject(t,this._routes)}get _controller(){return this.controller}set _controller(t){this.controller=t}get _previousURL(){return this.previousURL}set _previousURL(t){this.previousURL=t}get _currentURL(){return this.currentURL}set _currentURL(t){this.currentURL=t}get fragmentIDRegExp(){return new RegExp(/^([0-9A-Z\?\=\,\.\*\-\_\'\"\^\%\$\#\@\!\~\(\)\{\}\&\<\>\\\/])*$/,"gi")}fragmentNameRegExp(t){return new RegExp("^".concat(t,"$"))}enable(){this.settings&&!this.enabled&&(this._hash="boolean"!=typeof this.settings.hash||this.settings.hash,this.enableEmitters(),this.enableEvents(),this.enableRoutes(),this.routeChange(),this._enabled=!0)}disable(){this.settings&&this.enabled&&(delete this._hash,this.disableEvents(),this.disableRoutes(),this.disableEmitters(),this._enabled=!1)}enableRoutes(){this.settings.controller&&(this._controller=this.settings.controller),this._routes=Object.entries(this.settings.routes).reduce((t,e,s,i)=>{var[r,a]=e;return t[r]=this.controller[a],t},{})}enableEmitters(){this._emitters={navigateEmitter:new MVC.Emitters.NavigateEmitter}}disableEmitters(){delete this._emitters.navigateEmitter}disableRoutes(){delete this._routes,delete this._controller}enableEvents(){window.addEventListener("hashchange",this.routeChange.bind(this))}disableEvents(){window.removeEventListener("hashchange",this.routeChange.bind(this))}routeChange(){var t=this.route.split("/").filter(t=>t.length);t=t.length?t:["/"];var e=Object.entries(this.routes).filter(e=>{var s,[i,r]=e;if(i=(i=i.split("/").filter(t=>t.length)).length?i:["/"],t.length&&t.length===i.length)return i.filter((e,i)=>{if((void 0===s||!0===s)&&(":"===e[0]?e=this.fragmentIDRegExp:(e=e.replace(new RegExp("/","gi"),"\\/"),e=this.fragmentNameRegExp(e)),!0===(s=e.test(t[i]))&&i===t.length-1))return r})[0]})[0];try{this.currentURL&&(this._previousURL=this.currentURL),this._currentURL=window.location.href;e[0];var s=e[1],i=this.emitters.navigateEmitter,r={currentURL:this.currentURL,previousURL:this.previousURL,currentRoute:this.route,currentController:s.name};i.set(r),this.emit(i.name,i.emission()),s(i.emission())}catch(t){throw"Route Definition Error"}}navigate(t){window.location.hash=t}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1WQy5qcyIsIkNvbnN0YW50cy5qcyIsIkV2ZW50cy5qcyIsIlRlbXBsYXRlcy5qcyIsIlV0aWxzLmpzIiwiaXMuanMiLCJ0eXBlT2YuanMiLCJhZGRQcm9wZXJ0aWVzVG9PYmplY3QuanMiLCJvYmplY3RRdWVyeS5qcyIsInRvZ2dsZUV2ZW50c0ZvclRhcmdldE9iamVjdHMuanMiLCJ2YWxpZGF0ZURhdGFTY2hlbWEuanMiLCJDaGFubmVscy5qcyIsIkNoYW5uZWwuanMiLCJCYXNlLmpzIiwiU2VydmljZS5qcyIsIk1vZGVsLmpzIiwiRW1pdHRlci5qcyIsImluZGV4LmpzIiwiTmF2aWdhdGUuanMiLCJWaWV3LmpzIiwiQ29udHJvbGxlci5qcyIsIlJvdXRlci5qcyJdLCJuYW1lcyI6WyJNVkMiLCJDb25zdGFudHMiLCJDT05TVCIsIkV2ZW50cyIsIkVWIiwiVGVtcGxhdGVzIiwiT2JqZWN0UXVlcnlTdHJpbmdGb3JtYXRJbnZhbGlkUm9vdCIsImRhdGEiLCJqb2luIiwiRGF0YVNjaGVtYU1pc21hdGNoIiwiRGF0YUZ1bmN0aW9uSW52YWxpZCIsIkRhdGFVbmRlZmluZWQiLCJTY2hlbWFVbmRlZmluZWQiLCJUTVBMIiwiVXRpbHMiLCJpc0FycmF5Iiwib2JqZWN0IiwiQXJyYXkiLCJpc09iamVjdCIsImlzRXF1YWxUeXBlIiwidmFsdWVBIiwidmFsdWVCIiwiaXNIVE1MRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidHlwZU9mIiwiYWRkUHJvcGVydGllc1RvT2JqZWN0IiwidGFyZ2V0T2JqZWN0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicHJvcGVydGllcyIsIl9wcm9wZXJ0eU5hbWUiLCJfcHJvcGVydHlWYWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJwcm9wZXJ0eU5hbWUiLCJwcm9wZXJ0eVZhbHVlIiwib2JqZWN0UXVlcnkiLCJzdHJpbmciLCJjb250ZXh0Iiwic3RyaW5nRGF0YSIsInBhcnNlTm90YXRpb24iLCJzcGxpY2UiLCJyZWR1Y2UiLCJmcmFnbWVudCIsImZyYWdtZW50SW5kZXgiLCJmcmFnbWVudHMiLCJwcm9wZXJ0eUtleSIsInBhcnNlRnJhZ21lbnQiLCJtYXRjaCIsImNvbmNhdCIsImNoYXJBdCIsInNsaWNlIiwic3BsaXQiLCJSZWdFeHAiLCJ0b2dnbGVFdmVudHNGb3JUYXJnZXRPYmplY3RzIiwidG9nZ2xlTWV0aG9kIiwiZXZlbnRzIiwidGFyZ2V0T2JqZWN0cyIsImNhbGxiYWNrcyIsImV2ZW50U2V0dGluZ3MiLCJldmVudENhbGxiYWNrTmFtZSIsImV2ZW50RGF0YSIsImV2ZW50VGFyZ2V0U2V0dGluZ3MiLCJldmVudE5hbWUiLCJldmVudFRhcmdldHMiLCJldmVudFRhcmdldE5hbWUiLCJldmVudFRhcmdldCIsImV2ZW50TWV0aG9kTmFtZSIsIk5vZGVMaXN0IiwiRG9jdW1lbnQiLCJldmVudENhbGxiYWNrIiwiX2V2ZW50VGFyZ2V0IiwiYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cyIsInRoaXMiLCJ1bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyIsInZhbGlkYXRlRGF0YVNjaGVtYSIsInNjaGVtYSIsImFycmF5IiwiYXJyYXlLZXkiLCJhcnJheVZhbHVlIiwiY29uc29sZSIsImxvZyIsIm5hbWUiLCJwdXNoIiwib2JqZWN0S2V5Iiwib2JqZWN0VmFsdWUiLCJbb2JqZWN0IE9iamVjdF0iLCJfZXZlbnRzIiwiZXZlbnRDYWxsYmFja3MiLCJldmVudENhbGxiYWNrR3JvdXAiLCJldmVudENhbGxiYWNrR3JvdXBOYW1lIiwidmFsdWVzIiwiQ2hhbm5lbHMiLCJfY2hhbm5lbHMiLCJjaGFubmVscyIsImNoYW5uZWxOYW1lIiwiQ2hhbm5lbCIsIl9yZXNwb25zZXMiLCJyZXNwb25zZXMiLCJyZXNwb25zZU5hbWUiLCJyZXNwb25zZUNhbGxiYWNrIiwicmVzcG9uc2UiLCJyZXF1ZXN0RGF0YSIsIl9yZXNwb25zZU5hbWUiLCJrZXlzIiwiQmFzZSIsInNldHRpbmdzIiwiY29uZmlndXJhdGlvbiIsInN1cGVyIiwiX2NvbmZpZ3VyYXRpb24iLCJfc2V0dGluZ3MiLCJfZW1pdHRlcnMiLCJlbWl0dGVycyIsIlNlcnZpY2UiLCJfZGVmYXVsdHMiLCJkZWZhdWx0cyIsImNvbnRlbnRUeXBlIiwiQ29udGVudC1UeXBlIiwicmVzcG9uc2VUeXBlIiwiX3Jlc3BvbnNlVHlwZXMiLCJfcmVzcG9uc2VUeXBlIiwiX3hociIsImZpbmQiLCJyZXNwb25zZVR5cGVJdGVtIiwiX3R5cGUiLCJ0eXBlIiwiX3VybCIsInVybCIsIl9oZWFkZXJzIiwiaGVhZGVycyIsImhlYWRlciIsInNldFJlcXVlc3RIZWFkZXIiLCJfZGF0YSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiX2VuYWJsZWQiLCJlbmFibGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzdGF0dXMiLCJhYm9ydCIsIm9wZW4iLCJvbmxvYWQiLCJvbmVycm9yIiwic2VuZCIsInRoZW4iLCJlbWl0IiwiY3VycmVudFRhcmdldCIsIk1vZGVsIiwiX2xvY2FsU3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsIl9zY2hlbWEiLCJfaGlzdGlvZ3JhbSIsImhpc3Rpb2dyYW0iLCJhc3NpZ24iLCJfaGlzdG9yeSIsImhpc3RvcnkiLCJ1bnNoaWZ0IiwicGFyc2UiLCJfZGIiLCJkYiIsImdldEl0ZW0iLCJlbmRwb2ludCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXRJdGVtIiwiX2RhdGFFdmVudHMiLCJkYXRhRXZlbnRzIiwiX2RhdGFDYWxsYmFja3MiLCJkYXRhQ2FsbGJhY2tzIiwiX3NlcnZpY2VzIiwic2VydmljZXMiLCJfc2VydmljZUV2ZW50cyIsInNlcnZpY2VFdmVudHMiLCJfc2VydmljZUNhbGxiYWNrcyIsInNlcnZpY2VDYWxsYmFja3MiLCJzZXQiLCJwcm9wZXJ0eSIsImZvckVhY2giLCJfcmVmIiwiaW5kZXgiLCJrZXkiLCJ2YWx1ZSIsInNldERhdGFQcm9wZXJ0eSIsInNldERCIiwiX2tleSIsInVuc2V0RGF0YVByb3BlcnR5IiwiX3JlZjIiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwic2V0VmFsdWVFdmVudE5hbWUiLCJ1bnNldFZhbHVlRXZlbnROYW1lIiwidW5zZXRWYWx1ZSIsImVuYWJsZVNlcnZpY2VFdmVudHMiLCJlbmFibGVEYXRhRXZlbnRzIiwiZGlzYWJsZVNlcnZpY2VFdmVudHMiLCJkaXNhYmxlRGF0YUV2ZW50cyIsIkVtaXR0ZXIiLCJfbmFtZSIsIkVtaXR0ZXJzIiwiTmF2aWdhdGVFbWl0dGVyIiwiYWRkU2V0dGluZ3MiLCJlbmFibGUiLCJvbGRVUkwiLCJTdHJpbmciLCJuZXdVUkwiLCJjdXJyZW50Um91dGUiLCJjdXJyZW50Q29udHJvbGxlciIsIlZpZXciLCJfZWxlbWVudE5hbWUiLCJfZWxlbWVudCIsInRhZ05hbWUiLCJlbGVtZW50TmFtZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsInN1YnRyZWUiLCJjaGlsZExpc3QiLCJfYXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVLZXkiLCJhdHRyaWJ1dGVWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIl91aSIsInVpIiwidWlLZXkiLCJ1aVZhbHVlIiwicXVlcnlTZWxlY3RvckFsbCIsIl91aUV2ZW50cyIsInVpRXZlbnRzIiwiX3VpQ2FsbGJhY2tzIiwidWlDYWxsYmFja3MiLCJfb2JzZXJ2ZXJDYWxsYmFja3MiLCJvYnNlcnZlckNhbGxiYWNrcyIsIl9lbGVtZW50T2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiZWxlbWVudE9ic2VydmUiLCJiaW5kIiwiX2luc2VydCIsImluc2VydCIsIl90ZW1wbGF0ZXMiLCJ0ZW1wbGF0ZXMiLCJtdXRhdGlvblJlY29yZExpc3QiLCJvYnNlcnZlciIsIm11dGF0aW9uUmVjb3JkSW5kZXgiLCJtdXRhdGlvblJlY29yZCIsIm11dGF0aW9uUmVjb3JkQ2F0ZWdvcnkiLCJyZXNldFVJIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwibWV0aG9kIiwicGFyZW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwiZGlzYWJsZVVJIiwiZW5hYmxlVUkiLCJlbmFibGVVSUV2ZW50cyIsImRpc2FibGVVSUV2ZW50cyIsImVuYWJsZUVtaXR0ZXJzIiwiZW5hYmxlRWxlbWVudCIsImRpc2FibGVFbGVtZW50IiwiZGlzYWJsZUVtaXR0ZXJzIiwidGhpc3MiLCJDb250cm9sbGVyIiwiX2VtaXR0ZXJDYWxsYmFja3MiLCJlbWl0dGVyQ2FsbGJhY2tzIiwiX21vZGVsQ2FsbGJhY2tzIiwibW9kZWxDYWxsYmFja3MiLCJfdmlld0NhbGxiYWNrcyIsInZpZXdDYWxsYmFja3MiLCJfY29udHJvbGxlckNhbGxiYWNrcyIsImNvbnRyb2xsZXJDYWxsYmFja3MiLCJfbW9kZWxzIiwibW9kZWxzIiwiX3ZpZXdzIiwidmlld3MiLCJfY29udHJvbGxlcnMiLCJjb250cm9sbGVycyIsIl9yb3V0ZXJzIiwicm91dGVycyIsIl9yb3V0ZXJFdmVudHMiLCJyb3V0ZXJFdmVudHMiLCJfcm91dGVyQ2FsbGJhY2tzIiwicm91dGVyQ2FsbGJhY2tzIiwiX2VtaXR0ZXJFdmVudHMiLCJlbWl0dGVyRXZlbnRzIiwiX21vZGVsRXZlbnRzIiwibW9kZWxFdmVudHMiLCJfdmlld0V2ZW50cyIsInZpZXdFdmVudHMiLCJfY29udHJvbGxlckV2ZW50cyIsImNvbnRyb2xsZXJFdmVudHMiLCJlbmFibGVNb2RlbEV2ZW50cyIsImVuYWJsZVZpZXdFdmVudHMiLCJlbmFibGVDb250cm9sbGVyRXZlbnRzIiwiZW5hYmxlUm91dGVyRXZlbnRzIiwiZW5hYmxlRW1pdHRlckV2ZW50cyIsImRpc2FibGUiLCJkaXNhYmxlTW9kZWxFdmVudHMiLCJkaXNhYmxlVmlld0V2ZW50cyIsImRpc2FibGVDb250cm9sbGVyRXZlbnRzIiwiZGlzYWJsZVJvdXRlckV2ZW50cyIsImRpc2FibGVFbWl0dGVyRXZlbnRzIiwiUm91dGVyIiwicm91dGUiLCJfaGFzaCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaGFzaCIsInBvcCIsInBhdGhuYW1lIiwiX3JvdXRlcyIsInJvdXRlcyIsIl9jb250cm9sbGVyIiwiY29udHJvbGxlciIsIl9wcmV2aW91c1VSTCIsInByZXZpb3VzVVJMIiwiX2N1cnJlbnRVUkwiLCJjdXJyZW50VVJMIiwiZnJhZ21lbnRJRFJlZ0V4cCIsImVuYWJsZUV2ZW50cyIsImVuYWJsZVJvdXRlcyIsInJvdXRlQ2hhbmdlIiwiZGlzYWJsZUV2ZW50cyIsImRpc2FibGVSb3V0ZXMiLCJyb3V0ZUluZGV4Iiwib3JpZ2luYWxSb3V0ZXMiLCJyb3V0ZVBhdGgiLCJyb3V0ZUNhbGxiYWNrIiwibmF2aWdhdGVFbWl0dGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmaWx0ZXIiLCJyb3V0ZUNvbnRyb2xsZXJEYXRhIiwicm91dGVyUGF0aCIsInJvdXRlckNvbnRyb2xsZXIiLCJ1bmRlZmluZWQiLCJyZXBsYWNlIiwiZnJhZ21lbnROYW1lUmVnRXhwIiwidGVzdCIsImhyZWYiLCJyb3V0ZUNvbnRyb2xsZXIiLCJuYXZpZ2F0ZUVtaXR0ZXJEYXRhIiwiZW1pc3Npb24iLCJlcnJvciIsInBhdGgiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQU1BLEtBQU8sR0FDakJBLElBQUlDLFVBQVksR0FDaEJELElBQUlFLE1BQVFGLElBQUlDLFVBQ2hCRCxJQUFJQyxVQUFVRSxPQUFTLEdBQ3ZCSCxJQUFJRSxNQUFNRSxHQUFLSixJQUFJQyxVQUFVRSxPQUM3QkgsSUFBSUssVUFBWSxDQUNkQyxtQ0FBb0MsU0FBd0NDLEdBQzFFLE1BQU8sQ0FBQyw0RUFBNEVDLEtBQUssT0FFM0ZDLG1CQUFvQixTQUE0QkYsR0FDOUMsTUFBTyxDQUFDLDRDQUE0Q0MsS0FBSyxPQUUzREUsb0JBQXFCLFNBQTZCSCxHQUNoRCxDQUFDLHFEQUF1REMsS0FBSyxPQUUvREcsY0FBZSxTQUF1QkosR0FDcEMsQ0FBQyxrQ0FBa0NDLEtBQUssT0FFMUNJLGdCQUFpQixTQUF5QkwsR0FD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UCxhQUFlclAsS0FBS3dQLFlBQzlDeFAsS0FBS3VQLFlBQWNYLE9BQU9DLFNBQVNpQyxLQUNUUCxFQUFvQixHQUE5QyxJQUNJUSxFQUFrQlIsRUFBb0IsR0FDdENKLEVBQWtCblEsS0FBS3VDLFNBQVM0TixnQkFDaENhLEVBQXNCLENBQ3hCeEIsV0FBWXhQLEtBQUt3UCxXQUNqQkYsWUFBYXRQLEtBQUtzUCxZQUNsQmhILGFBQWN0SSxLQUFLME8sTUFDbkJuRyxrQkFBbUJ3SSxFQUFnQnRRLE1BRXJDMFAsRUFBZ0IzSixJQUFJd0ssR0FDcEJoUixLQUFLMEUsS0FBS3lMLEVBQWdCMVAsS0FBTTBQLEVBQWdCYyxZQUNoREYsRUFBZ0JaLEVBQWdCYyxZQUNoQyxNQUFPQyxHQUNQLEtBQU0sMEJBSVZyUSxTQUFTc1EsR0FDUHZDLE9BQU9DLFNBQVNDLEtBQU9xQyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNVkMgPSBNVkMgfHwge31cclxuIiwiTVZDLkNvbnN0YW50cyA9IHt9XG5NVkMuQ09OU1QgPSBNVkMuQ29uc3RhbnRzXG4iLCJNVkMuRXZlbnRzID0gY2xhc3Mge1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuICBnZXQgX2V2ZW50cygpIHtcclxuICAgIHRoaXMuZXZlbnRzID0gKHRoaXMuZXZlbnRzKVxyXG4gICAgICA/IHRoaXMuZXZlbnRzXHJcbiAgICAgIDoge31cclxuICAgIHJldHVybiB0aGlzLmV2ZW50c1xyXG4gIH1cclxuICBldmVudENhbGxiYWNrcyhldmVudE5hbWUpIHsgcmV0dXJuIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdIHx8IHt9IH1cclxuICBldmVudENhbGxiYWNrTmFtZShldmVudENhbGxiYWNrKSB7XHJcbiAgICByZXR1cm4gKGV2ZW50Q2FsbGJhY2submFtZS5sZW5ndGgpXHJcbiAgICAgID8gZXZlbnRDYWxsYmFjay5uYW1lXHJcbiAgICAgIDogJ2Fub255bW91c0Z1bmN0aW9uJ1xyXG4gIH1cclxuICBldmVudENhbGxiYWNrR3JvdXAoZXZlbnRDYWxsYmFja3MsIGV2ZW50Q2FsbGJhY2tOYW1lKSB7XHJcbiAgICByZXR1cm4gZXZlbnRDYWxsYmFja3NbZXZlbnRDYWxsYmFja05hbWVdIHx8IFtdXHJcbiAgfVxyXG4gIG9uKGV2ZW50TmFtZSwgZXZlbnRDYWxsYmFjaykge1xyXG4gICAgbGV0IGV2ZW50Q2FsbGJhY2tzID0gdGhpcy5ldmVudENhbGxiYWNrcyhldmVudE5hbWUpXHJcbiAgICBsZXQgZXZlbnRDYWxsYmFja05hbWUgPSB0aGlzLmV2ZW50Q2FsbGJhY2tOYW1lKGV2ZW50Q2FsbGJhY2spXHJcbiAgICBsZXQgZXZlbnRDYWxsYmFja0dyb3VwID0gdGhpcy5ldmVudENhbGxiYWNrR3JvdXAoZXZlbnRDYWxsYmFja3MsIGV2ZW50Q2FsbGJhY2tOYW1lKVxyXG4gICAgZXZlbnRDYWxsYmFja0dyb3VwLnB1c2goZXZlbnRDYWxsYmFjaylcclxuICAgIGV2ZW50Q2FsbGJhY2tzW2V2ZW50Q2FsbGJhY2tOYW1lXSA9IGV2ZW50Q2FsbGJhY2tHcm91cFxyXG4gICAgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gPSBldmVudENhbGxiYWNrc1xyXG4gIH1cclxuICBvZmYoKSB7XHJcbiAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICBjYXNlIDE6XHJcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGFyZ3VtZW50c1swXVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZlbnROYW1lXVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgMjpcclxuICAgICAgICB2YXIgZXZlbnROYW1lID0gYXJndW1lbnRzWzBdXHJcbiAgICAgICAgdmFyIGV2ZW50Q2FsbGJhY2sgPSBhcmd1bWVudHNbMV1cclxuICAgICAgICB2YXIgZXZlbnRDYWxsYmFja05hbWUgPSB0aGlzLmV2ZW50Q2FsbGJhY2tOYW1lKGV2ZW50Q2FsbGJhY2spXHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdW2V2ZW50Q2FsbGJhY2tOYW1lXVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG4gIGVtaXQoZXZlbnROYW1lLCBldmVudERhdGEpIHtcclxuICAgIGxldCBldmVudENhbGxiYWNrcyA9IHRoaXMuZXZlbnRDYWxsYmFja3MoZXZlbnROYW1lKVxyXG4gICAgZm9yKGxldCBbZXZlbnRDYWxsYmFja0dyb3VwTmFtZSwgZXZlbnRDYWxsYmFja0dyb3VwXSBvZiBPYmplY3QuZW50cmllcyhldmVudENhbGxiYWNrcykpIHtcclxuICAgICAgZm9yKGxldCBldmVudENhbGxiYWNrIG9mIGV2ZW50Q2FsbGJhY2tHcm91cCkge1xyXG4gICAgICAgIGxldCBhZGRpdGlvbmFsQXJndW1lbnRzID0gT2JqZWN0LnZhbHVlcyhhcmd1bWVudHMpLnNwbGljZSgyKSB8fCBbXVxyXG4gICAgICAgIGV2ZW50Q2FsbGJhY2soZXZlbnREYXRhLCAuLi5hZGRpdGlvbmFsQXJndW1lbnRzKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIk1WQy5UZW1wbGF0ZXMgPSB7XHJcbiAgT2JqZWN0UXVlcnlTdHJpbmdGb3JtYXRJbnZhbGlkUm9vdDogZnVuY3Rpb24gT2JqZWN0UXVlcnlTdHJpbmdGb3JtYXRJbnZhbGlkKGRhdGEpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdPYmplY3QgUXVlcnkgXCJzdHJpbmdcIiBwcm9wZXJ0eSBtdXN0IGJlIGZvcm1hdHRlZCB0byBmaXJzdCBpbmNsdWRlIFwiW0BdXCIuJ1xyXG4gICAgXS5qb2luKCdcXG4nKVxyXG4gIH0sXHJcbiAgRGF0YVNjaGVtYU1pc21hdGNoOiBmdW5jdGlvbiBEYXRhU2NoZW1hTWlzbWF0Y2goZGF0YSkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYERhdGEgYW5kIFNjaGVtYSBwcm9wZXJ0aWVzIGRvIG5vdCBtYXRjaC5gXHJcbiAgICBdLmpvaW4oJ1xcbicpXHJcbiAgfSxcclxuICBEYXRhRnVuY3Rpb25JbnZhbGlkOiBmdW5jdGlvbiBEYXRhRnVuY3Rpb25JbnZhbGlkKGRhdGEpIHtcclxuICAgIFtcclxuICAgICAgYE1vZGVsIERhdGEgcHJvcGVydHkgdHlwZSBcIkZ1bmN0aW9uXCIgaXMgbm90IHZhbGlkLmBcclxuICAgIF0uam9pbignXFxuJylcclxuICB9LFxyXG4gIERhdGFVbmRlZmluZWQ6IGZ1bmN0aW9uIERhdGFVbmRlZmluZWQoZGF0YSkge1xyXG4gICAgW1xyXG4gICAgICBgTW9kZWwgRGF0YSBwcm9wZXJ0eSB1bmRlZmluZWQuYFxyXG4gICAgXS5qb2luKCdcXG4nKVxyXG4gIH0sXHJcbiAgU2NoZW1hVW5kZWZpbmVkOiBmdW5jdGlvbiBTY2hlbWFVbmRlZmluZWQoZGF0YSkge1xyXG4gICAgW1xyXG4gICAgICBgTW9kZWwgXCJTY2hlbWFcIiB1bmRlZmluZWQuYFxyXG4gICAgXS5qb2luKCdcXG4nKVxyXG4gIH0sXHJcbn1cclxuTVZDLlRNUEwgPSBNVkMuVGVtcGxhdGVzXHJcbiIsIk1WQy5VdGlscyA9IHt9XHJcbiIsIk1WQy5VdGlscy5pc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShvYmplY3QpIHsgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqZWN0KSB9XHJcbk1WQy5VdGlscy5pc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KG9iamVjdCkge1xyXG4gIHJldHVybiAoIUFycmF5LmlzQXJyYXkob2JqZWN0KSlcclxuICAgID8gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCdcclxuICAgIDogZmFsc2VcclxufVxyXG5NVkMuVXRpbHMuaXNFcXVhbFR5cGUgPSBmdW5jdGlvbiBpc0VxdWFsVHlwZSh2YWx1ZUEsIHZhbHVlQikgeyByZXR1cm4gdmFsdWVBID09PSB2YWx1ZUIgfVxyXG5NVkMuVXRpbHMuaXNIVE1MRWxlbWVudCA9IGZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQob2JqZWN0KSB7XHJcbiAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XHJcbn1cclxuIiwiTVZDLlV0aWxzLnR5cGVPZiA9ICBmdW5jdGlvbiB0eXBlT2YoZGF0YSkge1xyXG4gIHN3aXRjaCh0eXBlb2YgZGF0YSkge1xyXG4gICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgbGV0IF9vYmplY3RcclxuICAgICAgaWYoTVZDLlV0aWxzLmlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgICAvLyBBcnJheVxyXG4gICAgICAgIHJldHVybiAnYXJyYXknXHJcbiAgICAgIH0gZWxzZSBpZihcclxuICAgICAgICBNVkMuVXRpbHMuaXNPYmplY3QoZGF0YSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgLy8gT2JqZWN0XHJcbiAgICAgICAgcmV0dXJuICdvYmplY3QnXHJcbiAgICAgIH0gZWxzZSBpZihcclxuICAgICAgICBkYXRhID09PSBudWxsXHJcbiAgICAgICkge1xyXG4gICAgICAgIC8vIE51bGxcclxuICAgICAgICByZXR1cm4gJ251bGwnXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIF9vYmplY3RcclxuICAgICAgYnJlYWtcclxuICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICBjYXNlICdudW1iZXInOlxyXG4gICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICBjYXNlICd1bmRlZmluZWQnOlxyXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxyXG4gICAgICByZXR1cm4gdHlwZW9mIGRhdGFcclxuICAgICAgYnJlYWtcclxuICB9XHJcbn1cclxuIiwiTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdCA9IGZ1bmN0aW9uIGFkZFByb3BlcnRpZXNUb09iamVjdCgpIHtcclxuICBsZXQgdGFyZ2V0T2JqZWN0XHJcbiAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGNhc2UgMjpcclxuICAgICAgbGV0IHByb3BlcnRpZXMgPSBhcmd1bWVudHNbMF1cclxuICAgICAgdGFyZ2V0T2JqZWN0ID0gYXJndW1lbnRzWzFdXHJcbiAgICAgIGZvcihsZXQgW3Byb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcGVydGllcykpIHtcclxuICAgICAgICB0YXJnZXRPYmplY3RbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5VmFsdWVcclxuICAgICAgfVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICBsZXQgcHJvcGVydHlOYW1lID0gYXJndW1lbnRzWzBdXHJcbiAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gYXJndW1lbnRzWzFdXHJcbiAgICAgIHRhcmdldE9iamVjdCA9IGFyZ3VtZW50c1syXVxyXG4gICAgICB0YXJnZXRPYmplY3RbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5VmFsdWVcclxuICAgICAgYnJlYWtcclxuICB9XHJcbiAgcmV0dXJuIHRhcmdldE9iamVjdFxyXG59XHJcbiIsIk1WQy5VdGlscy5vYmplY3RRdWVyeSA9IGZ1bmN0aW9uIG9iamVjdFF1ZXJ5KFxyXG4gIHN0cmluZyxcclxuICBjb250ZXh0XHJcbikge1xyXG4gIGxldCBzdHJpbmdEYXRhID0gTVZDLlV0aWxzLm9iamVjdFF1ZXJ5LnBhcnNlTm90YXRpb24oc3RyaW5nKVxyXG4gIGlmKHN0cmluZ0RhdGFbMF0gPT09ICdAJykgc3RyaW5nRGF0YS5zcGxpY2UoMCwgMSlcclxuICBpZighc3RyaW5nRGF0YS5sZW5ndGgpIHJldHVybiBjb250ZXh0XHJcbiAgY29udGV4dCA9IChNVkMuVXRpbHMuaXNPYmplY3QoY29udGV4dCkpXHJcbiAgICA/IE9iamVjdC5lbnRyaWVzKGNvbnRleHQpXHJcbiAgICA6IGNvbnRleHRcclxuICByZXR1cm4gc3RyaW5nRGF0YS5yZWR1Y2UoKG9iamVjdCwgZnJhZ21lbnQsIGZyYWdtZW50SW5kZXgsIGZyYWdtZW50cykgPT4ge1xyXG4gICAgbGV0IHByb3BlcnRpZXMgPSBbXVxyXG4gICAgZnJhZ21lbnQgPSBNVkMuVXRpbHMub2JqZWN0UXVlcnkucGFyc2VGcmFnbWVudChmcmFnbWVudClcclxuICAgIGZvcihsZXQgW3Byb3BlcnR5S2V5LCBwcm9wZXJ0eVZhbHVlXSBvZiBvYmplY3QpIHtcclxuICAgICAgaWYocHJvcGVydHlLZXkubWF0Y2goZnJhZ21lbnQpKSB7XHJcbiAgICAgICAgaWYoZnJhZ21lbnRJbmRleCA9PT0gZnJhZ21lbnRzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmNvbmNhdChbW3Byb3BlcnR5S2V5LCBwcm9wZXJ0eVZhbHVlXV0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmNvbmNhdChPYmplY3QuZW50cmllcyhwcm9wZXJ0eVZhbHVlKSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIG9iamVjdCA9IHByb3BlcnRpZXNcclxuICAgIHJldHVybiBvYmplY3RcclxuICB9LCBjb250ZXh0KVxyXG59XHJcbk1WQy5VdGlscy5vYmplY3RRdWVyeS5wYXJzZU5vdGF0aW9uID0gZnVuY3Rpb24gcGFyc2VOb3RhdGlvbihzdHJpbmcpIHtcclxuICBpZihcclxuICAgIHN0cmluZy5jaGFyQXQoMCkgPT09ICdbJyAmJlxyXG4gICAgc3RyaW5nLmNoYXJBdChzdHJpbmcubGVuZ3RoIC0gMSkgPT0gJ10nXHJcbiAgKSB7XHJcbiAgICBzdHJpbmcgPSBzdHJpbmdcclxuICAgICAgLnNsaWNlKDEsIC0xKVxyXG4gICAgICAuc3BsaXQoJ11bJylcclxuICB9IGVsc2Uge1xyXG4gICAgc3RyaW5nID0gc3RyaW5nXHJcbiAgICAgIC5zcGxpdCgnLicpXHJcbiAgfVxyXG4gIHJldHVybiBzdHJpbmdcclxufVxyXG5NVkMuVXRpbHMub2JqZWN0UXVlcnkucGFyc2VGcmFnbWVudCA9IGZ1bmN0aW9uIHBhcnNlRnJhZ21lbnQoZnJhZ21lbnQpIHtcclxuICBpZihcclxuICAgIGZyYWdtZW50LmNoYXJBdCgwKSA9PT0gJy8nICYmXHJcbiAgICBmcmFnbWVudC5jaGFyQXQoZnJhZ21lbnQubGVuZ3RoIC0gMSkgPT0gJy8nXHJcbiAgKSB7XHJcbiAgICBmcmFnbWVudCA9IGZyYWdtZW50LnNsaWNlKDEsIC0xKVxyXG4gICAgZnJhZ21lbnQgPSBuZXcgUmVnRXhwKCdeJy5jb25jYXQoZnJhZ21lbnQsICckJykpXHJcbiAgfVxyXG4gIHJldHVybiBmcmFnbWVudFxyXG59XHJcbiIsIk1WQy5VdGlscy50b2dnbGVFdmVudHNGb3JUYXJnZXRPYmplY3RzID0gZnVuY3Rpb24gdG9nZ2xlRXZlbnRzRm9yVGFyZ2V0T2JqZWN0cyhcclxuICB0b2dnbGVNZXRob2QsXHJcbiAgZXZlbnRzLFxyXG4gIHRhcmdldE9iamVjdHMsXHJcbiAgY2FsbGJhY2tzXHJcbikge1xyXG4gIGZvcihsZXQgW2V2ZW50U2V0dGluZ3MsIGV2ZW50Q2FsbGJhY2tOYW1lXSBvZiBPYmplY3QuZW50cmllcyhldmVudHMpKSB7XHJcbiAgICBsZXQgZXZlbnREYXRhID0gZXZlbnRTZXR0aW5ncy5zcGxpdCgnICcpXHJcbiAgICBsZXQgZXZlbnRUYXJnZXRTZXR0aW5ncyA9IGV2ZW50RGF0YVswXVxyXG4gICAgbGV0IGV2ZW50TmFtZSA9IGV2ZW50RGF0YVsxXVxyXG4gICAgbGV0IGV2ZW50VGFyZ2V0cyA9IE1WQy5VdGlscy5vYmplY3RRdWVyeShcclxuICAgICAgZXZlbnRUYXJnZXRTZXR0aW5ncyxcclxuICAgICAgdGFyZ2V0T2JqZWN0c1xyXG4gICAgKVxyXG4gICAgZXZlbnRUYXJnZXRzID0gKCFNVkMuVXRpbHMuaXNBcnJheShldmVudFRhcmdldHMpKVxyXG4gICAgICA/IFtbJ0AnLCBldmVudFRhcmdldHNdXVxyXG4gICAgICA6IGV2ZW50VGFyZ2V0c1xyXG4gICAgZm9yKGxldCBbZXZlbnRUYXJnZXROYW1lLCBldmVudFRhcmdldF0gb2YgZXZlbnRUYXJnZXRzKSB7XHJcbiAgICAgIGxldCBldmVudE1ldGhvZE5hbWUgPSAodG9nZ2xlTWV0aG9kID09PSAnb24nKVxyXG4gICAgICA/IChcclxuICAgICAgICBldmVudFRhcmdldCBpbnN0YW5jZW9mIE5vZGVMaXN0IHx8XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fFxyXG4gICAgICAgICAgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBEb2N1bWVudFxyXG4gICAgICAgIClcclxuICAgICAgKSA/ICdhZGRFdmVudExpc3RlbmVyJ1xyXG4gICAgICAgIDogJ29uJ1xyXG4gICAgICA6IChcclxuICAgICAgICBldmVudFRhcmdldCBpbnN0YW5jZW9mIE5vZGVMaXN0IHx8XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fFxyXG4gICAgICAgICAgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBEb2N1bWVudFxyXG4gICAgICAgIClcclxuICAgICAgKSA/ICdyZW1vdmVFdmVudExpc3RlbmVyJ1xyXG4gICAgICAgIDogJ29mZidcclxuICAgICAgbGV0IGV2ZW50Q2FsbGJhY2sgPSBNVkMuVXRpbHMub2JqZWN0UXVlcnkoXHJcbiAgICAgICAgZXZlbnRDYWxsYmFja05hbWUsXHJcbiAgICAgICAgY2FsbGJhY2tzXHJcbiAgICAgIClbMF1bMV1cclxuICAgICAgaWYoZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBOb2RlTGlzdCkge1xyXG4gICAgICAgIGZvcihsZXQgX2V2ZW50VGFyZ2V0IG9mIGV2ZW50VGFyZ2V0KSB7XHJcbiAgICAgICAgICBfZXZlbnRUYXJnZXRbZXZlbnRNZXRob2ROYW1lXShldmVudE5hbWUsIGV2ZW50Q2FsbGJhY2spXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYoZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIGV2ZW50VGFyZ2V0W2V2ZW50TWV0aG9kTmFtZV0oZXZlbnROYW1lLCBldmVudENhbGxiYWNrKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGV2ZW50VGFyZ2V0W2V2ZW50TWV0aG9kTmFtZV0oZXZlbnROYW1lLCBldmVudENhbGxiYWNrKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbk1WQy5VdGlscy5iaW5kRXZlbnRzVG9UYXJnZXRPYmplY3RzID0gZnVuY3Rpb24gYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cygpIHtcclxuICB0aGlzLnRvZ2dsZUV2ZW50c0ZvclRhcmdldE9iamVjdHMoJ29uJywgLi4uYXJndW1lbnRzKVxyXG59XHJcbk1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyA9IGZ1bmN0aW9uIHVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKCkge1xyXG4gIHRoaXMudG9nZ2xlRXZlbnRzRm9yVGFyZ2V0T2JqZWN0cygnb2ZmJywgLi4uYXJndW1lbnRzKVxyXG59XHJcbiIsIk1WQy5VdGlscy52YWxpZGF0ZURhdGFTY2hlbWEgPSBmdW5jdGlvbiB2YWxpZGF0ZURhdGFTY2hlbWEoZGF0YSwgc2NoZW1hKSB7XHJcbiAgaWYoc2NoZW1hKSB7XHJcbiAgICBzd2l0Y2goTVZDLlV0aWxzLnR5cGVPZihkYXRhKSkge1xyXG4gICAgICBjYXNlICdhcnJheSc6XHJcbiAgICAgICAgbGV0IGFycmF5ID0gW11cclxuICAgICAgICBzY2hlbWEgPSAoTVZDLlV0aWxzLnR5cGVPZihzY2hlbWEpID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgICAgPyBzY2hlbWEoKVxyXG4gICAgICAgICAgOiBzY2hlbWFcclxuICAgICAgICBpZihcclxuICAgICAgICAgIE1WQy5VdGlscy5pc0VxdWFsVHlwZShcclxuICAgICAgICAgICAgTVZDLlV0aWxzLnR5cGVPZihzY2hlbWEpLFxyXG4gICAgICAgICAgICBNVkMuVXRpbHMudHlwZU9mKGFycmF5KVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coc2NoZW1hLm5hbWUpXHJcbiAgICAgICAgICBmb3IobGV0IFthcnJheUtleSwgYXJyYXlWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YSkpIHtcclxuICAgICAgICAgICAgYXJyYXkucHVzaChcclxuICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlRGF0YVNjaGVtYShhcnJheVZhbHVlKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnJheVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ29iamVjdCc6XHJcbiAgICAgICAgbGV0IG9iamVjdCA9IHt9XHJcbiAgICAgICAgc2NoZW1hID0gKE1WQy5VdGlscy50eXBlT2Yoc2NoZW1hKSA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgID8gc2NoZW1hKClcclxuICAgICAgICAgIDogc2NoZW1hXHJcbiAgICAgICAgaWYoXHJcbiAgICAgICAgICBNVkMuVXRpbHMuaXNFcXVhbFR5cGUoXHJcbiAgICAgICAgICAgIE1WQy5VdGlscy50eXBlT2Yoc2NoZW1hKSxcclxuICAgICAgICAgICAgTVZDLlV0aWxzLnR5cGVPZihvYmplY3QpXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhzY2hlbWEubmFtZSlcclxuICAgICAgICAgIGZvcihsZXQgW29iamVjdEtleSwgb2JqZWN0VmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XHJcbiAgICAgICAgICAgIG9iamVjdFtvYmplY3RLZXldID0gdGhpcy52YWxpZGF0ZURhdGFTY2hlbWEob2JqZWN0VmFsdWUsIHNjaGVtYVtvYmplY3RLZXldKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqZWN0XHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICAgICAgc2NoZW1hID0gKE1WQy5VdGlscy50eXBlT2Yoc2NoZW1hKSA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgID8gc2NoZW1hKClcclxuICAgICAgICAgIDogc2NoZW1hXHJcbiAgICAgICAgaWYoXHJcbiAgICAgICAgICBNVkMuVXRpbHMuaXNFcXVhbFR5cGUoXHJcbiAgICAgICAgICAgIE1WQy5VdGlscy50eXBlT2Yoc2NoZW1hKSxcclxuICAgICAgICAgICAgTVZDLlV0aWxzLnR5cGVPZihkYXRhKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coc2NoZW1hLm5hbWUpXHJcbiAgICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBNVkMuVE1QTFxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdudWxsJzpcclxuICAgICAgICBpZihcclxuICAgICAgICAgIE1WQy5VdGlscy5pc0VxdWFsVHlwZShcclxuICAgICAgICAgICAgTVZDLlV0aWxzLnR5cGVPZihzY2hlbWEpLFxyXG4gICAgICAgICAgICBNVkMuVXRpbHMudHlwZU9mKGRhdGEpXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICd1bmRlZmluZWQnOlxyXG4gICAgICAgIHRocm93IE1WQy5UTVBMXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxyXG4gICAgICAgIHRocm93IE1WQy5UTVBMXHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgTVZDLlRNUExcclxuICB9XHJcbn1cclxuIiwiTVZDLkNoYW5uZWxzID0gY2xhc3Mge1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuICBnZXQgX2NoYW5uZWxzKCkge1xyXG4gICAgdGhpcy5jaGFubmVscyA9ICh0aGlzLmNoYW5uZWxzKVxyXG4gICAgICA/IHRoaXMuY2hhbm5lbHNcclxuICAgICAgOiB7fVxyXG4gICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNcclxuICB9XHJcbiAgY2hhbm5lbChjaGFubmVsTmFtZSkge1xyXG4gICAgdGhpcy5fY2hhbm5lbHNbY2hhbm5lbE5hbWVdID0gKHRoaXMuX2NoYW5uZWxzW2NoYW5uZWxOYW1lXSlcclxuICAgICAgPyB0aGlzLl9jaGFubmVsc1tjaGFubmVsTmFtZV1cclxuICAgICAgOiBuZXcgTVZDLkNoYW5uZWxzLkNoYW5uZWwoKVxyXG4gICAgcmV0dXJuIHRoaXMuX2NoYW5uZWxzW2NoYW5uZWxOYW1lXVxyXG4gIH1cclxuICBvZmYoY2hhbm5lbE5hbWUpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jaGFubmVsc1tjaGFubmVsTmFtZV1cclxuICB9XHJcbn1cclxuIiwiTVZDLkNoYW5uZWxzLkNoYW5uZWwgPSBjbGFzcyB7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG4gIGdldCBfcmVzcG9uc2VzKCkge1xyXG4gICAgdGhpcy5yZXNwb25zZXMgPSAodGhpcy5yZXNwb25zZXMpXHJcbiAgICAgID8gdGhpcy5yZXNwb25zZXNcclxuICAgICAgOiB7fVxyXG4gICAgcmV0dXJuIHRoaXMucmVzcG9uc2VzXHJcbiAgfVxyXG4gIHJlc3BvbnNlKHJlc3BvbnNlTmFtZSwgcmVzcG9uc2VDYWxsYmFjaykge1xyXG4gICAgaWYocmVzcG9uc2VDYWxsYmFjaykge1xyXG4gICAgICB0aGlzLl9yZXNwb25zZXNbcmVzcG9uc2VOYW1lXSA9IHJlc3BvbnNlQ2FsbGJhY2tcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yZXNwb25zZXNbcmVzcG9uc2VdXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJlcXVlc3QocmVzcG9uc2VOYW1lLCByZXF1ZXN0RGF0YSkge1xyXG4gICAgaWYodGhpcy5fcmVzcG9uc2VzW3Jlc3BvbnNlTmFtZV0pIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlc1tyZXNwb25zZU5hbWVdKHJlcXVlc3REYXRhKVxyXG4gICAgfVxyXG4gIH1cclxuICBvZmYocmVzcG9uc2VOYW1lKSB7XHJcbiAgICBpZihyZXNwb25zZU5hbWUpIHtcclxuICAgICAgZGVsZXRlIHRoaXMuX3Jlc3BvbnNlc1tyZXNwb25zZU5hbWVdXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmb3IobGV0IFtyZXNwb25zZU5hbWVdIG9mIE9iamVjdC5rZXlzKHRoaXMuX3Jlc3BvbnNlcykpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5fcmVzcG9uc2VzW3Jlc3BvbnNlTmFtZV1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJNVkMuQmFzZSA9IGNsYXNzIGV4dGVuZHMgTVZDLkV2ZW50cyB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGNvbmZpZ3VyYXRpb24pIHtcclxuICAgIHN1cGVyKClcclxuICAgIGlmKGNvbmZpZ3VyYXRpb24pIHRoaXMuX2NvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uXHJcbiAgICBpZihzZXR0aW5ncykgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5nc1xyXG4gIH1cclxuICBnZXQgX2NvbmZpZ3VyYXRpb24oKSB7XHJcbiAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSAodGhpcy5jb25maWd1cmF0aW9uKVxyXG4gICAgICA/IHRoaXMuY29uZmlndXJhdGlvblxyXG4gICAgICA6IHt9XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uXHJcbiAgfVxyXG4gIHNldCBfY29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKSB7IHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb24gfVxyXG4gIGdldCBfc2V0dGluZ3MoKSB7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gKHRoaXMuc2V0dGluZ3MpXHJcbiAgICAgID8gdGhpcy5zZXR0aW5nc1xyXG4gICAgICA6IHt9XHJcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1xyXG4gIH1cclxuICBzZXQgX3NldHRpbmdzKHNldHRpbmdzKSB7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcclxuICAgICAgc2V0dGluZ3MsIHRoaXMuX3NldHRpbmdzXHJcbiAgICApXHJcbiAgfVxyXG4gIGdldCBfZW1pdHRlcnMoKSB7XHJcbiAgICB0aGlzLmVtaXR0ZXJzID0gKHRoaXMuZW1pdHRlcnMpXHJcbiAgICAgID8gdGhpcy5lbWl0dGVyc1xyXG4gICAgICA6IHt9XHJcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyc1xyXG4gIH1cclxuICBzZXQgX2VtaXR0ZXJzKGVtaXR0ZXJzKSB7XHJcbiAgICB0aGlzLmVtaXR0ZXJzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcclxuICAgICAgZW1pdHRlcnMsIHRoaXMuX2VtaXR0ZXJzXHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsIk1WQy5TZXJ2aWNlID0gY2xhc3MgZXh0ZW5kcyBNVkMuQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgfVxuICBnZXQgX2RlZmF1bHRzKCkgeyByZXR1cm4gdGhpcy5kZWZhdWx0cyB8fCB7XG4gICAgY29udGVudFR5cGU6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSxcbiAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgfSB9XG4gIGdldCBfcmVzcG9uc2VUeXBlcygpIHsgcmV0dXJuIFsnJywgJ2FycmF5YnVmZmVyJywgJ2Jsb2InLCAnZG9jdW1lbnQnLCAnanNvbicsICd0ZXh0J10gfVxuICBnZXQgX3Jlc3BvbnNlVHlwZSgpIHsgcmV0dXJuIHRoaXMucmVzcG9uc2VUeXBlIH1cbiAgc2V0IF9yZXNwb25zZVR5cGUocmVzcG9uc2VUeXBlKSB7XG4gICAgdGhpcy5feGhyLnJlc3BvbnNlVHlwZSA9IHRoaXMuX3Jlc3BvbnNlVHlwZXMuZmluZChcbiAgICAgIChyZXNwb25zZVR5cGVJdGVtKSA9PiByZXNwb25zZVR5cGVJdGVtID09PSByZXNwb25zZVR5cGVcbiAgICApIHx8IHRoaXMuX2RlZmF1bHRzLnJlc3BvbnNlVHlwZVxuICB9XG4gIGdldCBfdHlwZSgpIHsgcmV0dXJuIHRoaXMudHlwZSB9XG4gIHNldCBfdHlwZSh0eXBlKSB7IHRoaXMudHlwZSA9IHR5cGUgfVxuICBnZXQgX3VybCgpIHsgcmV0dXJuIHRoaXMudXJsIH1cbiAgc2V0IF91cmwodXJsKSB7IHRoaXMudXJsID0gdXJsIH1cbiAgZ2V0IF9oZWFkZXJzKCkgeyByZXR1cm4gdGhpcy5oZWFkZXJzIHx8IFtdIH1cbiAgc2V0IF9oZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLl9oZWFkZXJzLmxlbmd0aCA9IDBcbiAgICBmb3IobGV0IGhlYWRlciBvZiBoZWFkZXJzKSB7XG4gICAgICB0aGlzLl94aHIuc2V0UmVxdWVzdEhlYWRlcih7aGVhZGVyfVswXSwge2hlYWRlcn1bMV0pXG4gICAgICB0aGlzLl9oZWFkZXJzLnB1c2goaGVhZGVyKVxuICAgIH1cbiAgfVxuICBnZXQgX2RhdGEoKSB7IHJldHVybiB0aGlzLmRhdGEgfVxuICBzZXQgX2RhdGEoZGF0YSkgeyB0aGlzLmRhdGEgPSBkYXRhIH1cbiAgZ2V0IF94aHIoKSB7XG4gICAgdGhpcy54aHIgPSAodGhpcy54aHIpXG4gICAgICA/IHRoaXMueGhyXG4gICAgICA6IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG4gICAgcmV0dXJuIHRoaXMueGhyXG4gIH1cbiAgZ2V0IF9lbmFibGVkKCkgeyByZXR1cm4gdGhpcy5lbmFibGVkIHx8IGZhbHNlIH1cbiAgc2V0IF9lbmFibGVkKGVuYWJsZWQpIHsgdGhpcy5lbmFibGVkID0gZW5hYmxlZCB9XG4gIHJlcXVlc3QoZGF0YSkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHRoaXMuZGF0YSB8fCBudWxsXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmKHRoaXMuX3hoci5zdGF0dXMgPT09IDIwMCkgdGhpcy5feGhyLmFib3J0KClcbiAgICAgIHRoaXMuX3hoci5vcGVuKHRoaXMudHlwZSwgdGhpcy51cmwpXG4gICAgICB0aGlzLl9oZWFkZXJzID0gdGhpcy5zZXR0aW5ncy5oZWFkZXJzIHx8IFt0aGlzLl9kZWZhdWx0cy5jb250ZW50VHlwZV1cbiAgICAgIHRoaXMuX3hoci5vbmxvYWQgPSByZXNvbHZlXG4gICAgICB0aGlzLl94aHIub25lcnJvciA9IHJlamVjdFxuICAgICAgdGhpcy5feGhyLnNlbmQoZGF0YSlcbiAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgdGhpcy5lbWl0KCd4aHI6cmVzb2x2ZScsIHtcbiAgICAgICAgbmFtZTogJ3hocjpyZXNvbHZlJyxcbiAgICAgICAgZGF0YTogcmVzcG9uc2UuY3VycmVudFRhcmdldCxcbiAgICAgIH0pXG4gICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICB9KVxuICB9XG4gIGVuYWJsZSgpIHtcbiAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICAhdGhpcy5lbmFibGVkICYmXG4gICAgICBPYmplY3Qua2V5cyhzZXR0aW5ncykubGVuZ3RoXG4gICAgKSB7XG4gICAgICBpZihzZXR0aW5ncy50eXBlKSB0aGlzLl90eXBlID0gc2V0dGluZ3MudHlwZVxuICAgICAgaWYoc2V0dGluZ3MudXJsKSB0aGlzLl91cmwgPSBzZXR0aW5ncy51cmxcbiAgICAgIGlmKHNldHRpbmdzLmRhdGEpIHRoaXMuX2RhdGEgPSBzZXR0aW5ncy5kYXRhIHx8IG51bGxcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3MucmVzcG9uc2VUeXBlKSB0aGlzLl9yZXNwb25zZVR5cGUgPSB0aGlzLl9zZXR0aW5ncy5yZXNwb25zZVR5cGVcbiAgICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlXG4gICAgfVxuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgdGhpcy5lbmFibGVkICYmXG4gICAgICBPYmplY3Qua2V5cyhzZXR0aW5ncykubGVuZ3RoXG4gICAgKSB7XG4gICAgICBkZWxldGUgdGhpcy5fdHlwZVxuICAgICAgZGVsZXRlIHRoaXMuX3VybFxuICAgICAgZGVsZXRlIHRoaXMuX2RhdGFcbiAgICAgIGRlbGV0ZSB0aGlzLl9oZWFkZXJzXG4gICAgICBkZWxldGUgdGhpcy5fcmVzcG9uc2VUeXBlXG4gICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2VcbiAgICB9XG4gIH1cbn1cbiIsIk1WQy5Nb2RlbCA9IGNsYXNzIGV4dGVuZHMgTVZDLkJhc2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gIH1cbiAgZ2V0IF9sb2NhbFN0b3JhZ2UoKSB7IHJldHVybiB0aGlzLmxvY2FsU3RvcmFnZSB9XG4gIHNldCBfbG9jYWxTdG9yYWdlKGxvY2FsU3RvcmFnZSkgeyB0aGlzLmxvY2FsU3RvcmFnZSA9IGxvY2FsU3RvcmFnZSB9XG4gIGdldCBfZGVmYXVsdHMoKSB7IHJldHVybiB0aGlzLmRlZmF1bHRzIH1cbiAgc2V0IF9kZWZhdWx0cyhkZWZhdWx0cykgeyB0aGlzLmRlZmF1bHRzID0gZGVmYXVsdHMgfVxuICBnZXQgX3NjaGVtYSgpIHsgcmV0dXJuIHRoaXMuX3NjaGVtYSB9XG4gIHNldCBfc2NoZW1hKHNjaGVtYSkgeyB0aGlzLnNjaGVtYSA9IHNjaGVtYSB9XG4gIGdldCBfaGlzdGlvZ3JhbSgpIHsgcmV0dXJuIHRoaXMuaGlzdGlvZ3JhbSB8fCB7XG4gICAgbGVuZ3RoOiAxXG4gIH0gfVxuICBzZXQgX2hpc3Rpb2dyYW0oaGlzdGlvZ3JhbSkge1xuICAgIHRoaXMuaGlzdGlvZ3JhbSA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB0aGlzLl9oaXN0aW9ncmFtLFxuICAgICAgaGlzdGlvZ3JhbVxuICAgIClcbiAgfVxuICBnZXQgX2hpc3RvcnkoKSB7XG4gICAgdGhpcy5oaXN0b3J5ID0gKHRoaXMuaGlzdG9yeSlcbiAgICAgID8gdGhpcy5oaXN0b3J5XG4gICAgICA6IFtdXG4gICAgcmV0dXJuIHRoaXMuaGlzdG9yeVxuICB9XG4gIHNldCBfaGlzdG9yeShkYXRhKSB7XG4gICAgaWYoXG4gICAgICBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGhcbiAgICApIHtcbiAgICAgIGlmKHRoaXMuX2hpc3Rpb2dyYW0ubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2hpc3RvcnkudW5zaGlmdCh0aGlzLnBhcnNlKGRhdGEpKVxuICAgICAgICB0aGlzLl9oaXN0b3J5LnNwbGljZSh0aGlzLl9oaXN0aW9ncmFtLmxlbmd0aClcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2V0IF9kYigpIHtcbiAgICBsZXQgZGIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmxvY2FsU3RvcmFnZS5lbmRwb2ludClcbiAgICB0aGlzLmRiID0gKGRiKVxuICAgICAgPyBkYlxuICAgICAgOiAne30nXG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5kYilcbiAgfVxuICBzZXQgX2RiKGRiKSB7XG4gICAgZGIgPSBKU09OLnN0cmluZ2lmeShkYilcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmxvY2FsU3RvcmFnZS5lbmRwb2ludCwgZGIpXG4gIH1cbiAgZ2V0IF9kYXRhKCkge1xuICAgIHRoaXMuZGF0YSA9ICAodGhpcy5kYXRhKVxuICAgICAgPyB0aGlzLmRhdGFcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5kYXRhXG4gIH1cbiAgZ2V0IF9kYXRhRXZlbnRzKCkge1xuICAgIHRoaXMuZGF0YUV2ZW50cyA9ICh0aGlzLmRhdGFFdmVudHMpXG4gICAgICA/IHRoaXMuZGF0YUV2ZW50c1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLmRhdGFFdmVudHNcbiAgfVxuICBzZXQgX2RhdGFFdmVudHMoZGF0YUV2ZW50cykge1xuICAgIHRoaXMuZGF0YUV2ZW50cyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBkYXRhRXZlbnRzLCB0aGlzLl9kYXRhRXZlbnRzXG4gICAgKVxuICB9XG4gIGdldCBfZGF0YUNhbGxiYWNrcygpIHtcbiAgICB0aGlzLmRhdGFDYWxsYmFja3MgPSAodGhpcy5kYXRhQ2FsbGJhY2tzKVxuICAgICAgPyB0aGlzLmRhdGFDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5kYXRhQ2FsbGJhY2tzXG4gIH1cbiAgc2V0IF9kYXRhQ2FsbGJhY2tzKGRhdGFDYWxsYmFja3MpIHtcbiAgICB0aGlzLmRhdGFDYWxsYmFja3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgZGF0YUNhbGxiYWNrcywgdGhpcy5fZGF0YUNhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgX3NlcnZpY2VzKCkge1xuICAgIHRoaXMuc2VydmljZXMgPSAgKHRoaXMuc2VydmljZXMpXG4gICAgICA/IHRoaXMuc2VydmljZXNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlc1xuICB9XG4gIHNldCBfc2VydmljZXMoc2VydmljZXMpIHtcbiAgICB0aGlzLnNlcnZpY2VzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHNlcnZpY2VzLCB0aGlzLl9zZXJ2aWNlc1xuICAgIClcbiAgfVxuICBnZXQgX3NlcnZpY2VFdmVudHMoKSB7XG4gICAgdGhpcy5zZXJ2aWNlRXZlbnRzID0gKHRoaXMuc2VydmljZUV2ZW50cylcbiAgICAgID8gdGhpcy5zZXJ2aWNlRXZlbnRzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuc2VydmljZUV2ZW50c1xuICB9XG4gIHNldCBfc2VydmljZUV2ZW50cyhzZXJ2aWNlRXZlbnRzKSB7XG4gICAgdGhpcy5zZXJ2aWNlRXZlbnRzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHNlcnZpY2VFdmVudHMsIHRoaXMuX3NlcnZpY2VFdmVudHNcbiAgICApXG4gIH1cbiAgZ2V0IF9zZXJ2aWNlQ2FsbGJhY2tzKCkge1xuICAgIHRoaXMuc2VydmljZUNhbGxiYWNrcyA9ICh0aGlzLnNlcnZpY2VDYWxsYmFja3MpXG4gICAgICA/IHRoaXMuc2VydmljZUNhbGxiYWNrc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLnNlcnZpY2VDYWxsYmFja3NcbiAgfVxuICBzZXQgX3NlcnZpY2VDYWxsYmFja3Moc2VydmljZUNhbGxiYWNrcykge1xuICAgIHRoaXMuc2VydmljZUNhbGxiYWNrcyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBzZXJ2aWNlQ2FsbGJhY2tzLCB0aGlzLl9zZXJ2aWNlQ2FsbGJhY2tzXG4gICAgKVxuICB9XG4gIGdldCBfZW5hYmxlZCgpIHsgcmV0dXJuIHRoaXMuZW5hYmxlZCB8fCBmYWxzZSB9XG4gIHNldCBfZW5hYmxlZChlbmFibGVkKSB7IHRoaXMuZW5hYmxlZCA9IGVuYWJsZWQgfVxuICBlbmFibGVTZXJ2aWNlRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy5iaW5kRXZlbnRzVG9UYXJnZXRPYmplY3RzKHRoaXMuc2VydmljZUV2ZW50cywgdGhpcy5zZXJ2aWNlcywgdGhpcy5zZXJ2aWNlQ2FsbGJhY2tzKVxuICB9XG4gIGRpc2FibGVTZXJ2aWNlRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyh0aGlzLnNlcnZpY2VFdmVudHMsIHRoaXMuc2VydmljZXMsIHRoaXMuc2VydmljZUNhbGxiYWNrcylcbiAgfVxuICBlbmFibGVEYXRhRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy5iaW5kRXZlbnRzVG9UYXJnZXRPYmplY3RzKHRoaXMuZGF0YUV2ZW50cywgdGhpcywgdGhpcy5kYXRhQ2FsbGJhY2tzKVxuICB9XG4gIGRpc2FibGVEYXRhRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyh0aGlzLmRhdGFFdmVudHMsIHRoaXMsIHRoaXMuZGF0YUNhbGxiYWNrcylcbiAgfVxuICBzZXREZWZhdWx0cygpIHtcbiAgICBsZXQgX2RlZmF1bHRzID0ge31cbiAgICBpZih0aGlzLmRlZmF1bHRzKSBPYmplY3QuYXNzaWduKF9kZWZhdWx0cywgdGhpcy5kZWZhdWx0cylcbiAgICBpZih0aGlzLmxvY2FsU3RvcmFnZSkgT2JqZWN0LmFzc2lnbihfZGVmYXVsdHMsIHRoaXMuX2RiKVxuICAgIGlmKE9iamVjdC5rZXlzKF9kZWZhdWx0cykpIHRoaXMuc2V0KF9kZWZhdWx0cylcbiAgfVxuICBnZXQoKSB7XG4gICAgbGV0IHByb3BlcnR5ID0gYXJndW1lbnRzWzBdXG4gICAgcmV0dXJuIHRoaXMuX2RhdGFbJ18nLmNvbmNhdChwcm9wZXJ0eSldXG4gIH1cbiAgc2V0KCkge1xuICAgIHRoaXMuX2hpc3RvcnkgPSB0aGlzLnBhcnNlKClcbiAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBPYmplY3QuZW50cmllcyhhcmd1bWVudHNbMF0pXG4gICAgICAgICAgLmZvckVhY2goKFtrZXksIHZhbHVlXSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YVByb3BlcnR5KGtleSwgdmFsdWUpXG4gICAgICAgICAgICBpZih0aGlzLmxvY2FsU3RvcmFnZSkgdGhpcy5zZXREQihrZXksIHZhbHVlKVxuICAgICAgICAgIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHZhciBrZXkgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzFdXG4gICAgICAgIHRoaXMuc2V0RGF0YVByb3BlcnR5KGtleSwgdmFsdWUpXG4gICAgICAgIGlmKHRoaXMubG9jYWxTdG9yYWdlKSB0aGlzLnNldERCKGtleSwgdmFsdWUpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHVuc2V0KCkge1xuICAgIHRoaXMuX2hpc3RvcnkgPSB0aGlzLnBhcnNlKClcbiAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBmb3IobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLl9kYXRhKSkge1xuICAgICAgICAgIHRoaXMudW5zZXREYXRhUHJvcGVydHkoa2V5KVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGxldCBrZXkgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgdGhpcy51bnNldERhdGFQcm9wZXJ0eShrZXkpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHNldERCKCkge1xuICAgIGxldCBkYiA9IHRoaXMuX2RiXG4gICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdmFyIF9hcmd1bWVudHMgPSBPYmplY3QuZW50cmllcyhhcmd1bWVudHNbMF0pXG4gICAgICAgIF9hcmd1bWVudHMuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgZGJba2V5XSA9IHZhbHVlXG4gICAgICAgIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDI6XG4gICAgICAgIGxldCBrZXkgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgbGV0IHZhbHVlID0gYXJndW1lbnRzWzFdXG4gICAgICAgIGRiW2tleV0gPSB2YWx1ZVxuICAgICAgICBicmVha1xuICAgIH1cbiAgICB0aGlzLl9kYiA9IGRiXG4gIH1cbiAgdW5zZXREQigpIHtcbiAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBkZWxldGUgdGhpcy5fZGJcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbGV0IGRiID0gdGhpcy5fZGJcbiAgICAgICAgbGV0IGtleSA9IGFyZ3VtZW50c1swXVxuICAgICAgICBkZWxldGUgZGJba2V5XVxuICAgICAgICB0aGlzLl9kYiA9IGRiXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHNldERhdGFQcm9wZXJ0eShrZXksIHZhbHVlKSB7XG4gICAgaWYoIXRoaXMuX2RhdGFbJ18nLmNvbmNhdChrZXkpXSkge1xuICAgICAgbGV0IGNvbnRleHQgPSB0aGlzXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhcbiAgICAgICAgdGhpcy5fZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIFsnXycuY29uY2F0KGtleSldOiB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQoKSB7IHJldHVybiB0aGlzW2tleV0gfSxcbiAgICAgICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZVxuICAgICAgICAgICAgICBsZXQgc2V0VmFsdWVFdmVudE5hbWUgPSBbJ3NldCcsICc6Jywga2V5XS5qb2luKCcnKVxuICAgICAgICAgICAgICBsZXQgc2V0RXZlbnROYW1lID0gJ3NldCdcbiAgICAgICAgICAgICAgY29udGV4dC5lbWl0KFxuICAgICAgICAgICAgICAgIHNldFZhbHVlRXZlbnROYW1lLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IHNldFZhbHVlRXZlbnROYW1lLFxuICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBjb250ZXh0LmVtaXQoXG4gICAgICAgICAgICAgICAgc2V0RXZlbnROYW1lLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IHNldEV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG4gICAgdGhpcy5fZGF0YVsnXycuY29uY2F0KGtleSldID0gdmFsdWVcbiAgfVxuICB1bnNldERhdGFQcm9wZXJ0eShrZXkpIHtcbiAgICBsZXQgdW5zZXRWYWx1ZUV2ZW50TmFtZSA9IFsndW5zZXQnLCAnOicsIGtleV0uam9pbignJylcbiAgICBsZXQgdW5zZXRFdmVudE5hbWUgPSAndW5zZXQnXG4gICAgbGV0IHVuc2V0VmFsdWUgPSB0aGlzLl9kYXRhW2tleV1cbiAgICBkZWxldGUgdGhpcy5fZGF0YVsnXycuY29uY2F0KGtleSldXG4gICAgZGVsZXRlIHRoaXMuX2RhdGFba2V5XVxuICAgIHRoaXMuZW1pdChcbiAgICAgIHVuc2V0VmFsdWVFdmVudE5hbWUsXG4gICAgICB7XG4gICAgICAgIG5hbWU6IHVuc2V0VmFsdWVFdmVudE5hbWUsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICB2YWx1ZTogdW5zZXRWYWx1ZSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgICB0aGlzLmVtaXQoXG4gICAgICB1bnNldEV2ZW50TmFtZSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogdW5zZXRFdmVudE5hbWUsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICB2YWx1ZTogdW5zZXRWYWx1ZSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgfVxuICBwYXJzZShkYXRhKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwgdGhpcy5fZGF0YVxuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KE9iamVjdC5hc3NpZ24oe30sIGRhdGEpKSlcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgc2V0dGluZ3MgJiZcbiAgICAgICF0aGlzLmVuYWJsZWRcbiAgICApIHtcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3MubG9jYWxTdG9yYWdlKSB0aGlzLl9sb2NhbFN0b3JhZ2UgPSB0aGlzLnNldHRpbmdzLmxvY2FsU3RvcmFnZVxuICAgICAgaWYodGhpcy5zZXR0aW5ncy5oaXN0aW9ncmFtKSB0aGlzLl9oaXN0aW9ncmFtID0gdGhpcy5zZXR0aW5ncy5oaXN0aW9ncmFtXG4gICAgICBpZih0aGlzLnNldHRpbmdzLmVtaXR0ZXJzKSB0aGlzLl9lbWl0dGVycyA9IHRoaXMuc2V0dGluZ3MuZW1pdHRlcnNcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3Muc2VydmljZXMpIHRoaXMuX3NlcnZpY2VzID0gdGhpcy5zZXR0aW5ncy5zZXJ2aWNlc1xuICAgICAgaWYodGhpcy5zZXR0aW5ncy5zZXJ2aWNlQ2FsbGJhY2tzKSB0aGlzLl9zZXJ2aWNlQ2FsbGJhY2tzID0gdGhpcy5zZXR0aW5ncy5zZXJ2aWNlQ2FsbGJhY2tzXG4gICAgICBpZih0aGlzLnNldHRpbmdzLnNlcnZpY2VFdmVudHMpIHRoaXMuX3NlcnZpY2VFdmVudHMgPSB0aGlzLnNldHRpbmdzLnNlcnZpY2VFdmVudHNcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3MuZGF0YSkgdGhpcy5zZXQodGhpcy5zZXR0aW5ncy5kYXRhKVxuICAgICAgaWYodGhpcy5zZXR0aW5ncy5kYXRhQ2FsbGJhY2tzKSB0aGlzLl9kYXRhQ2FsbGJhY2tzID0gdGhpcy5zZXR0aW5ncy5kYXRhQ2FsbGJhY2tzXG4gICAgICBpZih0aGlzLnNldHRpbmdzLmRhdGFFdmVudHMpIHRoaXMuX2RhdGFFdmVudHMgPSB0aGlzLnNldHRpbmdzLmRhdGFFdmVudHNcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3Muc2NoZW1hKSB0aGlzLl9zY2hlbWEgPSB0aGlzLnNldHRpbmdzLnNjaGVtYVxuICAgICAgaWYodGhpcy5zZXR0aW5ncy5kZWZhdWx0cykgdGhpcy5fZGVmYXVsdHMgPSB0aGlzLnNldHRpbmdzLmRlZmF1bHRzXG4gICAgICBpZihcbiAgICAgICAgdGhpcy5zZXJ2aWNlcyAmJlxuICAgICAgICB0aGlzLnNlcnZpY2VFdmVudHMgJiZcbiAgICAgICAgdGhpcy5zZXJ2aWNlQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5lbmFibGVTZXJ2aWNlRXZlbnRzKClcbiAgICAgIH1cbiAgICAgIGlmKFxuICAgICAgICB0aGlzLmRhdGFFdmVudHMgJiZcbiAgICAgICAgdGhpcy5kYXRhQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5lbmFibGVEYXRhRXZlbnRzKClcbiAgICAgIH1cbiAgICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlXG4gICAgfVxuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgc2V0dGluZ3MgJiZcbiAgICAgICF0aGlzLmVuYWJsZWRcbiAgICApIHtcbiAgICAgIGlmKFxuICAgICAgICB0aGlzLnNlcnZpY2VzICYmXG4gICAgICAgIHRoaXMuc2VydmljZUV2ZW50cyAmJlxuICAgICAgICB0aGlzLnNlcnZpY2VDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmRpc2FibGVTZXJ2aWNlRXZlbnRzKClcbiAgICAgIH1cbiAgICAgIGlmKFxuICAgICAgICB0aGlzLmRhdGFFdmVudHMgJiZcbiAgICAgICAgdGhpcy5kYXRhQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlRGF0YUV2ZW50cygpXG4gICAgICB9XG4gICAgICBkZWxldGUgdGhpcy5fbG9jYWxTdG9yYWdlXG4gICAgICBkZWxldGUgdGhpcy5faGlzdGlvZ3JhbVxuICAgICAgZGVsZXRlIHRoaXMuX3NlcnZpY2VzXG4gICAgICBkZWxldGUgdGhpcy5fc2VydmljZUNhbGxiYWNrc1xuICAgICAgZGVsZXRlIHRoaXMuX3NlcnZpY2VFdmVudHNcbiAgICAgIGRlbGV0ZSB0aGlzLl9kYXRhXG4gICAgICBkZWxldGUgdGhpcy5fZGF0YUNhbGxiYWNrc1xuICAgICAgZGVsZXRlIHRoaXMuX2RhdGFFdmVudHNcbiAgICAgIGRlbGV0ZSB0aGlzLl9zY2hlbWFcbiAgICAgIGRlbGV0ZSB0aGlzLl9lbWl0dGVyc1xuICAgIH1cbiAgfVxufVxuIiwiTVZDLkVtaXR0ZXIgPSBjbGFzcyBleHRlbmRzIE1WQy5Nb2RlbCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXHJcbiAgICBpZih0aGlzLnNldHRpbmdzKSB7XHJcbiAgICAgIGlmKHRoaXMuc2V0dGluZ3MubmFtZSkgdGhpcy5fbmFtZSA9IHRoaXMuc2V0dGluZ3MubmFtZVxyXG4gICAgfVxyXG4gIH1cclxuICBnZXQgX25hbWUoKSB7IHJldHVybiB0aGlzLm5hbWUgfVxyXG4gIHNldCBfbmFtZShuYW1lKSB7IHRoaXMubmFtZSA9IG5hbWUgfVxyXG4gIGVtaXNzaW9uKCkge1xyXG4gICAgbGV0IGV2ZW50RGF0YSA9IHtcclxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICBkYXRhOiB0aGlzLmRhdGFcclxuICAgIH1cclxuICAgIHRoaXMuZW1pdChcclxuICAgICAgdGhpcy5uYW1lLFxyXG4gICAgICBldmVudERhdGFcclxuICAgIClcclxuICAgIHJldHVybiBldmVudERhdGFcclxuICB9XHJcbn1cclxuIiwiTVZDLkVtaXR0ZXJzID0ge31cclxuIiwiTVZDLkVtaXR0ZXJzLk5hdmlnYXRlRW1pdHRlciA9IGNsYXNzIGV4dGVuZHMgTVZDLkVtaXR0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxyXG4gICAgdGhpcy5hZGRTZXR0aW5ncygpXHJcbiAgICB0aGlzLmVuYWJsZSgpXHJcbiAgfVxyXG4gIGFkZFNldHRpbmdzKCkge1xyXG4gICAgdGhpcy5fbmFtZSA9ICduYXZpZ2F0ZSdcclxuICAgIHRoaXMuX3NjaGVtYSA9IHtcclxuICAgICAgb2xkVVJMOiBTdHJpbmcsXHJcbiAgICAgIG5ld1VSTDogU3RyaW5nLFxyXG4gICAgICBjdXJyZW50Um91dGU6IFN0cmluZyxcclxuICAgICAgY3VycmVudENvbnRyb2xsZXI6IFN0cmluZyxcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiTVZDLlZpZXcgPSBjbGFzcyBleHRlbmRzIE1WQy5CYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICB9XG4gIGdldCBfZWxlbWVudE5hbWUoKSB7IHJldHVybiB0aGlzLl9lbGVtZW50LnRhZ05hbWUgfVxuICBzZXQgX2VsZW1lbnROYW1lKGVsZW1lbnROYW1lKSB7XG4gICAgaWYoIXRoaXMuX2VsZW1lbnQpIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnROYW1lKVxuICB9XG4gIGdldCBfZWxlbWVudCgpIHsgcmV0dXJuIHRoaXMuZWxlbWVudCB9XG4gIHNldCBfZWxlbWVudChlbGVtZW50KSB7XG4gICAgaWYoXG4gICAgICBlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHxcbiAgICAgIGVsZW1lbnQgaW5zdGFuY2VvZiBEb2N1bWVudFxuICAgICkge1xuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICAgIH0gZWxzZSBpZih0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudClcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgfSlcbiAgfVxuICBnZXQgX2F0dHJpYnV0ZXMoKSB7IHJldHVybiB0aGlzLl9lbGVtZW50LmF0dHJpYnV0ZXMgfVxuICBzZXQgX2F0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICAgIGZvcihsZXQgW2F0dHJpYnV0ZUtleSwgYXR0cmlidXRlVmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpKSB7XG4gICAgICBpZih0eXBlb2YgYXR0cmlidXRlVmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZUtleSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZUtleSwgYXR0cmlidXRlVmFsdWUpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldCBfdWkoKSB7XG4gICAgdGhpcy51aSA9ICh0aGlzLnVpKVxuICAgICAgPyB0aGlzLnVpXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMudWlcbiAgfVxuICBzZXQgX3VpKHVpKSB7XG4gICAgaWYoIXRoaXMuX3VpWyckZWxlbWVudCddKSB0aGlzLl91aVsnJGVsZW1lbnQnXSA9IHRoaXMuZWxlbWVudFxuICAgIGZvcihsZXQgW3VpS2V5LCB1aVZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh1aSkpIHtcbiAgICAgIGlmKHR5cGVvZiB1aVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl91aVt1aUtleV0gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodWlWYWx1ZSlcbiAgICAgIH0gZWxzZSBpZihcbiAgICAgICAgdWlWYWx1ZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8XG4gICAgICAgIHVpVmFsdWUgaW5zdGFuY2VvZiBEb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX3VpW3VpS2V5XSA9IHVpVmFsdWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2V0IF91aUV2ZW50cygpIHsgcmV0dXJuIHRoaXMudWlFdmVudHMgfVxuICBzZXQgX3VpRXZlbnRzKHVpRXZlbnRzKSB7IHRoaXMudWlFdmVudHMgPSB1aUV2ZW50cyB9XG4gIGdldCBfdWlDYWxsYmFja3MoKSB7XG4gICAgdGhpcy51aUNhbGxiYWNrcyA9ICh0aGlzLnVpQ2FsbGJhY2tzKVxuICAgICAgPyB0aGlzLnVpQ2FsbGJhY2tzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMudWlDYWxsYmFja3NcbiAgfVxuICBzZXQgX3VpQ2FsbGJhY2tzKHVpQ2FsbGJhY2tzKSB7XG4gICAgdGhpcy51aUNhbGxiYWNrcyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICB1aUNhbGxiYWNrcywgdGhpcy5fdWlDYWxsYmFja3NcbiAgICApXG4gIH1cbiAgZ2V0IF9vYnNlcnZlckNhbGxiYWNrcygpIHtcbiAgICB0aGlzLm9ic2VydmVyQ2FsbGJhY2tzID0gKHRoaXMub2JzZXJ2ZXJDYWxsYmFja3MpXG4gICAgICA/IHRoaXMub2JzZXJ2ZXJDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5vYnNlcnZlckNhbGxiYWNrc1xuICB9XG4gIHNldCBfb2JzZXJ2ZXJDYWxsYmFja3Mob2JzZXJ2ZXJDYWxsYmFja3MpIHtcbiAgICB0aGlzLm9ic2VydmVyQ2FsbGJhY2tzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIG9ic2VydmVyQ2FsbGJhY2tzLCB0aGlzLl9vYnNlcnZlckNhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgZWxlbWVudE9ic2VydmVyKCkge1xuICAgIHRoaXMuX2VsZW1lbnRPYnNlcnZlciA9ICh0aGlzLl9lbGVtZW50T2JzZXJ2ZXIpXG4gICAgICA/IHRoaXMuX2VsZW1lbnRPYnNlcnZlclxuICAgICAgOiBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmVsZW1lbnRPYnNlcnZlLmJpbmQodGhpcykpXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRPYnNlcnZlclxuICB9XG4gIGdldCBfaW5zZXJ0KCkgeyByZXR1cm4gdGhpcy5pbnNlcnQgfVxuICBzZXQgX2luc2VydChpbnNlcnQpIHsgdGhpcy5pbnNlcnQgPSBpbnNlcnQgfVxuICBnZXQgX2VuYWJsZWQoKSB7IHJldHVybiB0aGlzLmVuYWJsZWQgfHwgZmFsc2UgfVxuICBzZXQgX2VuYWJsZWQoZW5hYmxlZCkgeyB0aGlzLmVuYWJsZWQgPSBlbmFibGVkIH1cbiAgZ2V0IF90ZW1wbGF0ZXMoKSB7XG4gICAgdGhpcy50ZW1wbGF0ZXMgPSAodGhpcy50ZW1wbGF0ZXMpXG4gICAgICA/IHRoaXMudGVtcGxhdGVzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzXG4gIH1cbiAgc2V0IF90ZW1wbGF0ZXModGVtcGxhdGVzKSB7XG4gICAgdGhpcy50ZW1wbGF0ZXMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgdGVtcGxhdGVzLCB0aGlzLl90ZW1wbGF0ZXNcbiAgICApXG4gIH1cbiAgZWxlbWVudE9ic2VydmUobXV0YXRpb25SZWNvcmRMaXN0LCBvYnNlcnZlcikge1xuICAgIGZvcihsZXQgW211dGF0aW9uUmVjb3JkSW5kZXgsIG11dGF0aW9uUmVjb3JkXSBvZiBPYmplY3QuZW50cmllcyhtdXRhdGlvblJlY29yZExpc3QpKSB7XG4gICAgICBzd2l0Y2gobXV0YXRpb25SZWNvcmQudHlwZSkge1xuICAgICAgICBjYXNlICdjaGlsZExpc3QnOlxuICAgICAgICAgIGxldCBtdXRhdGlvblJlY29yZENhdGVnb3JpZXMgPSBbJ2FkZGVkTm9kZXMnLCAncmVtb3ZlZE5vZGVzJ11cbiAgICAgICAgICBmb3IobGV0IG11dGF0aW9uUmVjb3JkQ2F0ZWdvcnkgb2YgbXV0YXRpb25SZWNvcmRDYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICBpZihtdXRhdGlvblJlY29yZFttdXRhdGlvblJlY29yZENhdGVnb3J5XS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdGhpcy5yZXNldFVJKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYXV0b0luc2VydCgpIHtcbiAgICBpZih0aGlzLmluc2VydCkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLmluc2VydC5lbGVtZW50KVxuICAgICAgLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgZWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQodGhpcy5pbnNlcnQubWV0aG9kLCB0aGlzLmVsZW1lbnQpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuICBhdXRvUmVtb3ZlKCkge1xuICAgIGlmKFxuICAgICAgdGhpcy5lbGVtZW50ICYmXG4gICAgICB0aGlzLmVsZW1lbnQucGFyZW50RWxlbWVudFxuICAgICkgdGhpcy5lbGVtZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KVxuICB9XG4gIGVuYWJsZUVsZW1lbnQoc2V0dGluZ3MpIHtcbiAgICBzZXR0aW5ncyA9IHNldHRpbmdzIHx8IHRoaXMuc2V0dGluZ3NcbiAgICBpZihzZXR0aW5ncy5lbGVtZW50TmFtZSkgdGhpcy5fZWxlbWVudE5hbWUgPSBzZXR0aW5ncy5lbGVtZW50TmFtZVxuICAgIGlmKHNldHRpbmdzLmVsZW1lbnQpIHRoaXMuX2VsZW1lbnQgPSBzZXR0aW5ncy5lbGVtZW50XG4gICAgaWYoc2V0dGluZ3MuYXR0cmlidXRlcykgdGhpcy5fYXR0cmlidXRlcyA9IHNldHRpbmdzLmF0dHJpYnV0ZXNcbiAgICBpZihzZXR0aW5ncy50ZW1wbGF0ZXMpIHRoaXMuX3RlbXBsYXRlcyA9IHNldHRpbmdzLnRlbXBsYXRlc1xuICAgIGlmKHNldHRpbmdzLmluc2VydCkgdGhpcy5faW5zZXJ0ID0gc2V0dGluZ3MuaW5zZXJ0XG4gIH1cbiAgZGlzYWJsZUVsZW1lbnQoc2V0dGluZ3MpIHtcbiAgICBzZXR0aW5ncyA9IHNldHRpbmdzIHx8IHRoaXMuc2V0dGluZ3NcbiAgICBpZihcbiAgICAgIHRoaXMuZWxlbWVudCAmJlxuICAgICAgdGhpcy5lbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICApIHRoaXMuZWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudClcbiAgICBpZih0aGlzLmVsZW1lbnQpIGRlbGV0ZSB0aGlzLmVsZW1lbnRcbiAgICBpZih0aGlzLmF0dHJpYnV0ZXMpIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNcbiAgICBpZih0aGlzLnRlbXBsYXRlcykgZGVsZXRlIHRoaXMudGVtcGxhdGVzXG4gICAgaWYodGhpcy5pbnNlcnQpIGRlbGV0ZSB0aGlzLmluc2VydFxuICB9XG4gIHJlc2V0VUkoKSB7XG4gICAgdGhpcy5kaXNhYmxlVUkoKVxuICAgIHRoaXMuZW5hYmxlVUkoKVxuICB9XG4gIGVuYWJsZVVJKHNldHRpbmdzKSB7XG4gICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB0aGlzLnNldHRpbmdzXG4gICAgaWYoc2V0dGluZ3MudWkpIHRoaXMuX3VpID0gc2V0dGluZ3MudWlcbiAgICBpZihzZXR0aW5ncy51aUNhbGxiYWNrcykgdGhpcy5fdWlDYWxsYmFja3MgPSBzZXR0aW5ncy51aUNhbGxiYWNrc1xuICAgIGlmKHNldHRpbmdzLnVpRXZlbnRzKSB7XG4gICAgICB0aGlzLl91aUV2ZW50cyA9IHNldHRpbmdzLnVpRXZlbnRzXG4gICAgICB0aGlzLmVuYWJsZVVJRXZlbnRzKClcbiAgICB9XG4gIH1cbiAgZGlzYWJsZVVJKHNldHRpbmdzKSB7XG4gICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB0aGlzLnNldHRpbmdzXG4gICAgaWYoc2V0dGluZ3MudWlFdmVudHMpIHtcbiAgICAgIHRoaXMuZGlzYWJsZVVJRXZlbnRzKClcbiAgICAgIGRlbGV0ZSB0aGlzLl91aUV2ZW50c1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy51aUV2ZW50c1xuICAgIGRlbGV0ZSB0aGlzLnVpXG4gICAgZGVsZXRlIHRoaXMudWlDYWxsYmFja3NcbiAgfVxuICBlbmFibGVVSUV2ZW50cygpIHtcbiAgICBpZihcbiAgICAgIHRoaXMudWlFdmVudHMgJiZcbiAgICAgIHRoaXMudWkgJiZcbiAgICAgIHRoaXMudWlDYWxsYmFja3NcbiAgICApIHtcbiAgICAgIE1WQy5VdGlscy5iaW5kRXZlbnRzVG9UYXJnZXRPYmplY3RzKFxuICAgICAgICB0aGlzLnVpRXZlbnRzLFxuICAgICAgICB0aGlzLnVpLFxuICAgICAgICB0aGlzLnVpQ2FsbGJhY2tzXG4gICAgICApXG4gICAgfVxuICB9XG4gIGRpc2FibGVVSUV2ZW50cygpIHtcbiAgICBpZihcbiAgICAgIHRoaXMudWlFdmVudHMgJiZcbiAgICAgIHRoaXMudWkgJiZcbiAgICAgIHRoaXMudWlDYWxsYmFja3NcbiAgICApIHtcbiAgICAgIE1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyhcbiAgICAgICAgdGhpcy51aUV2ZW50cyxcbiAgICAgICAgdGhpcy51aSxcbiAgICAgICAgdGhpcy51aUNhbGxiYWNrc1xuICAgICAgKVxuICAgIH1cbiAgfVxuICBlbmFibGVFbWl0dGVycygpIHtcbiAgICBpZih0aGlzLnNldHRpbmdzLmVtaXR0ZXJzKSB0aGlzLl9lbWl0dGVycyA9IHRoaXMuc2V0dGluZ3MuZW1pdHRlcnNcbiAgfVxuICBkaXNhYmxlRW1pdHRlcnMoKSB7XG4gICAgaWYodGhpcy5fZW1pdHRlcnMpIGRlbGV0ZSB0aGlzLl9lbWl0dGVyc1xuICB9XG4gIGVuYWJsZSgpIHtcbiAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICBzZXR0aW5ncyAmJlxuICAgICAgIXRoaXMuX2VuYWJsZWRcbiAgICApIHtcbiAgICAgIHRoaXMuZW5hYmxlRW1pdHRlcnMoKVxuICAgICAgdGhpcy5lbmFibGVFbGVtZW50KHNldHRpbmdzKVxuICAgICAgdGhpcy5lbmFibGVVSShzZXR0aW5ncylcbiAgICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGxldCBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3NcbiAgICBpZihcbiAgICAgIHNldHRpbmdzICYmXG4gICAgICB0aGlzLl9lbmFibGVkXG4gICAgKSB7XG4gICAgICB0aGlzLmRpc2FibGVVSShzZXR0aW5ncylcbiAgICAgIHRoaXMuZGlzYWJsZUVsZW1lbnQoc2V0dGluZ3MpXG4gICAgICB0aGlzLmRpc2FibGVFbWl0dGVycygpXG4gICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2VcbiAgICAgIHJldHVybiB0aGlzc1xuICAgIH1cbiAgfVxufVxuIiwiTVZDLkNvbnRyb2xsZXIgPSBjbGFzcyBleHRlbmRzIE1WQy5CYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKVxuICB9XG4gIGdldCBfZW1pdHRlckNhbGxiYWNrcygpIHtcbiAgICB0aGlzLmVtaXR0ZXJDYWxsYmFja3MgPSAodGhpcy5lbWl0dGVyQ2FsbGJhY2tzKVxuICAgICAgPyB0aGlzLmVtaXR0ZXJDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyQ2FsbGJhY2tzXG4gIH1cbiAgc2V0IF9lbWl0dGVyQ2FsbGJhY2tzKGVtaXR0ZXJDYWxsYmFja3MpIHtcbiAgICB0aGlzLmVtaXR0ZXJDYWxsYmFja3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgZW1pdHRlckNhbGxiYWNrcywgdGhpcy5fZW1pdHRlckNhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgX21vZGVsQ2FsbGJhY2tzKCkge1xuICAgIHRoaXMubW9kZWxDYWxsYmFja3MgPSAodGhpcy5tb2RlbENhbGxiYWNrcylcbiAgICAgID8gdGhpcy5tb2RlbENhbGxiYWNrc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLm1vZGVsQ2FsbGJhY2tzXG4gIH1cbiAgc2V0IF9tb2RlbENhbGxiYWNrcyhtb2RlbENhbGxiYWNrcykge1xuICAgIHRoaXMubW9kZWxDYWxsYmFja3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgbW9kZWxDYWxsYmFja3MsIHRoaXMuX21vZGVsQ2FsbGJhY2tzXG4gICAgKVxuICB9XG4gIGdldCBfdmlld0NhbGxiYWNrcygpIHtcbiAgICB0aGlzLnZpZXdDYWxsYmFja3MgPSAodGhpcy52aWV3Q2FsbGJhY2tzKVxuICAgICAgPyB0aGlzLnZpZXdDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy52aWV3Q2FsbGJhY2tzXG4gIH1cbiAgc2V0IF92aWV3Q2FsbGJhY2tzKHZpZXdDYWxsYmFja3MpIHtcbiAgICB0aGlzLnZpZXdDYWxsYmFja3MgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgdmlld0NhbGxiYWNrcywgdGhpcy5fdmlld0NhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgX2NvbnRyb2xsZXJDYWxsYmFja3MoKSB7XG4gICAgdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzID0gKHRoaXMuY29udHJvbGxlckNhbGxiYWNrcylcbiAgICAgID8gdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlckNhbGxiYWNrc1xuICB9XG4gIHNldCBfY29udHJvbGxlckNhbGxiYWNrcyhjb250cm9sbGVyQ2FsbGJhY2tzKSB7XG4gICAgdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIGNvbnRyb2xsZXJDYWxsYmFja3MsIHRoaXMuX2NvbnRyb2xsZXJDYWxsYmFja3NcbiAgICApXG4gIH1cbiAgZ2V0IF9tb2RlbHMoKSB7XG4gICAgdGhpcy5tb2RlbHMgPSAodGhpcy5tb2RlbHMpXG4gICAgICA/IHRoaXMubW9kZWxzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMubW9kZWxzXG4gIH1cbiAgc2V0IF9tb2RlbHMobW9kZWxzKSB7XG4gICAgdGhpcy5tb2RlbHMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgbW9kZWxzLCB0aGlzLl9tb2RlbHNcbiAgICApXG4gIH1cbiAgZ2V0IF92aWV3cygpIHtcbiAgICB0aGlzLnZpZXdzID0gKHRoaXMudmlld3MpXG4gICAgICA/IHRoaXMudmlld3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy52aWV3c1xuICB9XG4gIHNldCBfdmlld3Modmlld3MpIHtcbiAgICB0aGlzLnZpZXdzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHZpZXdzLCB0aGlzLl92aWV3c1xuICAgIClcbiAgfVxuICBnZXQgX2NvbnRyb2xsZXJzKCkge1xuICAgIHRoaXMuY29udHJvbGxlcnMgPSAodGhpcy5jb250cm9sbGVycylcbiAgICAgID8gdGhpcy5jb250cm9sbGVyc1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXJzXG4gIH1cbiAgc2V0IF9jb250cm9sbGVycyhjb250cm9sbGVycykge1xuICAgIHRoaXMuY29udHJvbGxlcnMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgY29udHJvbGxlcnMsIHRoaXMuX2NvbnRyb2xsZXJzXG4gICAgKVxuICB9XG4gIGdldCBfcm91dGVycygpIHtcbiAgICB0aGlzLnJvdXRlcnMgPSAodGhpcy5yb3V0ZXJzKVxuICAgICAgPyB0aGlzLnJvdXRlcnNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5yb3V0ZXJzXG4gIH1cbiAgc2V0IF9yb3V0ZXJzKHJvdXRlcnMpIHtcbiAgICB0aGlzLnJvdXRlcnMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgcm91dGVycywgdGhpcy5fcm91dGVyc1xuICAgIClcbiAgfVxuICBnZXQgX3JvdXRlckV2ZW50cygpIHtcbiAgICB0aGlzLnJvdXRlckV2ZW50cyA9ICh0aGlzLnJvdXRlckV2ZW50cylcbiAgICAgID8gdGhpcy5yb3V0ZXJFdmVudHNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5yb3V0ZXJFdmVudHNcbiAgfVxuICBzZXQgX3JvdXRlckV2ZW50cyhyb3V0ZXJFdmVudHMpIHtcbiAgICB0aGlzLnJvdXRlckV2ZW50cyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICByb3V0ZXJFdmVudHMsIHRoaXMuX3JvdXRlckV2ZW50c1xuICAgIClcbiAgfVxuICBnZXQgX3JvdXRlckNhbGxiYWNrcygpIHtcbiAgICB0aGlzLnJvdXRlckNhbGxiYWNrcyA9ICh0aGlzLnJvdXRlckNhbGxiYWNrcylcbiAgICAgID8gdGhpcy5yb3V0ZXJDYWxsYmFja3NcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5yb3V0ZXJDYWxsYmFja3NcbiAgfVxuICBzZXQgX3JvdXRlckNhbGxiYWNrcyhyb3V0ZXJDYWxsYmFja3MpIHtcbiAgICB0aGlzLnJvdXRlckNhbGxiYWNrcyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICByb3V0ZXJDYWxsYmFja3MsIHRoaXMuX3JvdXRlckNhbGxiYWNrc1xuICAgIClcbiAgfVxuICBnZXQgX2VtaXR0ZXJFdmVudHMoKSB7XG4gICAgdGhpcy5lbWl0dGVyRXZlbnRzID0gKHRoaXMuZW1pdHRlckV2ZW50cylcbiAgICAgID8gdGhpcy5lbWl0dGVyRXZlbnRzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlckV2ZW50c1xuICB9XG4gIHNldCBfZW1pdHRlckV2ZW50cyhlbWl0dGVyRXZlbnRzKSB7XG4gICAgdGhpcy5lbWl0dGVyRXZlbnRzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIGVtaXR0ZXJFdmVudHMsIHRoaXMuX2VtaXR0ZXJFdmVudHNcbiAgICApXG4gIH1cbiAgZ2V0IF9tb2RlbEV2ZW50cygpIHtcbiAgICB0aGlzLm1vZGVsRXZlbnRzID0gKHRoaXMubW9kZWxFdmVudHMpXG4gICAgICA/IHRoaXMubW9kZWxFdmVudHNcbiAgICAgIDoge31cbiAgICByZXR1cm4gdGhpcy5tb2RlbEV2ZW50c1xuICB9XG4gIHNldCBfbW9kZWxFdmVudHMobW9kZWxFdmVudHMpIHtcbiAgICB0aGlzLm1vZGVsRXZlbnRzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIG1vZGVsRXZlbnRzLCB0aGlzLl9tb2RlbEV2ZW50c1xuICAgIClcbiAgfVxuICBnZXQgX3ZpZXdFdmVudHMoKSB7XG4gICAgdGhpcy52aWV3RXZlbnRzID0gKHRoaXMudmlld0V2ZW50cylcbiAgICAgID8gdGhpcy52aWV3RXZlbnRzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMudmlld0V2ZW50c1xuICB9XG4gIHNldCBfdmlld0V2ZW50cyh2aWV3RXZlbnRzKSB7XG4gICAgdGhpcy52aWV3RXZlbnRzID0gTVZDLlV0aWxzLmFkZFByb3BlcnRpZXNUb09iamVjdChcbiAgICAgIHZpZXdFdmVudHMsIHRoaXMuX3ZpZXdFdmVudHNcbiAgICApXG4gIH1cbiAgZ2V0IF9jb250cm9sbGVyRXZlbnRzKCkge1xuICAgIHRoaXMuY29udHJvbGxlckV2ZW50cyA9ICh0aGlzLmNvbnRyb2xsZXJFdmVudHMpXG4gICAgICA/IHRoaXMuY29udHJvbGxlckV2ZW50c1xuICAgICAgOiB7fVxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXJFdmVudHNcbiAgfVxuICBzZXQgX2NvbnRyb2xsZXJFdmVudHMoY29udHJvbGxlckV2ZW50cykge1xuICAgIHRoaXMuY29udHJvbGxlckV2ZW50cyA9IE1WQy5VdGlscy5hZGRQcm9wZXJ0aWVzVG9PYmplY3QoXG4gICAgICBjb250cm9sbGVyRXZlbnRzLCB0aGlzLl9jb250cm9sbGVyRXZlbnRzXG4gICAgKVxuICB9XG4gIGdldCBfZW5hYmxlZCgpIHsgcmV0dXJuIHRoaXMuZW5hYmxlZCB8fCBmYWxzZSB9XG4gIHNldCBfZW5hYmxlZChlbmFibGVkKSB7IHRoaXMuZW5hYmxlZCA9IGVuYWJsZWQgfVxuICBlbmFibGVNb2RlbEV2ZW50cygpIHtcbiAgICBNVkMuVXRpbHMuYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cyh0aGlzLm1vZGVsRXZlbnRzLCB0aGlzLm1vZGVscywgdGhpcy5tb2RlbENhbGxiYWNrcylcbiAgfVxuICBkaXNhYmxlTW9kZWxFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLnVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKHRoaXMubW9kZWxFdmVudHMsIHRoaXMubW9kZWxzLCB0aGlzLm1vZGVsQ2FsbGJhY2tzKVxuICB9XG4gIGVuYWJsZVZpZXdFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLmJpbmRFdmVudHNUb1RhcmdldE9iamVjdHModGhpcy52aWV3RXZlbnRzLCB0aGlzLnZpZXdzLCB0aGlzLnZpZXdDYWxsYmFja3MpXG4gIH1cbiAgZGlzYWJsZVZpZXdFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLnVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKHRoaXMudmlld0V2ZW50cywgdGhpcy52aWV3cywgdGhpcy52aWV3Q2FsbGJhY2tzKVxuICB9XG4gIGVuYWJsZUNvbnRyb2xsZXJFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLmJpbmRFdmVudHNUb1RhcmdldE9iamVjdHModGhpcy5jb250cm9sbGVyRXZlbnRzLCB0aGlzLmNvbnRyb2xsZXJzLCB0aGlzLmNvbnRyb2xsZXJDYWxsYmFja3MpXG4gIH1cbiAgZGlzYWJsZUNvbnRyb2xsZXJFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLnVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKHRoaXMuY29udHJvbGxlckV2ZW50cywgdGhpcy5jb250cm9sbGVycywgdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzKVxuICB9XG4gIGVuYWJsZUVtaXR0ZXJFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLmJpbmRFdmVudHNUb1RhcmdldE9iamVjdHModGhpcy5lbWl0dGVyRXZlbnRzLCB0aGlzLmVtaXR0ZXJzLCB0aGlzLmVtaXR0ZXJDYWxsYmFja3MpXG4gIH1cbiAgZGlzYWJsZUVtaXR0ZXJFdmVudHMoKSB7XG4gICAgTVZDLlV0aWxzLnVuYmluZEV2ZW50c0Zyb21UYXJnZXRPYmplY3RzKHRoaXMuZW1pdHRlckV2ZW50cywgdGhpcy5lbWl0dGVycywgdGhpcy5lbWl0dGVyQ2FsbGJhY2tzKVxuICB9XG4gIGVuYWJsZVJvdXRlckV2ZW50cygpIHtcbiAgICBNVkMuVXRpbHMuYmluZEV2ZW50c1RvVGFyZ2V0T2JqZWN0cyh0aGlzLnJvdXRlckV2ZW50cywgdGhpcy5yb3V0ZXJzLCB0aGlzLnJvdXRlckNhbGxiYWNrcylcbiAgfVxuICBkaXNhYmxlUm91dGVyRXZlbnRzKCkge1xuICAgIE1WQy5VdGlscy51bmJpbmRFdmVudHNGcm9tVGFyZ2V0T2JqZWN0cyh0aGlzLnJvdXRlckV2ZW50cywgdGhpcy5yb3V0ZXJzLCB0aGlzLnJvdXRlckNhbGxiYWNrcylcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgc2V0dGluZ3MgJiZcbiAgICAgICF0aGlzLmVuYWJsZWRcbiAgICApIHtcbiAgICAgIGlmKHNldHRpbmdzLm1vZGVsQ2FsbGJhY2tzKSB0aGlzLl9tb2RlbENhbGxiYWNrcyA9IHNldHRpbmdzLm1vZGVsQ2FsbGJhY2tzXG4gICAgICBpZihzZXR0aW5ncy52aWV3Q2FsbGJhY2tzKSB0aGlzLl92aWV3Q2FsbGJhY2tzID0gc2V0dGluZ3Mudmlld0NhbGxiYWNrc1xuICAgICAgaWYoc2V0dGluZ3MuY29udHJvbGxlckNhbGxiYWNrcykgdGhpcy5fY29udHJvbGxlckNhbGxiYWNrcyA9IHNldHRpbmdzLmNvbnRyb2xsZXJDYWxsYmFja3NcbiAgICAgIGlmKHNldHRpbmdzLmVtaXR0ZXJDYWxsYmFja3MpIHRoaXMuX2VtaXR0ZXJDYWxsYmFja3MgPSBzZXR0aW5ncy5lbWl0dGVyQ2FsbGJhY2tzXG4gICAgICBpZihzZXR0aW5ncy5yb3V0ZXJDYWxsYmFja3MpIHRoaXMuX3JvdXRlckNhbGxiYWNrcyA9IHNldHRpbmdzLnJvdXRlckNhbGxiYWNrc1xuICAgICAgaWYoc2V0dGluZ3MubW9kZWxzKSB0aGlzLl9tb2RlbHMgPSBzZXR0aW5ncy5tb2RlbHNcbiAgICAgIGlmKHNldHRpbmdzLnZpZXdzKSB0aGlzLl92aWV3cyA9IHNldHRpbmdzLnZpZXdzXG4gICAgICBpZihzZXR0aW5ncy5jb250cm9sbGVycykgdGhpcy5fY29udHJvbGxlcnMgPSBzZXR0aW5ncy5jb250cm9sbGVyc1xuICAgICAgaWYoc2V0dGluZ3MuZW1pdHRlcnMpIHRoaXMuX2VtaXR0ZXJzID0gc2V0dGluZ3MuZW1pdHRlcnNcbiAgICAgIGlmKHNldHRpbmdzLnJvdXRlcnMpIHRoaXMuX3JvdXRlcnMgPSBzZXR0aW5ncy5yb3V0ZXJzXG4gICAgICBpZihzZXR0aW5ncy5yb3V0ZXJFdmVudHMpIHRoaXMuX3JvdXRlckV2ZW50cyA9IHNldHRpbmdzLnJvdXRlckV2ZW50c1xuICAgICAgaWYoc2V0dGluZ3MubW9kZWxFdmVudHMpIHRoaXMuX21vZGVsRXZlbnRzID0gc2V0dGluZ3MubW9kZWxFdmVudHNcbiAgICAgIGlmKHNldHRpbmdzLnZpZXdFdmVudHMpIHRoaXMuX3ZpZXdFdmVudHMgPSBzZXR0aW5ncy52aWV3RXZlbnRzXG4gICAgICBpZihzZXR0aW5ncy5jb250cm9sbGVyRXZlbnRzKSB0aGlzLl9jb250cm9sbGVyRXZlbnRzID0gc2V0dGluZ3MuY29udHJvbGxlckV2ZW50c1xuICAgICAgaWYoc2V0dGluZ3MuZW1pdHRlckV2ZW50cykgdGhpcy5fZW1pdHRlckV2ZW50cyA9IHNldHRpbmdzLmVtaXR0ZXJFdmVudHNcbiAgICAgIGlmKFxuICAgICAgICB0aGlzLm1vZGVsRXZlbnRzICYmXG4gICAgICAgIHRoaXMubW9kZWxzICYmXG4gICAgICAgIHRoaXMubW9kZWxDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVuYWJsZU1vZGVsRXZlbnRzKClcbiAgICAgIH1cbiAgICAgIGlmKFxuICAgICAgICB0aGlzLnZpZXdFdmVudHMgJiZcbiAgICAgICAgdGhpcy52aWV3cyAmJlxuICAgICAgICB0aGlzLnZpZXdDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVuYWJsZVZpZXdFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMuY29udHJvbGxlckV2ZW50cyAmJlxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzICYmXG4gICAgICAgIHRoaXMuY29udHJvbGxlckNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlQ29udHJvbGxlckV2ZW50cygpXG4gICAgICB9XG4gICAgICBpZihcbiAgICAgICAgdGhpcy5yb3V0ZXJFdmVudHMgJiZcbiAgICAgICAgdGhpcy5yb3V0ZXJzICYmXG4gICAgICAgIHRoaXMucm91dGVyQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5lbmFibGVSb3V0ZXJFdmVudHMoKVxuICAgICAgfVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMuZW1pdHRlckV2ZW50cyAmJlxuICAgICAgICB0aGlzLmVtaXR0ZXJzICYmXG4gICAgICAgIHRoaXMuZW1pdHRlckNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlRW1pdHRlckV2ZW50cygpXG4gICAgICB9XG4gICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLmRpc2FibGUoKVxuICAgIHRoaXMuZW5hYmxlKClcbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGxldCBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3NcbiAgICBpZihcbiAgICAgIHNldHRpbmdzICYmXG4gICAgICB0aGlzLmVuYWJsZWRcbiAgICApIHtcbiAgICAgIGlmKFxuICAgICAgICB0aGlzLm1vZGVsRXZlbnRzICYmXG4gICAgICAgIHRoaXMubW9kZWxzICYmXG4gICAgICAgIHRoaXMubW9kZWxDYWxsYmFja3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLmRpc2FibGVNb2RlbEV2ZW50cygpXG4gICAgICB9XG4gICAgICBpZihcbiAgICAgICAgdGhpcy52aWV3RXZlbnRzICYmXG4gICAgICAgIHRoaXMudmlld3MgJiZcbiAgICAgICAgdGhpcy52aWV3Q2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlVmlld0V2ZW50cygpXG4gICAgICB9XG4gICAgICBpZihcbiAgICAgICAgdGhpcy5jb250cm9sbGVyRXZlbnRzICYmXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMgJiZcbiAgICAgICAgdGhpcy5jb250cm9sbGVyQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlQ29udHJvbGxlckV2ZW50cygpXG4gICAgICB9fVxuICAgICAgaWYoXG4gICAgICAgIHRoaXMucm91dGVyRXZlbnRzICYmXG4gICAgICAgIHRoaXMucm91dGVycyAmJlxuICAgICAgICB0aGlzLnJvdXRlckNhbGxiYWNrc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZVJvdXRlckV2ZW50cygpXG4gICAgICB9XG4gICAgICBpZihcbiAgICAgICAgdGhpcy5lbWl0dGVyRXZlbnRzICYmXG4gICAgICAgIHRoaXMuZW1pdHRlcnMgJiZcbiAgICAgICAgdGhpcy5lbWl0dGVyQ2FsbGJhY2tzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlRW1pdHRlckV2ZW50cygpXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tb2RlbENhbGxiYWNrc1xuICAgICAgICBkZWxldGUgdGhpcy5fdmlld0NhbGxiYWNrc1xuICAgICAgICBkZWxldGUgdGhpcy5fY29udHJvbGxlckNhbGxiYWNrc1xuICAgICAgICBkZWxldGUgdGhpcy5fZW1pdHRlckNhbGxiYWNrc1xuICAgICAgICBkZWxldGUgdGhpcy5fcm91dGVyQ2FsbGJhY2tzXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tb2RlbHNcbiAgICAgICAgZGVsZXRlIHRoaXMuX3ZpZXdzXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jb250cm9sbGVyc1xuICAgICAgICBkZWxldGUgdGhpcy5fZW1pdHRlcnNcbiAgICAgICAgZGVsZXRlIHRoaXMuX3JvdXRlcnNcbiAgICAgICAgZGVsZXRlIHRoaXMuX3JvdXRlckV2ZW50c1xuICAgICAgICBkZWxldGUgdGhpcy5fbW9kZWxFdmVudHNcbiAgICAgICAgZGVsZXRlIHRoaXMuX3ZpZXdFdmVudHNcbiAgICAgICAgZGVsZXRlIHRoaXMuX2NvbnRyb2xsZXJFdmVudHNcbiAgICAgICAgZGVsZXRlIHRoaXMuX2VtaXR0ZXJFdmVudHNcbiAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZVxuICAgIH1cbiAgfVxufVxuIiwiTVZDLlJvdXRlciA9IGNsYXNzIGV4dGVuZHMgTVZDLkJhc2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpXG4gIH1cbiAgZ2V0IHJvdXRlKCkge1xuICAgIGlmKHRoaXMuX2hhc2gpIHtcbiAgICAgIHJldHVybiBTdHJpbmcod2luZG93LmxvY2F0aW9uLmhhc2gpLnNwbGl0KCcjJykucG9wKClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFN0cmluZyh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgfVxuICB9XG4gIGdldCBfaGFzaCgpIHsgcmV0dXJuIHRoaXMuaGFzaCB9XG4gIHNldCBfaGFzaChoYXNoKSB7IHRoaXMuaGFzaCA9IGhhc2ggfVxuICBnZXQgX2VuYWJsZWQoKSB7IHJldHVybiB0aGlzLmVuYWJsZWQgfHwgZmFsc2UgfVxuICBzZXQgX2VuYWJsZWQoZW5hYmxlZCkgeyB0aGlzLmVuYWJsZWQgPSBlbmFibGVkIH1cbiAgZ2V0IF9yb3V0ZXMoKSB7XG4gICAgdGhpcy5yb3V0ZXMgPSAodGhpcy5yb3V0ZXMpXG4gICAgICA/IHRoaXMucm91dGVzXG4gICAgICA6IHt9XG4gICAgcmV0dXJuIHRoaXMucm91dGVzXG4gIH1cbiAgc2V0IF9yb3V0ZXMocm91dGVzKSB7XG4gICAgdGhpcy5yb3V0ZXMgPSBNVkMuVXRpbHMuYWRkUHJvcGVydGllc1RvT2JqZWN0KFxuICAgICAgcm91dGVzLCB0aGlzLl9yb3V0ZXNcbiAgICApXG4gIH1cbiAgZ2V0IF9jb250cm9sbGVyKCkgeyByZXR1cm4gdGhpcy5jb250cm9sbGVyIH1cbiAgc2V0IF9jb250cm9sbGVyKGNvbnRyb2xsZXIpIHsgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlciB9XG4gIGdldCBfcHJldmlvdXNVUkwoKSB7IHJldHVybiB0aGlzLnByZXZpb3VzVVJMIH1cbiAgc2V0IF9wcmV2aW91c1VSTChwcmV2aW91c1VSTCkgeyB0aGlzLnByZXZpb3VzVVJMID0gcHJldmlvdXNVUkwgfVxuICBnZXQgX2N1cnJlbnRVUkwoKSB7IHJldHVybiB0aGlzLmN1cnJlbnRVUkwgfVxuICBzZXQgX2N1cnJlbnRVUkwoY3VycmVudFVSTCkgeyB0aGlzLmN1cnJlbnRVUkwgPSBjdXJyZW50VVJMIH1cbiAgZ2V0IGZyYWdtZW50SURSZWdFeHAoKSB7IHJldHVybiBuZXcgUmVnRXhwKC9eKFswLTlBLVpcXD9cXD1cXCxcXC5cXCpcXC1cXF9cXCdcXFwiXFxeXFwlXFwkXFwjXFxAXFwhXFx+XFwoXFwpXFx7XFx9XFwmXFw8XFw+XFxcXFxcL10pKiQvLCAnZ2knKSB9XG4gIGZyYWdtZW50TmFtZVJlZ0V4cChmcmFnbWVudCkgeyByZXR1cm4gbmV3IFJlZ0V4cCgnXicuY29uY2F0KGZyYWdtZW50LCAnJCcpKSB9XG4gIGVuYWJsZSgpIHtcbiAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzXG4gICAgaWYoXG4gICAgICBzZXR0aW5ncyAmJlxuICAgICAgIXRoaXMuZW5hYmxlZFxuICAgICkge1xuICAgICAgdGhpcy5faGFzaCA9ICh0eXBlb2YgdGhpcy5zZXR0aW5ncy5oYXNoID09PSAnYm9vbGVhbicpXG4gICAgICAgID8gdGhpcy5zZXR0aW5ncy5oYXNoXG4gICAgICAgIDogdHJ1ZVxuICAgICAgdGhpcy5lbmFibGVFbWl0dGVycygpXG4gICAgICB0aGlzLmVuYWJsZUV2ZW50cygpXG4gICAgICB0aGlzLmVuYWJsZVJvdXRlcygpXG4gICAgICB0aGlzLnJvdXRlQ2hhbmdlKClcbiAgICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlXG4gICAgfVxuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgbGV0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1xuICAgIGlmKFxuICAgICAgc2V0dGluZ3MgJiZcbiAgICAgIHRoaXMuZW5hYmxlZFxuICAgICkge1xuICAgICAgZGVsZXRlIHRoaXMuX2hhc2hcbiAgICAgIHRoaXMuZGlzYWJsZUV2ZW50cygpXG4gICAgICB0aGlzLmRpc2FibGVSb3V0ZXMoKVxuICAgICAgdGhpcy5kaXNhYmxlRW1pdHRlcnMoKVxuICAgICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlXG4gICAgfVxuICB9XG4gIGVuYWJsZVJvdXRlcygpIHtcbiAgICBpZih0aGlzLnNldHRpbmdzLmNvbnRyb2xsZXIpIHRoaXMuX2NvbnRyb2xsZXIgPSB0aGlzLnNldHRpbmdzLmNvbnRyb2xsZXJcbiAgICB0aGlzLl9yb3V0ZXMgPSBPYmplY3QuZW50cmllcyh0aGlzLnNldHRpbmdzLnJvdXRlcykucmVkdWNlKFxuICAgICAgKFxuICAgICAgICBfcm91dGVzLFxuICAgICAgICBbcm91dGVQYXRoLCByb3V0ZUNhbGxiYWNrXSxcbiAgICAgICAgcm91dGVJbmRleCxcbiAgICAgICAgb3JpZ2luYWxSb3V0ZXMsXG4gICAgICApID0+IHtcbiAgICAgICAgX3JvdXRlc1tyb3V0ZVBhdGhdID0gdGhpcy5jb250cm9sbGVyW3JvdXRlQ2FsbGJhY2tdXG4gICAgICAgIHJldHVybiBfcm91dGVzXG4gICAgICB9LFxuICAgICAge31cbiAgICApXG4gICAgcmV0dXJuXG4gIH1cbiAgZW5hYmxlRW1pdHRlcnMoKSB7XG4gICAgdGhpcy5fZW1pdHRlcnMgPSB7XG4gICAgICBuYXZpZ2F0ZUVtaXR0ZXI6IG5ldyBNVkMuRW1pdHRlcnMuTmF2aWdhdGVFbWl0dGVyKCksXG4gICAgfVxuICB9XG4gIGRpc2FibGVFbWl0dGVycygpIHtcbiAgICBkZWxldGUgdGhpcy5fZW1pdHRlcnMubmF2aWdhdGVFbWl0dGVyXG4gIH1cbiAgZGlzYWJsZVJvdXRlcygpIHtcbiAgICBkZWxldGUgdGhpcy5fcm91dGVzXG4gICAgZGVsZXRlIHRoaXMuX2NvbnRyb2xsZXJcbiAgfVxuICBlbmFibGVFdmVudHMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aGlzLnJvdXRlQ2hhbmdlLmJpbmQodGhpcykpXG4gIH1cbiAgZGlzYWJsZUV2ZW50cygpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHRoaXMucm91dGVDaGFuZ2UuYmluZCh0aGlzKSlcbiAgfVxuICByb3V0ZUNoYW5nZSgpIHtcbiAgICBsZXQgcm91dGUgPSB0aGlzLnJvdXRlLnNwbGl0KCcvJykuZmlsdGVyKChmcmFnbWVudCkgPT4gZnJhZ21lbnQubGVuZ3RoKVxuICAgIHJvdXRlID0gKHJvdXRlLmxlbmd0aClcbiAgICAgID8gcm91dGVcbiAgICAgIDogWycvJ11cbiAgICBsZXQgcm91dGVDb250cm9sbGVyRGF0YSA9IE9iamVjdC5lbnRyaWVzKHRoaXMucm91dGVzKVxuICAgICAgLmZpbHRlcigoW3JvdXRlclBhdGgsIHJvdXRlckNvbnRyb2xsZXJdKSA9PiB7XG4gICAgICAgIHJvdXRlclBhdGggPSByb3V0ZXJQYXRoLnNwbGl0KCcvJykuZmlsdGVyKChmcmFnbWVudCkgPT4gZnJhZ21lbnQubGVuZ3RoKVxuICAgICAgICByb3V0ZXJQYXRoID0gKHJvdXRlclBhdGgubGVuZ3RoKVxuICAgICAgICAgID8gcm91dGVyUGF0aFxuICAgICAgICAgIDogWycvJ11cbiAgICAgICAgaWYoXG4gICAgICAgICAgcm91dGUubGVuZ3RoICYmXG4gICAgICAgICAgcm91dGUubGVuZ3RoID09PSByb3V0ZXJQYXRoLmxlbmd0aFxuICAgICAgICApIHtcbiAgICAgICAgICBsZXQgbWF0Y2hcbiAgICAgICAgICByZXR1cm4gcm91dGVyUGF0aC5maWx0ZXIoKGZyYWdtZW50LCBmcmFnbWVudEluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgbWF0Y2ggPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICBtYXRjaCA9PT0gdHJ1ZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmKGZyYWdtZW50WzBdID09PSAnOicpIHtcbiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnRJRFJlZ0V4cFxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gZnJhZ21lbnQucmVwbGFjZShuZXcgUmVnRXhwKCcvJywgJ2dpJyksICdcXFxcXFwvJylcbiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnROYW1lUmVnRXhwKGZyYWdtZW50KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG1hdGNoID0gZnJhZ21lbnQudGVzdChyb3V0ZVtmcmFnbWVudEluZGV4XSlcbiAgICAgICAgICAgICAgaWYoXG4gICAgICAgICAgICAgICAgbWF0Y2ggPT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICBmcmFnbWVudEluZGV4ID09PSByb3V0ZS5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiByb3V0ZXJDb250cm9sbGVyXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVswXVxuICAgICAgICB9XG4gICAgICB9KVswXVxuICAgIHRyeSB7XG4gICAgICBpZih0aGlzLmN1cnJlbnRVUkwpIHRoaXMuX3ByZXZpb3VzVVJMID0gdGhpcy5jdXJyZW50VVJMXG4gICAgICB0aGlzLl9jdXJyZW50VVJMID0gd2luZG93LmxvY2F0aW9uLmhyZWZcbiAgICAgIGxldCByb3V0ZUNvbnRyb2xsZXJOYW1lID0gcm91dGVDb250cm9sbGVyRGF0YVswXVxuICAgICAgbGV0IHJvdXRlQ29udHJvbGxlciA9IHJvdXRlQ29udHJvbGxlckRhdGFbMV1cbiAgICAgIGxldCBuYXZpZ2F0ZUVtaXR0ZXIgPSB0aGlzLmVtaXR0ZXJzLm5hdmlnYXRlRW1pdHRlclxuICAgICAgbGV0IG5hdmlnYXRlRW1pdHRlckRhdGEgPSB7XG4gICAgICAgIGN1cnJlbnRVUkw6IHRoaXMuY3VycmVudFVSTCxcbiAgICAgICAgcHJldmlvdXNVUkw6IHRoaXMucHJldmlvdXNVUkwsXG4gICAgICAgIGN1cnJlbnRSb3V0ZTogdGhpcy5yb3V0ZSxcbiAgICAgICAgY3VycmVudENvbnRyb2xsZXI6IHJvdXRlQ29udHJvbGxlci5uYW1lXG4gICAgICB9XG4gICAgICBuYXZpZ2F0ZUVtaXR0ZXIuc2V0KG5hdmlnYXRlRW1pdHRlckRhdGEpXG4gICAgICB0aGlzLmVtaXQoXG4gICAgICAgIG5hdmlnYXRlRW1pdHRlci5uYW1lLFxuICAgICAgICBuYXZpZ2F0ZUVtaXR0ZXIuZW1pc3Npb24oKVxuICAgICAgKVxuICAgICAgcm91dGVDb250cm9sbGVyKG5hdmlnYXRlRW1pdHRlci5lbWlzc2lvbigpKVxuICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgIHRocm93ICdSb3V0ZSBEZWZpbml0aW9uIEVycm9yJ1xuICAgIH1cbiAgfVxuICBuYXZpZ2F0ZShwYXRoKSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoXG4gIH1cbn1cbiJdLCJmaWxlIjoiYnJvd3Nlci9tdmMtZnJhbWV3b3JrLW1pbi5qcyJ9
