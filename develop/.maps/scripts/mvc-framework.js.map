{"version":3,"sources":["MVC.js","Events.js","Service.js","Channels.js","Channel.js","Model.js","View.js","Controller.js","Router.js"],"names":[],"mappings":"AAAA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../../scripts/mvc-framework.js","sourcesContent":["var MVC = MVC || {}\r\n","MVC.Events = class {\r\n  constructor() {}\r\n  get _events() { return this.events || {} }\r\n  eventCallbacks(eventName) { return this._events[eventName] || {} }\r\n  eventCallbackName(eventCallback) {\r\n    return (eventCallback.name.length)\r\n      ? eventCallback.name\r\n      : 'anonymousFunction'\r\n  }\r\n  eventCallbackGroup(eventCallbacks, eventCallbackName) { return eventCallbacks[eventCallbackName] || [] }\r\n  on(eventName, eventCallback) {\r\n    let eventCallbacks = this.eventCallbacks(eventName)\r\n    let eventCallbackName = this.eventCallbackName(eventCallback)\r\n    let eventCallbackGroup = this.eventCallbackGroup(eventCallbacks, eventCallbackName)\r\n    eventCallbackGroup.push(eventCallback)\r\n    eventCallbacks[eventCallbackName] = eventCallbackGroup\r\n    this._events[eventName] = eventCallbacks\r\n  }\r\n  off() {\r\n    switch(arguments.length) {\r\n      case 1:\r\n        var eventName = arguments[0]\r\n        delete this._events[eventName]\r\n        break\r\n      case 2:\r\n        var eventName = arguments[0]\r\n        var eventCallback = arguments[1]\r\n        var eventCallbackName = this.eventCallbackName(eventCallback)\r\n        delete this._events[eventName][eventCallbackName]\r\n        break\r\n    }\r\n  }\r\n  emit(eventName, eventData) {\r\n    let eventCallbacks = this.eventCallbacks(eventName)\r\n    for(let [eventCallbackGroupName, eventCallbackGroup] of Object.entries(eventCallbacks)) {\r\n      for(let eventCallback of eventCallbackGroup) {\r\n        eventCallback(eventData)\r\n      }\r\n    }\r\n  }\r\n}\r\n","MVC.Service = class extends MVC.Events {\n  constructor(type, url, settings) {\n    super()\n    this._settings = settings || {}\n    this._type = type\n    this._url = url\n  }\n  get _defaults() { return this.defaults || {\n    contentType: {'Content-Type': 'application/json'},\n    responseType: 'json',\n  } }\n  get _settings() { return this.settings || {} }\n  set _settings(settings) {\n    this.settings = settings || {}\n    this._data = this.settings.data || null\n    this._headers = this._settings.headers || [this._defaults.contentType]\n    this._responseType = this._settings.responseType\n  }\n  get _responseTypes() { return ['', 'arraybuffer', 'blob', 'document', 'json', 'text'] }\n  get _responseType() { return this.responseType }\n  set _responseType(responseType) {\n    this._xhr.responseType = this._responseTypes.find(\n      (responseTypeItem) => responseTypeItem === responseType\n    ) || this._defaults.responseType\n  }\n  get _type() { return this.type }\n  set _type(type) { this.type = type }\n  get _url() { return this.url }\n  set _url(url) { this.url = url }\n  get _headers() { return this.headers || [] }\n  set _headers(headers) {\n    this._headers.length = 0\n    for(let header of headers) {\n      this._xhr.setRequestHeader({header}[0], {header}[1])\n      this._headers.push(header)\n    }\n  }\n  get _xhr() {\n    this.xhr = (this.xhr)\n      ? this.xhr\n      : new XMLHttpRequest()\n    return this.xhr\n  }\n  newXHR() {\n    return new Promise((resolve, reject) => {\n      if(this._xhr.status === 200) this._xhr.abort()\n      this._xhr.open(this._type, this._url)\n      this._xhr.onload = resolve\n      this._xhr.onerror = reject\n      this._xhr.send(this._data)\n    })\n  }\n}\n","MVC.Channels = class {\r\n  constructor() {}\r\n  get channels() {\r\n    this._channels = (this._channels)\r\n      ? this._channels\r\n      : {}\r\n    return this._channels\r\n  }\r\n  channel(channelName) {\r\n    this.channels[channelName] = (this.channels[channelName])\r\n      ? this.channels[channelName]\r\n      : new MVC.Channels.Channel()\r\n    return this.channels[channelName]\r\n  }\r\n  off(channelName) {\r\n    delete this.channels[channelName]\r\n  }\r\n}\r\n","MVC.Channels.Channel = class {\r\n  constructor() {}\r\n  get responses() {\r\n    this._responses = (this._responses)\r\n      ? this._responses\r\n      : {}\r\n    return this._responses\r\n  }\r\n  response(responseName, responseCallback) {\r\n    if(responseCallback) {\r\n      this.responses[responseName] = responseCallback\r\n    } else {\r\n      return this.responses[response]\r\n    }\r\n  }\r\n  request(responseName, requestData) {\r\n    if(this.responses[responseName]) {\r\n      return this.responses[responseName](requestData)\r\n    }\r\n  }\r\n  off(responseName) {\r\n    if(responseName) {\r\n      delete this.responses[responseName]\r\n    } else {\r\n      for(let [responseName] of Object.keys(this.responses)) {\r\n        delete this.responses[responseName]\r\n      }\r\n    }\r\n  }\r\n}\r\n","MVC.Model = class extends MVC.Events {\n  constructor(settings) {\n    super()\n    this._settings = settings\n  }\n  get _settings() { return this.settings || {} }\n  set _settings(settings) {\n    if(this.settings.histiogram) this._histiogram = this.settings.histiogram\n    if(this.settings.data) this._data = this.settings.data\n  }\n  get _histiogram() { return this.histiogram || {\n    length: 1\n  } }\n  set _histiogram(histiogram) {\n    this.histiogram = Object.assign(\n      this.histiogram,\n      histiogram\n    )\n  }\n  get _history() { return this.history || [] }\n  set _history(data) {\n    if(\n      Object.keys(data).length\n    ) {\n      if(this._histiogram.length) {\n        this._history.unshift(this.parse(data))\n        this._history.splice(this._histiogram.length)\n      }\n    }\n  }\n  get _data() { return this.data || {} }\n  set() {\n    this._history = this._data\n    switch(arguments.length) {\n      case 1:\n        for(let [key, value] of Object.entries(arguments[0])) {\n          if(!this._data['_'.concat(key)]) this.addDataProperty(key, value)\n          this._data['_'.concat(key)] = value\n        }\n        break\n      case 2:\n        let key = arguments[0]\n        let value = arguments[1]\n        if(!this._data['_'.concat(key)]) this.addDataProperty(key, value)\n        this._data['_'.concat(key)] = value\n        break;\n    }\n  }\n  unset() {\n    this._history = this._data\n    switch(arguments.length) {\n      case 0:\n        for(let key of Object.keys(this._data)) {\n          delete this._data['_'.concat(key)]\n          delete this._data[key]\n        }\n        break\n      case 1:\n        let key = arguments[0]\n        delete this._data['_'.concat(key)]\n        delete this._data[key]\n        break\n    }\n  }\n  addDataProperty(key, value) {\n    let context = this\n    Object.defineProperties(\n      this._data,\n      {\n        ['_'.concat(key)]: {\n          configurable: true,\n          get() { return this[key] },\n          set(value) {\n            this[key] = value\n            let setValueEventName = ['set', ':', key].join('')\n            let setEventName = 'set'\n            context.emit(\n              setValueEventName,\n              {\n                name: setValueEventName,\n                key: key,\n                value: value,\n              }\n            )\n            context.emit(\n              setEventName,\n              {\n                name: setEventName,\n                key: key,\n                value: value,\n              }\n            )\n          }\n        }\n      }\n    )\n  }\n  parse(data) {\n    data = data || this._data\n    return JSON.parse(JSON.stringify(data)) }\n}\n","MVC.View = class extends MVC.Events {\n  constructor() {\n    super()\n  }\n  get _elementName() { return this._element.tagName }\n  set _elementName(elementName) {\n    if(!this._element) this._element = document.createElement(elementName)\n  }\n  get _element() { return this.element }\n  set _element(element) {\n    if(element instanceof HTMLElement) {\n      this.element = element\n    } else if(typeof element === 'string') {\n      this.element = document.querySelector(element)\n    }\n  }\n  get _attributes() { return this.attributes || {} }\n  set _attributes(attributes) {\n    for(let [attributeKey, attributeValue] of Object.entries(attributes)) {\n      this._element.setAttribute(attributeKey, attributeValue)\n    }\n    this.attributes = this._element.attributes\n  }\n  get _ui() { return this.ui || {} }\n  set _ui(ui) {\n    for(let [key, value] of ui) {\n      switch(key) {\n        case '@':\n          this.ui[key] = this.element\n          break\n        default:\n          this.ui[key] = this.element.querySelectorAll(value)\n          break;\n      }\n    }\n    this.ui = ui\n  }\n  get _events() { return this.events || {} }\n  set _events(events) {\n    for(let [eventKey, eventValue] of events) {\n      let eventData = eventKey.split[' ']\n      let eventTarget = this[\n        eventData[0].replace('@', '')\n      ]\n      let eventName = eventData[1]\n      let eventCallback = this[\n        eventValue.replace('@', '')\n      ]\n      eventTarget.on(eventName, eventCallback)\n    }\n  }\n  get _callbacks() { return this.callbacks || {} }\n  set _callbacks(callbacks) { this.callbacks = callbacks }\n  get _emitters() { return this.emitters || {} }\n  set _emitters(emitters) { this.emitters = emitters }\n}\n","MVC.Controller = class extends MVC.Events {\n  constructor(settings) {\n    super()\n    if(this.settings) this.settings = settings\n  }\n  get settings() { return this._settings }\n  set settings(settings) {\n    this._settings = settings\n    if(this.settings.models) this._models = models\n    if(this.settings.views) this._views = views\n    if(this.settings.controllers) this._controllers = controllers\n    if(this.settings.routers) this._routers = routers\n    if(this.settings.emitters) this._emitters = emitters\n    if(this.settings.callbacks) this._callbacks = callbacks\n    if(this.settings.events) this._events = events\n  }\n  get _models() { return this.models || {} }\n  set _models(models) { this.models = models }\n  get _views() { return this.views || {} }\n  set _views(views) { this.views = views }\n  get _controllers() { return this.controllers || {} }\n  set _controllers(controllers) { this.controllers = controllers }\n  get _routers() { return this.routers || {} }\n  set _routers(routers) { this.routers = routers }\n  get _emitters() { return this.emitters || {} }\n  set _emitters(emitters) { this.emitters = emitters }\n  get _callbacks() { return this.callbacks || {} }\n  set _callbacks(callbacks) { this.callbacks = callbacks }\n  get _events() { return this.events || {} }\n  set _events(events) {\n    for(let [eventSettings, eventCallback] of Object.entries(events)) {\n      let eventData = eventSettings.split(' ')\n      let eventTarget = eventData[0].replace('@', '').split('.')\n      let eventName = eventData[1]\n      eventCallback = eventCallback.replace('@', '').split('.')\n      this[eventTarget].on(eventName, eventCallback)\n    }\n  }\n}\n","MVC.Router = class extends MVC.Events {\n  constructor(settings) {\n    super()\n    Object.assign(this, settings, { settings: settings })\n    this.setRoutes(this.routes, this.controllers)\n    this.setEvents()\n    this.start()\n    if(typeof this.initialize === 'function') this.initialize()\n  }\n  start() {\n    var location = this.getRoute()\n    if(location === '') {\n      this.navigate('/')\n    }else {\n      window.dispatchEvent(new Event('hashchange'))\n    }\n  }\n  setRoutes(routes, controllers) {\n    for(var route in routes) {\n      this.routes[route] = controllers[routes[route]]\n    }\n    return\n  }\n  setEvents() {\n    window.addEventListener('hashchange', this.hashChange.bind(this))\n    return\n  }\n  getRoute() {\n    return String(window.location.hash).split('#').pop()\n  }\n  hashChange(event) {\n    var route = this.getRoute()\n    try {\n      this.routes[route](event)\n      this.emit('navigate', this)\n    } catch(error) {}\n  }\n  navigate(path) {\n    window.location.hash = path\n  }\n}\n"]}